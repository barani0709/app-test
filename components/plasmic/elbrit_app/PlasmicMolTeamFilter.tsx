/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: dRYYz9rbmwKd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicMolTeamFilter.module.css"; // plasmic-import: dRYYz9rbmwKd/css

createPlasmicElementProxy;

export type PlasmicMolTeamFilter__VariantMembers = {
  clicked: "clicked";
};
export type PlasmicMolTeamFilter__VariantsArgs = {
  clicked?: SingleBooleanChoiceArg<"clicked">;
};
type VariantPropType = keyof PlasmicMolTeamFilter__VariantsArgs;
export const PlasmicMolTeamFilter__VariantProps = new Array<VariantPropType>(
  "clicked"
);

export type PlasmicMolTeamFilter__ArgsType = {
  salesTeam?: string;
  hq?: string;
  be?: string;
  beName?: string;
  onClick?: (team: string) => void;
  slectedState?: string;
};
type ArgPropType = keyof PlasmicMolTeamFilter__ArgsType;
export const PlasmicMolTeamFilter__ArgProps = new Array<ArgPropType>(
  "salesTeam",
  "hq",
  "be",
  "beName",
  "onClick",
  "slectedState"
);

export type PlasmicMolTeamFilter__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultMolTeamFilterProps {
  salesTeam?: string;
  hq?: string;
  be?: string;
  beName?: string;
  onClick?: (team: string) => void;
  slectedState?: string;
  clicked?: SingleBooleanChoiceArg<"clicked">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMolTeamFilter__RenderFunc(props: {
  variants: PlasmicMolTeamFilter__VariantsArgs;
  args: PlasmicMolTeamFilter__ArgsType;
  overrides: PlasmicMolTeamFilter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          salesTeam: "CND Chennai",
          hq: "Chennai",
          be: "00038857",
          beName: "Barani"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.slectedState;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "clicked",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.clicked
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_library_tailwind_3_4_colors,
        styleTokensClassNames_library_tailwind_3_4_number_tokens,
        styleTokensClassNames_plasmic_rich_components,
        sty.root,
        { [sty.rootclicked]: hasVariant($state, "clicked", "clicked") }
      )}
      onChangeCapture={async event => {
        const $steps = {};

        $steps["updateVariable"] = true
          ? (() => {
              const actionArgs = {
                variable: {
                  objRoot: $state,
                  variablePath: ["variable"]
                },
                operation: 0,
                value: $props.slectedState
              };
              return (({ variable, value, startIndex, deleteCount }) => {
                if (!variable) {
                  return;
                }
                const { objRoot, variablePath } = variable;

                $stateSet(objRoot, variablePath, value);
                return value;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateVariable"] != null &&
          typeof $steps["updateVariable"] === "object" &&
          typeof $steps["updateVariable"].then === "function"
        ) {
          $steps["updateVariable"] = await $steps["updateVariable"];
        }

        $steps["updateVariable2"] = true
          ? (() => {
              const actionArgs = { queryInvalidation: ["plasmic_refresh_all"] };
              return (async ({ queryInvalidation }) => {
                if (!queryInvalidation) {
                  return;
                }
                await plasmicInvalidate(queryInvalidation);
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateVariable2"] != null &&
          typeof $steps["updateVariable2"] === "object" &&
          typeof $steps["updateVariable2"].then === "function"
        ) {
          $steps["updateVariable2"] = await $steps["updateVariable2"];
        }
      }}
      onClick={async event => {
        const $steps = {};

        $steps["runOnClick"] = true
          ? (() => {
              const actionArgs = {
                eventRef: $props["onClick"],
                args: [
                  (() => {
                    try {
                      return $props.salesTeam;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                ]
              };
              return (({ eventRef, args }) => {
                return eventRef?.(...(args ?? []));
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runOnClick"] != null &&
          typeof $steps["runOnClick"] === "object" &&
          typeof $steps["runOnClick"].then === "function"
        ) {
          $steps["runOnClick"] = await $steps["runOnClick"];
        }
      }}
      style={
        hasVariant($state, "clicked", "clicked")
          ? (() => {
              try {
                return {
                  border: (() => {
                    const colorMap = {
                      v: "#FF5733",
                      a: "#33B5E5",
                      c: "#9C27B0",
                      e: "#4CAF50"
                    };
                    const firstChar = $props.salesTeam?.[0]?.toLowerCase();
                    const color = colorMap[firstChar] || "#CCCCCC";
                    return `2px solid ${color}`;
                  })()
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()
          : undefined
      }
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__i1Jsi,
          {
            [sty.textclicked__i1JsigZn4Y]: hasVariant(
              $state,
              "clicked",
              "clicked"
            )
          }
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.salesTeam;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__uQswP
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.hq;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__xqBpc
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return `${$props.be} - ${$props.beName}`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMolTeamFilter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMolTeamFilter__VariantsArgs;
    args?: PlasmicMolTeamFilter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMolTeamFilter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMolTeamFilter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMolTeamFilter__ArgProps,
          internalVariantPropNames: PlasmicMolTeamFilter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMolTeamFilter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMolTeamFilter";
  } else {
    func.displayName = `PlasmicMolTeamFilter.${nodeName}`;
  }
  return func;
}

export const PlasmicMolTeamFilter = Object.assign(
  // Top-level PlasmicMolTeamFilter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicMolTeamFilter
    internalVariantProps: PlasmicMolTeamFilter__VariantProps,
    internalArgProps: PlasmicMolTeamFilter__ArgProps
  }
);

export default PlasmicMolTeamFilter;
/* prettier-ignore-end */
