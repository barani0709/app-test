/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: TdGhek9RERo6

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import Popover from "../../Popover"; // plasmic-import: 0utbx7M9Fpbm/component
import Button2 from "../../Button2"; // plasmic-import: eIXmd-ZcWX4a/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicItemCard.module.css"; // plasmic-import: TdGhek9RERo6/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: qXgfVmBqKIDG/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: Zy2qa_w9_rBJ/icon

createPlasmicElementProxy;

export type PlasmicItemCard__VariantMembers = {};
export type PlasmicItemCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicItemCard__VariantsArgs;
export const PlasmicItemCard__VariantProps = new Array<VariantPropType>();

export type PlasmicItemCard__ArgsType = {};
type ArgPropType = keyof PlasmicItemCard__ArgsType;
export const PlasmicItemCard__ArgProps = new Array<ArgPropType>();

export type PlasmicItemCard__OverridesType = {
  root?: Flex__<"div">;
  columns?: Flex__<"div">;
  column?: Flex__<"div">;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  popover?: Flex__<typeof Popover>;
  button2?: Flex__<typeof Button2>;
};

export interface DefaultItemCardProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicItemCard__RenderFunc(props: {
  variants: PlasmicItemCard__VariantsArgs;
  args: PlasmicItemCard__ArgsType;
  overrides: PlasmicItemCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "popover.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_library_tailwind_3_4_colors,
        styleTokensClassNames_library_tailwind_3_4_number_tokens,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div
          data-plasmic-name={"column"}
          data-plasmic-override={overrides.column}
          className={classNames(projectcss.all, sty.column)}
        >
          {(() => {
            const child$Props = {
              arrows: false,
              autoplay: false,
              autoplaySpeed: 0,
              beforeChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "currentSlide",
                  ["sliderCarousel", "currentSlide"],
                  SliderWrapper_Helpers
                ).apply(null, eventArgs);
              },
              centerMode: false,
              className: classNames("__wab_instance", sty.sliderCarousel),
              dots: true,
              initialSlide: generateStateValueProp($state, [
                "sliderCarousel",
                "currentSlide"
              ]),
              pauseOnFocus: false,
              pauseOnHover: true,
              ref: ref => {
                $refs["sliderCarousel"] = ref;
              },
              sliderScopeClassName: sty["sliderCarousel__slider"]
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "currentSlide",
                  plasmicStateName: "sliderCarousel.currentSlide"
                }
              ],
              [],
              SliderWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <SliderWrapper
                data-plasmic-name={"sliderCarousel"}
                data-plasmic-override={overrides.sliderCarousel}
                {...child$Props}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___9YjZt)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ytQjO)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    src={{
                      src: "/plasmic/elbrit_app/images/_1Jpg.jpg",
                      fullWidth: 2364,
                      fullHeight: 2364,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__ohFIi)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__d3AT0)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={{
                      src: "/plasmic/elbrit_app/images/_2Jpg.jpg",
                      fullWidth: 2364,
                      fullHeight: 2364,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___4AdUb)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___6AScj)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={{
                      src: "/plasmic/elbrit_app/images/_3Jpg.jpg",
                      fullWidth: 2364,
                      fullHeight: 2364,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__eSFO)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ddJs)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={{
                      src: "/plasmic/elbrit_app/images/_4Jpg.jpg",
                      fullWidth: 2364,
                      fullHeight: 2364,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </SliderWrapper>
            );
          })()}
          <div className={classNames(projectcss.all, sty.freeBox__u3LtE)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__i3V9N
              )}
            >
              {"ARNIBLOC 100"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___7Q5Ew)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__x3Jjc
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Brand:"}
                </span>
                <React.Fragment>{" ARNIBLOC"}</React.Fragment>
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__i3AcA)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cFcNy
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Composition: "}
                </span>
                <React.Fragment>
                  {"Sacubitril 48 mg + Valsartan 52 mg\n\n\r\n\r\n\r\n\r\n"}
                </React.Fragment>
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__vu1E7)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___88Bjg
              )}
            >
              {
                "MRP: \u20b9300 | PTR: \u20b9214.2857143 | PTS:\u20b9192.8571429\n\r\n\r"
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kJRpT
              )}
            >
              {" "}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__xEpDg)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tLzl
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 300 }}
                >
                  {"Valid From: 17/09/2024 | Price List: MRP Billing"}
                </span>
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__m5HRo)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rL6J2
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token-5vmFiSI-IIdw)" }}
                >
                  {"Label Claim:"}
                </span>
                <React.Fragment>{"\r\n"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 400 }}
                >
                  {"For oral use"}
                </span>
              </React.Fragment>
            </div>
            <Popover
              data-plasmic-name={"popover"}
              data-plasmic-override={overrides.popover}
              className={classNames("__wab_instance", sty.popover)}
              content={
                <div className={classNames(projectcss.all, sty.freeBox__blq2A)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pxjkn
                    )}
                  >
                    {""}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___419Ti
                    )}
                  >
                    {""}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qgoY4
                    )}
                  >
                    {"I"}
                  </div>
                </div>
              }
              isOpen={generateStateValueProp($state, ["popover", "isOpen"])}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["popover", "isOpen"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              trigger={
                <Button2
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2)}
                  label={"info"}
                />
              }
            />
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "column", "sliderCarousel", "popover", "button2"],
  columns: ["columns", "column", "sliderCarousel", "popover", "button2"],
  column: ["column", "sliderCarousel", "popover", "button2"],
  sliderCarousel: ["sliderCarousel"],
  popover: ["popover", "button2"],
  button2: ["button2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  column: "div";
  sliderCarousel: typeof SliderWrapper;
  popover: typeof Popover;
  button2: typeof Button2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicItemCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicItemCard__VariantsArgs;
    args?: PlasmicItemCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicItemCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicItemCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicItemCard__ArgProps,
          internalVariantPropNames: PlasmicItemCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicItemCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicItemCard";
  } else {
    func.displayName = `PlasmicItemCard.${nodeName}`;
  }
  return func;
}

export const PlasmicItemCard = Object.assign(
  // Top-level PlasmicItemCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    popover: makeNodeComponent("popover"),
    button2: makeNodeComponent("button2"),

    // Metadata about props expected for PlasmicItemCard
    internalVariantProps: PlasmicItemCard__VariantProps,
    internalArgProps: PlasmicItemCard__ArgProps
  }
);

export default PlasmicItemCard;
/* prettier-ignore-end */
