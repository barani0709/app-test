/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: 1i9yGU5EjE0f

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicProfilePage.module.css"; // plasmic-import: 1i9yGU5EjE0f/css

import ArrowBigLeftLinesFilledIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__ArrowBigLeftLinesFilled"; // plasmic-import: 5RNLejMsOBdE/icon

createPlasmicElementProxy;

export type PlasmicProfilePage__VariantMembers = {};
export type PlasmicProfilePage__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfilePage__VariantsArgs;
export const PlasmicProfilePage__VariantProps = new Array<VariantPropType>();

export type PlasmicProfilePage__ArgsType = {};
type ArgPropType = keyof PlasmicProfilePage__ArgsType;
export const PlasmicProfilePage__ArgProps = new Array<ArgPropType>();

export type PlasmicProfilePage__OverridesType = {
  root?: Flex__<"div">;
  svg?: Flex__<"svg">;
  img?: Flex__<typeof PlasmicImg__>;
  tabs?: Flex__<typeof AntdTabs>;
  input2?: Flex__<typeof AntdInput>;
  input3?: Flex__<typeof AntdInput>;
  input4?: Flex__<typeof AntdInput>;
};

export interface DefaultProfilePageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfilePage__RenderFunc(props: {
  variants: PlasmicProfilePage__VariantsArgs;
  args: PlasmicProfilePage__ArgsType;
  overrides: PlasmicProfilePage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? "3" : "3"
      },
      {
        path: "input2[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    profileUpdate: usePlasmicDataOp(() => {
      return {
        sourceId: "kipZkDNi8dCzZdLA5QF7Pw",
        opId: "da8a2c2b-aa3d-4564-9d69-efc3e90e0931",
        userArgs: {},
        cacheKey: `plasmic.$.da8a2c2b-aa3d-4564-9d69-efc3e90e0931.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    employee: usePlasmicDataOp(() => {
      return {
        sourceId: "kipZkDNi8dCzZdLA5QF7Pw",
        opId: "4291404f-69c7-410f-b151-07fd72b3721f",
        userArgs: {
          variables: [localStorage.getItem("userPhoneNumber")]
        },
        cacheKey: `plasmic.$.4291404f-69c7-410f-b151-07fd72b3721f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_library_tailwind_3_4_colors,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__pr5Ba)}>
            <div className={classNames(projectcss.all, sty.freeBox__mH5J4)}>
              <div
                className={classNames(projectcss.all, sty.freeBox__uYepp)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHome"] = true
                    ? (() => {
                        const actionArgs = { destination: `/` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHome"] != null &&
                    typeof $steps["goToHome"] === "object" &&
                    typeof $steps["goToHome"].then === "function"
                  ) {
                    $steps["goToHome"] = await $steps["goToHome"];
                  }
                }}
              >
                <ArrowBigLeftLinesFilledIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__w2DCk
                )}
              >
                {"PROFILE PAGE"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__eTqX)}>
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "84px"
                    : "120px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "84px"
                    : "120px"
                }
                loading={"lazy"}
                src={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return localStorage.getItem("userAvatar");
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/elbrit_app/images/elbritLogoE2Jpg.jpg",
                              fullWidth: 512,
                              fullHeight: 508,
                              aspectRatio: undefined
                            };
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return localStorage.getItem("userAvatar");
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/elbrit_app/images/elbritLogoE2Jpg.jpg",
                              fullWidth: 512,
                              fullHeight: 508,
                              aspectRatio: undefined
                            };
                          }
                          throw e;
                        }
                      })()
                }
              />

              <div className={classNames(projectcss.all, sty.freeBox___4OvTw)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uu2Dk
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.employee.data.response.data.profile
                          .edges[0].node.first_name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Name";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mG2M8
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.employee.data.response.data.profile
                          .edges[0].node.designation__name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Name";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nDvGi
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.employee.data.response.data.profile
                          .edges[0].node.fsl_hq__name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Name";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <AntdTabs
              data-plasmic-name={"tabs"}
              data-plasmic-override={overrides.tabs}
              activeKey={generateStateValueProp($state, ["tabs", "activeKey"])}
              animateTabBar={true}
              animateTabContent={false}
              animated={true}
              className={classNames("__wab_instance", sty.tabs)}
              defaultActiveKey={
                hasVariant(globalVariants, "screen", "mobileOnly") ? "3" : "3"
              }
              items={
                <React.Fragment>
                  <AntdTabItem
                    className={classNames("__wab_instance", sty.tabItem__z97Mt)}
                    key={"1"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4Q17C
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Overview"
                          : "Overview"}
                      </div>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lz61C
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Overview"
                        : "Overview"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__aQiJ)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return Object.entries(
                              $queries.employee.data.response.data.overview
                                .edges[0].node
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField___8ZbRh
                            )}
                            initialValue={"j"}
                            key={currentIndex}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___665Y9
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem[0]
                                        .replaceAll("_", " ")
                                        .replace(
                                          /\w\S*/g,
                                          text =>
                                            text.charAt(0).toUpperCase() +
                                            text.substring(1).toLowerCase()
                                        );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Label";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            name={(() => {
                              try {
                                return currentItem[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            noLabel={false}
                          >
                            {(() => {
                              const child$Props = {
                                autoFocus: false,
                                bordered: true,
                                className: classNames(
                                  "__wab_instance",
                                  sty.input2
                                ),
                                disabled: false,
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input2", __plasmic_idx_0, "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                placeholder: (() => {
                                  try {
                                    return currentItem[1];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                size: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "middle"
                                  : "large",
                                value: generateStateValueProp($state, [
                                  "input2",
                                  __plasmic_idx_0,
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input2[].value"
                                  }
                                ],
                                [__plasmic_idx_0],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "input2[].value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdInput
                                  data-plasmic-name={"input2"}
                                  data-plasmic-override={overrides.input2}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                        );
                      })}
                    </div>
                  </AntdTabItem>
                  <AntdTabItem
                    className={classNames(
                      "__wab_instance",
                      sty.tabItem___5Knqq
                    )}
                    key={"2"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zrTye
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Company Details"
                          : "Company Details"}
                      </div>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vLswr
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Company Details"
                        : "Company Details"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2EVsB
                      )}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return Object.entries(
                              $queries.employee.data.response.data
                                .Companydetails.edges[0].node
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__bGHtO
                            )}
                            initialValue={"j"}
                            key={currentIndex}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__y65W7
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem[0]
                                        .replaceAll("_", " ")
                                        .replace(
                                          /\w\S*/g,
                                          text =>
                                            text.charAt(0).toUpperCase() +
                                            text.substring(1).toLowerCase()
                                        );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Label";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            name={(() => {
                              try {
                                return currentItem[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            noLabel={false}
                          >
                            {(() => {
                              const child$Props = {
                                autoFocus: false,
                                bordered: true,
                                className: classNames(
                                  "__wab_instance",
                                  sty.input3
                                ),
                                disabled: false,
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input3", __plasmic_idx_0, "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                placeholder: (() => {
                                  try {
                                    return currentItem[1];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                size: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "middle"
                                  : "large",
                                value: generateStateValueProp($state, [
                                  "input3",
                                  __plasmic_idx_0,
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input3[].value"
                                  }
                                ],
                                [__plasmic_idx_0],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "input3[].value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdInput
                                  data-plasmic-name={"input3"}
                                  data-plasmic-override={overrides.input3}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                        );
                      })}
                    </div>
                  </AntdTabItem>
                  <AntdTabItem
                    className={classNames("__wab_instance", sty.tabItem__gp3FX)}
                    key={"3"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xrw6O
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Salary Details"
                          : "Salary Details"}
                      </div>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3UzZ0
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Salary Details"
                        : "Salary Details"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tEbkA)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return Object.entries(
                              $queries.employee.data.response.data.Salarydetails
                                .edges[0].node
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__kiFrt
                            )}
                            initialValue={"j"}
                            key={currentIndex}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___1RqEm
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem[0]
                                        .replaceAll("_", " ")
                                        .replace(
                                          /\w\S*/g,
                                          text =>
                                            text.charAt(0).toUpperCase() +
                                            text.substring(1).toLowerCase()
                                        );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Label";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            name={(() => {
                              try {
                                return currentItem[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            noLabel={false}
                          >
                            {(() => {
                              const child$Props = {
                                autoFocus: false,
                                bordered: true,
                                className: classNames(
                                  "__wab_instance",
                                  sty.input4
                                ),
                                disabled: false,
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input4", __plasmic_idx_0, "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                placeholder: (() => {
                                  try {
                                    return currentItem[1];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                size: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "middle"
                                  : "large",
                                value: generateStateValueProp($state, [
                                  "input4",
                                  __plasmic_idx_0,
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input4[].value"
                                  }
                                ],
                                [__plasmic_idx_0],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "input4[].value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdInput
                                  data-plasmic-name={"input4"}
                                  data-plasmic-override={overrides.input4}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                        );
                      })}
                    </div>
                  </AntdTabItem>
                </React.Fragment>
              }
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["tabs", "activeKey"]).apply(
                  null,
                  eventArgs
                );
              }}
              sticky={false}
              tabBarBackground={"#FFF"}
              tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
              tabsScopeClassName={sty["tabs__tabs"]}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "img", "tabs", "input2", "input3", "input4"],
  svg: ["svg"],
  img: ["img"],
  tabs: ["tabs", "input2", "input3", "input4"],
  input2: ["input2"],
  input3: ["input3"],
  input4: ["input4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  img: typeof PlasmicImg__;
  tabs: typeof AntdTabs;
  input2: typeof AntdInput;
  input3: typeof AntdInput;
  input4: typeof AntdInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfilePage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfilePage__VariantsArgs;
    args?: PlasmicProfilePage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfilePage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProfilePage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfilePage__ArgProps,
          internalVariantPropNames: PlasmicProfilePage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfilePage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfilePage";
  } else {
    func.displayName = `PlasmicProfilePage.${nodeName}`;
  }
  return func;
}

export const PlasmicProfilePage = Object.assign(
  // Top-level PlasmicProfilePage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    img: makeNodeComponent("img"),
    tabs: makeNodeComponent("tabs"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    input4: makeNodeComponent("input4"),

    // Metadata about props expected for PlasmicProfilePage
    internalVariantProps: PlasmicProfilePage__VariantProps,
    internalArgProps: PlasmicProfilePage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProfilePage;
/* prettier-ignore-end */
