/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: 2w5tC3oZOkGj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicAtomFilters.module.css"; // plasmic-import: 2w5tC3oZOkGj/css

createPlasmicElementProxy;

export type PlasmicAtomFilters__VariantMembers = {
  select: "select";
};
export type PlasmicAtomFilters__VariantsArgs = {
  select?: SingleBooleanChoiceArg<"select">;
};
type VariantPropType = keyof PlasmicAtomFilters__VariantsArgs;
export const PlasmicAtomFilters__VariantProps = new Array<VariantPropType>(
  "select"
);

export type PlasmicAtomFilters__ArgsType = {
  children?: React.ReactNode;
  name?: string;
  onClick?: (event: any) => void;
  icon?: string;
  value?: string;
};
type ArgPropType = keyof PlasmicAtomFilters__ArgsType;
export const PlasmicAtomFilters__ArgProps = new Array<ArgPropType>(
  "children",
  "name",
  "onClick",
  "icon",
  "value"
);

export type PlasmicAtomFilters__OverridesType = {
  root?: Flex__<"div">;
  cmsDataFetcher?: Flex__<typeof CmsQueryRepeater>;
  cmsEntryField?: Flex__<typeof CmsRowField>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultAtomFiltersProps {
  children?: React.ReactNode;
  name?: string;
  onClick?: (event: any) => void;
  icon?: string;
  value?: string;
  select?: SingleBooleanChoiceArg<"select">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAtomFilters__RenderFunc(props: {
  variants: PlasmicAtomFilters__VariantsArgs;
  args: PlasmicAtomFilters__ArgsType;
  overrides: PlasmicAtomFilters__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          name: "Sort",
          icon: "home",
          value: "A-Z"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.select
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_library_tailwind_3_4_colors,
        styleTokensClassNames_library_tailwind_3_4_number_tokens,
        styleTokensClassNames_plasmic_rich_components,
        sty.root,
        { [sty.rootselect]: hasVariant($state, "select", "select") }
      )}
      onClick={args.onClick}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__eZZg, {
          [sty.freeBoxselect__eZZgDjIav]: hasVariant($state, "select", "select")
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___4Drdv,
            {
              [sty.textselect___4DrdvDjIav]: hasVariant(
                $state,
                "select",
                "select"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "view";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <CmsQueryRepeater
          data-plasmic-name={"cmsDataFetcher"}
          data-plasmic-override={overrides.cmsDataFetcher}
          className={classNames("__wab_instance", sty.cmsDataFetcher, {
            [sty.cmsDataFetcherselect]: hasVariant($state, "select", "select")
          })}
          desc={false}
          emptyMessage={
            <DataCtxReader__>
              {$ctx => (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5ZgJy
                  )}
                >
                  {"No matching published entries found."}
                </div>
              )}
            </DataCtxReader__>
          }
          fields={["icon"]}
          filterField={"name"}
          filterValue={(() => {
            try {
              return $props.icon;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          forceEmptyState={false}
          forceLoadingState={false}
          limit={0}
          loadingMessage={
            <DataCtxReader__>
              {$ctx => (
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"1rem"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/elbrit_app/images/doubleRing1X10S200Px200Px1Gif.gif",
                    fullWidth: 200,
                    fullHeight: 200,
                    aspectRatio: undefined
                  }}
                />
              )}
            </DataCtxReader__>
          }
          noAutoRepeat={false}
          noLayout={false}
          table={"icons"}
          useDraft={false}
        >
          <DataCtxReader__>
            {$ctx => (
              <div className={classNames(projectcss.all, sty.freeBox__xRaG7)}>
                <CmsRowField
                  data-plasmic-name={"cmsEntryField"}
                  data-plasmic-override={overrides.cmsEntryField}
                  className={classNames("__wab_instance", sty.cmsEntryField, {
                    [sty.cmsEntryFieldselect]: hasVariant(
                      $state,
                      "select",
                      "select"
                    )
                  })}
                  field={"icon"}
                  themeResetClassName={classNames(
                    projectcss.root_reset,
                    projectcss.root_reset_tags,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    styleTokensClassNames,
                    styleTokensClassNames_antd_5_hostless,
                    styleTokensClassNames_library_tailwind_3_4_colors,
                    styleTokensClassNames_library_tailwind_3_4_number_tokens,
                    styleTokensClassNames_plasmic_rich_components
                  )}
                />
              </div>
            )}
          </DataCtxReader__>
        </CmsQueryRepeater>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__g93My,
            {
              [sty.textselect__g93MyDjIav]: hasVariant(
                $state,
                "select",
                "select"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.value;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
      {(hasVariant($state, "select", "select") ? true : false)
        ? renderPlasmicSlot({
            defaultContents: null,
            value: args.children
          })
        : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "cmsDataFetcher", "cmsEntryField", "img"],
  cmsDataFetcher: ["cmsDataFetcher", "cmsEntryField", "img"],
  cmsEntryField: ["cmsEntryField"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  cmsDataFetcher: typeof CmsQueryRepeater;
  cmsEntryField: typeof CmsRowField;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAtomFilters__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAtomFilters__VariantsArgs;
    args?: PlasmicAtomFilters__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAtomFilters__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAtomFilters__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAtomFilters__ArgProps,
          internalVariantPropNames: PlasmicAtomFilters__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAtomFilters__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAtomFilters";
  } else {
    func.displayName = `PlasmicAtomFilters.${nodeName}`;
  }
  return func;
}

export const PlasmicAtomFilters = Object.assign(
  // Top-level PlasmicAtomFilters renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    cmsDataFetcher: makeNodeComponent("cmsDataFetcher"),
    cmsEntryField: makeNodeComponent("cmsEntryField"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicAtomFilters
    internalVariantProps: PlasmicAtomFilters__VariantProps,
    internalArgProps: PlasmicAtomFilters__ArgProps
  }
);

export default PlasmicAtomFilters;
/* prettier-ignore-end */
