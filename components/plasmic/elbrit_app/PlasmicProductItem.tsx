/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: QQfa88-DlZpZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Layout from "../../Layout"; // plasmic-import: pAY-hwRYSgy5/component
import Combobox from "../../Combobox"; // plasmic-import: AAXsSjk33gui/component
import MenuItem from "../../MenuItem"; // plasmic-import: uc7bJMLR_F-c/component
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import MolProdCards from "../../MolProdCards"; // plasmic-import: QLKbsHkUdyIn/component
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import Label from "../../Label"; // plasmic-import: _L7DdH4fVzRf/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicProductItem.module.css"; // plasmic-import: QQfa88-DlZpZ/css

import ArrowLeftIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__ArrowLeft"; // plasmic-import: CFGagD1izIUw/icon

createPlasmicElementProxy;

export type PlasmicProductItem__VariantMembers = {};
export type PlasmicProductItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductItem__VariantsArgs;
export const PlasmicProductItem__VariantProps = new Array<VariantPropType>();

export type PlasmicProductItem__ArgsType = {};
type ArgPropType = keyof PlasmicProductItem__ArgsType;
export const PlasmicProductItem__ArgProps = new Array<ArgPropType>();

export type PlasmicProductItem__OverridesType = {
  root?: Flex__<"div">;
  layout?: Flex__<typeof Layout>;
  svg?: Flex__<"svg">;
  combobox?: Flex__<typeof Combobox>;
  menuItem?: Flex__<typeof MenuItem>;
  loadingBoundary?: Flex__<typeof LoadingBoundary>;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  img?: Flex__<typeof PlasmicImg__>;
  tabs?: Flex__<typeof AntdTabs>;
  table?: Flex__<typeof RichTable>;
};

export interface DefaultProductItemProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductItem__RenderFunc(props: {
  variants: PlasmicProductItem__VariantsArgs;
  args: PlasmicProductItem__ArgsType;
  overrides: PlasmicProductItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "item",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.item.data.response.data.Item;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "product",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "combobox.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "combobox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "productList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.prodList.data.response.data.Items.edges.map(
                a => a.node.item_name
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return ["Loading..."];
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    item: usePlasmicDataOp(() => {
      return {
        sourceId: "kipZkDNi8dCzZdLA5QF7Pw",
        opId: "a2064ee3-14fb-491c-b782-79733a005d47",
        userArgs: {
          variables: [
            $state.combobox.value ??
              $ctx.fn.decodeURIComponent($ctx.params.slug) ??
              decodeURI(window.location.pathname.split("/").at(-1)) ??
              "TRIGLIMIBRIT 1.3"
          ]
        },
        cacheKey: `plasmic.$.a2064ee3-14fb-491c-b782-79733a005d47.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    prodList: usePlasmicDataOp(() => {
      return {
        sourceId: "kipZkDNi8dCzZdLA5QF7Pw",
        opId: "383160f0-28d9-41a2-8d27-0e475a4dee97",
        userArgs: {},
        cacheKey: `plasmic.$.383160f0-28d9-41a2-8d27-0e475a4dee97.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_library_tailwind_3_4_colors,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <Layout
            data-plasmic-name={"layout"}
            data-plasmic-override={overrides.layout}
            className={classNames("__wab_instance", sty.layout)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___0Ygy5)}>
              <div className={classNames(projectcss.all, sty.freeBox__by7AJ)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__h3IhX)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToProduct"] = true
                      ? (() => {
                          const actionArgs = { destination: `/Product` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToProduct"] != null &&
                      typeof $steps["goToProduct"] === "object" &&
                      typeof $steps["goToProduct"].then === "function"
                    ) {
                      $steps["goToProduct"] = await $steps["goToProduct"];
                    }
                  }}
                >
                  <ArrowLeftIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__usyLm)}>
                  <Combobox
                    data-plasmic-name={"combobox"}
                    data-plasmic-override={overrides.combobox}
                    className={classNames("__wab_instance", sty.combobox)}
                    isOpen={generateStateValueProp($state, [
                      "combobox",
                      "isOpen"
                    ])}
                    items={(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.productList;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <MenuItem
                          data-plasmic-name={"menuItem"}
                          data-plasmic-override={overrides.menuItem}
                          key={currentIndex}
                          label={(() => {
                            try {
                              return currentItem;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          value={(() => {
                            try {
                              return currentItem;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      );
                    })}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pP577
                        )}
                      >
                        {"Products"}
                      </div>
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "combobox",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["goToProductItem"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/product_item/${(() => {
                                  try {
                                    return $ctx.fn.encodeURIComponent(
                                      $state.combobox.value
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToProductItem"] != null &&
                          typeof $steps["goToProductItem"] === "object" &&
                          typeof $steps["goToProductItem"].then === "function"
                        ) {
                          $steps["goToProductItem"] = await $steps[
                            "goToProductItem"
                          ];
                        }

                        $steps["refreshData"] = true
                          ? (() => {
                              const actionArgs = {
                                queryInvalidation: ["plasmic_refresh_all"]
                              };
                              return (async ({ queryInvalidation }) => {
                                if (!queryInvalidation) {
                                  return;
                                }
                                await plasmicInvalidate(queryInvalidation);
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["refreshData"] != null &&
                          typeof $steps["refreshData"] === "object" &&
                          typeof $steps["refreshData"].then === "function"
                        ) {
                          $steps["refreshData"] = await $steps["refreshData"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "combobox",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    type={"plain"}
                    value={generateStateValueProp($state, [
                      "combobox",
                      "value"
                    ])}
                  />
                </div>
              </div>
              <LoadingBoundary
                data-plasmic-name={"loadingBoundary"}
                data-plasmic-override={overrides.loadingBoundary}
                loadingState={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oz6F
                        )}
                      />
                    )}
                  </DataCtxReader__>
                }
              >
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fdIxc)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hL2L6
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1IGon
                          )}
                        >
                          {(() => {
                            const child$Props = {
                              adaptiveHeight: true,
                              arrows: false,
                              autoplay: false,
                              autoplaySpeed: 0,
                              beforeChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "currentSlide",
                                  ["sliderCarousel", "currentSlide"],
                                  SliderWrapper_Helpers
                                ).apply(null, eventArgs);
                              },
                              centerMode: false,
                              className: classNames(
                                "__wab_instance",
                                sty.sliderCarousel
                              ),
                              cssEase: "linear",
                              dots: true,
                              initialSlide: generateStateValueProp($state, [
                                "sliderCarousel",
                                "currentSlide"
                              ]),
                              lazyLoad: "progressive",
                              ref: ref => {
                                $refs["sliderCarousel"] = ref;
                              },
                              sliderScopeClassName:
                                sty["sliderCarousel__slider"],
                              speed: hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? 3500
                                : 800,
                              swipeToSlide: true,
                              variableWidth: false,
                              vertical: false
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "currentSlide",
                                  plasmicStateName:
                                    "sliderCarousel.currentSlide"
                                }
                              ],
                              [],
                              SliderWrapper_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <SliderWrapper
                                data-plasmic-name={"sliderCarousel"}
                                data-plasmic-override={overrides.sliderCarousel}
                                {...child$Props}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return [
                                        {
                                          url: $state.item.whg_product_box_url
                                        },
                                        {
                                          url: $state.item.whg_product_strip_url
                                        }
                                      ];
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__mPf7O
                                      )}
                                      key={currentIndex}
                                    >
                                      <PlasmicImg__
                                        data-plasmic-name={"img"}
                                        data-plasmic-override={overrides.img}
                                        alt={""}
                                        className={classNames(sty.img)}
                                        displayHeight={"auto"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"auto"}
                                        src={
                                          hasVariant(
                                            globalVariants,
                                            "screen",
                                            "mobileOnly"
                                          )
                                            ? (() => {
                                                try {
                                                  return (() => {
                                                    const url = currentItem.url;
                                                    return (
                                                      url +
                                                      "&twic=v1/cover=6:2/cover=6:3/resize=340x220"
                                                    );
                                                  })();
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "https://static1.plasmic.app/components/react-slick/slide1.png";
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            : (() => {
                                                try {
                                                  return (() => {
                                                    const url = currentItem.url;
                                                    return (
                                                      url +
                                                      "&twic=v1/cover=6:2/cover=6:2.8"
                                                    );
                                                  })();
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "https://static1.plasmic.app/components/react-slick/slide1.png";
                                                  }
                                                  throw e;
                                                }
                                              })()
                                        }
                                      />
                                    </div>
                                  );
                                })}
                              </SliderWrapper>
                            );
                          })()}
                        </div>
                        <MolProdCards
                          brand={(() => {
                            try {
                              return $state.item.brand__name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          className={classNames(
                            "__wab_instance",
                            sty.molProdCards__lnHag
                          )}
                          items={(() => {
                            try {
                              return $state.item.item_name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          mrp={(() => {
                            try {
                              return (() => {
                                const formattedMRP = Number(
                                  Number($state.item.whg_last_mrp).toFixed(2)
                                );
                                return formattedMRP;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return 120;
                              }
                              throw e;
                            }
                          })()}
                          ptr={(() => {
                            try {
                              return (() => {
                                const formattedMRP = Number(
                                  Number($state.item.whg_last_ptr).toFixed(2)
                                );
                                return formattedMRP;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return 100;
                              }
                              throw e;
                            }
                          })()}
                          pts={(() => {
                            try {
                              return (() => {
                                const formattedMRP = Number(
                                  Number($state.item.whg_last_mrp).toFixed(2)
                                );
                                return formattedMRP;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return 80;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hM7TU
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : false
                        ) ? (
                          <MolProdCards
                            brand={(() => {
                              try {
                                return $state.item.brand__name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            className={classNames(
                              "__wab_instance",
                              sty.molProdCards__j041
                            )}
                            items={(() => {
                              try {
                                return $state.item.item_name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            mrp={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? (() => {
                                    try {
                                      return (() => {
                                        const formattedMRP = Number(
                                          Number(
                                            $state.item.whg_last_mrp
                                          ).toFixed(2)
                                        );
                                        return formattedMRP;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return 120;
                                      }
                                      throw e;
                                    }
                                  })()
                                : (() => {
                                    try {
                                      return $state.item.whg_last_mrp;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return 120;
                                      }
                                      throw e;
                                    }
                                  })()
                            }
                            ptr={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? (() => {
                                    try {
                                      return (() => {
                                        const formattedMRP = Number(
                                          Number(
                                            $state.item.whg_last_mrp
                                          ).toFixed(2)
                                        );
                                        return formattedMRP;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return 100;
                                      }
                                      throw e;
                                    }
                                  })()
                                : (() => {
                                    try {
                                      return $state.item.whg_last_ptr;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return 100;
                                      }
                                      throw e;
                                    }
                                  })()
                            }
                            pts={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? (() => {
                                    try {
                                      return (() => {
                                        const formattedMRP = Number(
                                          Number(
                                            $state.item.whg_last_mrp
                                          ).toFixed(2)
                                        );
                                        return formattedMRP;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return 80;
                                      }
                                      throw e;
                                    }
                                  })()
                                : (() => {
                                    try {
                                      return $state.item.whg_last_pts;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return 80;
                                      }
                                      throw e;
                                    }
                                  })()
                            }
                          />
                        ) : null}
                        <AntdTabs
                          data-plasmic-name={"tabs"}
                          data-plasmic-override={overrides.tabs}
                          activeKey={generateStateValueProp($state, [
                            "tabs",
                            "activeKey"
                          ])}
                          animateTabBar={true}
                          animateTabContent={false}
                          animated={true}
                          className={classNames("__wab_instance", sty.tabs)}
                          items={
                            <React.Fragment>
                              <AntdTabItem
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabItem__bqbVz
                                )}
                                key={"1"}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__rAa6E
                                    )}
                                  >
                                    {"Overview"}
                                  </div>
                                }
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__jpSzk
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___7P0Eh
                                    )}
                                  >
                                    {(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return (() => {
                                            let mapping = {
                                              whg_composition: "Composition",
                                              whg_mechanism_of_action:
                                                "Mechanism of Action",
                                              whg_advantages: "Advantages",
                                              whg_dosage: "Dosage",
                                              whg_market_size: "Market Size",
                                              whg_patient_profile:
                                                "Patient Profile",
                                              whg_target_customers:
                                                "Target Customers"
                                            };
                                            return Object.keys(mapping).map(
                                              x => {
                                                return {
                                                  value: $state.item[x],
                                                  name: mapping[x]
                                                };
                                              }
                                            );
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_0, __plasmic_idx_0) => {
                                        const currentItem = __plasmic_item_0;
                                        const currentIndex = __plasmic_idx_0;
                                        return (
                                          <Label
                                            className={classNames(
                                              "__wab_instance",
                                              sty.label__qRmLz
                                            )}
                                            key={currentIndex}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__qhQfq
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__aQhB
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return `${currentItem.name}: `;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "Market Size";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__cjF3A
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return currentItem.value;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </div>
                                          </Label>
                                        );
                                      }
                                    )}
                                  </div>
                                  <Label
                                    className={classNames(
                                      "__wab_instance",
                                      sty.label__xyFli
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__b6Vww
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__zfyBf
                                        )}
                                      >
                                        {"Lable Claim:"}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__fk2K
                                        )}
                                        style={
                                          hasVariant(
                                            globalVariants,
                                            "screen",
                                            "mobileOnly"
                                          )
                                            ? (() => {
                                                try {
                                                  return undefined;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            : undefined
                                        }
                                      >
                                        {(() => {
                                          const child$Props = {
                                            className: classNames(
                                              "__wab_instance",
                                              sty.table
                                            ),
                                            data: (() => {
                                              try {
                                                return (() => {
                                                  const raw =
                                                    $state.item?.whg_label_claim?.trim();
                                                  if (!raw) {
                                                    return [];
                                                  }
                                                  const lines = raw
                                                    .split("\n")
                                                    .map(l => l.trim())
                                                    .filter(Boolean);
                                                  const rows = lines
                                                    .slice(1)
                                                    .map(line => {
                                                      const parts = line
                                                        .replace(
                                                          /([.…\.]{2,})/g,
                                                          "|"
                                                        )
                                                        .split("|")
                                                        .map(p => p.trim())
                                                        .filter(Boolean);
                                                      return {
                                                        item: parts[0] ?? "",
                                                        value: parts[1] ?? ""
                                                      };
                                                    });
                                                  return rows;
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            defaultSize: hasVariant(
                                              globalVariants,
                                              "screen",
                                              "mobileOnly"
                                            )
                                              ? "small"
                                              : undefined,
                                            hideColumnPicker: true,
                                            hideDensity: true,
                                            hideExports: true,
                                            hideSearch: true,
                                            onRowSelectionChanged: async (
                                              ...eventArgs: any
                                            ) => {
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "selectedRowKey",
                                                ["table", "selectedRowKey"],
                                                RichTable_Helpers
                                              ).apply(null, eventArgs);
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "selectedRow",
                                                ["table", "selectedRow"],
                                                RichTable_Helpers
                                              ).apply(null, eventArgs);
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "selectedRows",
                                                ["table", "selectedRows"],
                                                RichTable_Helpers
                                              ).apply(null, eventArgs);
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "selectedRowKeys",
                                                ["table", "selectedRowKeys"],
                                                RichTable_Helpers
                                              ).apply(null, eventArgs);
                                            },
                                            pagination: false,
                                            scopeClassName:
                                              sty["table__instance"],
                                            selectedRowKey:
                                              generateStateValueProp($state, [
                                                "table",
                                                "selectedRowKey"
                                              ]),
                                            selectedRowKeys:
                                              generateStateValueProp($state, [
                                                "table",
                                                "selectedRowKeys"
                                              ]),
                                            themeResetClassName: classNames(
                                              projectcss.root_reset,
                                              projectcss.root_reset_tags,
                                              projectcss.plasmic_default_styles,
                                              projectcss.plasmic_mixins,
                                              styleTokensClassNames,
                                              styleTokensClassNames_antd_5_hostless,
                                              styleTokensClassNames_library_tailwind_3_4_colors,
                                              styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                              styleTokensClassNames_plasmic_rich_components
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "selectedRowKey",
                                                plasmicStateName:
                                                  "table.selectedRowKey"
                                              },
                                              {
                                                name: "selectedRow",
                                                plasmicStateName:
                                                  "table.selectedRow"
                                              },
                                              {
                                                name: "selectedRows",
                                                plasmicStateName:
                                                  "table.selectedRows"
                                              },
                                              {
                                                name: "selectedRowKeys",
                                                plasmicStateName:
                                                  "table.selectedRowKeys"
                                              }
                                            ],
                                            [],
                                            RichTable_Helpers ?? {},
                                            child$Props
                                          );

                                          return (
                                            <RichTable
                                              data-plasmic-name={"table"}
                                              data-plasmic-override={
                                                overrides.table
                                              }
                                              {...child$Props}
                                            />
                                          );
                                        })()}
                                      </div>
                                    </div>
                                  </Label>
                                </div>
                              </AntdTabItem>
                              <AntdTabItem
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabItem__h6Sis
                                )}
                                key={"2"}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__qGdSa
                                    )}
                                  >
                                    {"Indication"}
                                  </div>
                                }
                              >
                                <Label
                                  className={classNames(
                                    "__wab_instance",
                                    sty.label__ommNk
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___3H8W
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.item.whg_indication;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Label";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </Label>
                              </AntdTabItem>
                            </React.Fragment>
                          }
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "tabs",
                              "activeKey"
                            ]).apply(null, eventArgs);
                          }}
                          sticky={false}
                          tabBarBackground={"#FFF"}
                          tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
                          tabsScopeClassName={sty["tabs__tabs"]}
                        />
                      </div>
                    </div>
                  )}
                </DataCtxReader__>
              </LoadingBoundary>
            </div>
          </Layout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "layout",
    "svg",
    "combobox",
    "menuItem",
    "loadingBoundary",
    "sliderCarousel",
    "img",
    "tabs",
    "table"
  ],
  layout: [
    "layout",
    "svg",
    "combobox",
    "menuItem",
    "loadingBoundary",
    "sliderCarousel",
    "img",
    "tabs",
    "table"
  ],
  svg: ["svg"],
  combobox: ["combobox", "menuItem"],
  menuItem: ["menuItem"],
  loadingBoundary: [
    "loadingBoundary",
    "sliderCarousel",
    "img",
    "tabs",
    "table"
  ],
  sliderCarousel: ["sliderCarousel", "img"],
  img: ["img"],
  tabs: ["tabs", "table"],
  table: ["table"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  layout: typeof Layout;
  svg: "svg";
  combobox: typeof Combobox;
  menuItem: typeof MenuItem;
  loadingBoundary: typeof LoadingBoundary;
  sliderCarousel: typeof SliderWrapper;
  img: typeof PlasmicImg__;
  tabs: typeof AntdTabs;
  table: typeof RichTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductItem__VariantsArgs;
    args?: PlasmicProductItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProductItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductItem__ArgProps,
          internalVariantPropNames: PlasmicProductItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductItem";
  } else {
    func.displayName = `PlasmicProductItem.${nodeName}`;
  }
  return func;
}

export const PlasmicProductItem = Object.assign(
  // Top-level PlasmicProductItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    layout: makeNodeComponent("layout"),
    svg: makeNodeComponent("svg"),
    combobox: makeNodeComponent("combobox"),
    menuItem: makeNodeComponent("menuItem"),
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    img: makeNodeComponent("img"),
    tabs: makeNodeComponent("tabs"),
    table: makeNodeComponent("table"),

    // Metadata about props expected for PlasmicProductItem
    internalVariantProps: PlasmicProductItem__VariantProps,
    internalArgProps: PlasmicProductItem__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProductItem;
/* prettier-ignore-end */
