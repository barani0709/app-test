/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: 5ws1bNmXCLoT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MolSalesCard from "../../MolSalesCard"; // plasmic-import: 5dAXS18GO-4H/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicOrgSalesCardMix.module.css"; // plasmic-import: 5ws1bNmXCLoT/css

createPlasmicElementProxy;

export type PlasmicOrgSalesCardMix__VariantMembers = {};
export type PlasmicOrgSalesCardMix__VariantsArgs = {};
type VariantPropType = keyof PlasmicOrgSalesCardMix__VariantsArgs;
export const PlasmicOrgSalesCardMix__VariantProps =
  new Array<VariantPropType>();

export type PlasmicOrgSalesCardMix__ArgsType = { data?: any };
type ArgPropType = keyof PlasmicOrgSalesCardMix__ArgsType;
export const PlasmicOrgSalesCardMix__ArgProps = new Array<ArgPropType>("data");

export type PlasmicOrgSalesCardMix__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultOrgSalesCardMixProps {
  data?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicOrgSalesCardMix__RenderFunc(props: {
  variants: PlasmicOrgSalesCardMix__VariantsArgs;
  args: PlasmicOrgSalesCardMix__ArgsType;
  overrides: PlasmicOrgSalesCardMix__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          data: {
            Name: "Elbrit Trichy",
            Target: 0,
            color: "#57d322",
            Incentive: 157860.2,
            Model: [
              {
                Name: "Sales",
                data: [
                  { Title: "Gross", Values: 267534.12 },
                  { Title: "Net", Values: 157860.2 }
                ],
                BreakoutCustomer: [
                  {
                    id: "EBS072",
                    Customer: "Kasiviswanathan Medical Agencies Pvt Ltd",
                    HQ: "HQ-Madurai",
                    SalesValue: 30130.7,
                    invoices: [
                      {
                        Invoice: "INV-CB25-01521",
                        PostingDate: "2025-08-04",
                        SalesValue: 30130.7
                      }
                    ]
                  },
                  {
                    id: "EBS127",
                    Customer: "V.A.Distributors Thanjavur",
                    HQ: "HQ-Tanjore",
                    SalesValue: 21814.2,
                    invoices: [
                      {
                        Invoice: "INV-CB25-01562",
                        PostingDate: "2025-08-08",
                        SalesValue: 21814.2
                      }
                    ]
                  }
                ],
                BreakoutInvoice: [
                  {
                    Invoice: "INV-CB25-01521",
                    PostingDate: "2025-08-04",
                    HQ: "HQ-Madurai",
                    Customer: "Kasiviswanathan Medical Agencies Pvt Ltd",
                    SalesValue: 30130.7,
                    items: [{ item_name: "PREGABRIT", qty: 50, amount: 5143 }]
                  },
                  {
                    Invoice: "INV-CB25-01562",
                    PostingDate: "2025-08-08",
                    HQ: "HQ-Tanjore",
                    Customer: "V.A.Distributors Thanjavur",
                    SalesValue: 21814.2,
                    items: [
                      { item_name: "CALBRIT 60K", qty: 10, amount: 866.7 }
                    ]
                  }
                ]
              },
              {
                Name: "Returns",
                data: [
                  { Title: "Expiry", Values: -28002.15 },
                  { Title: "Return", Values: -76135.27 }
                ],
                BreakoutCustomer: [
                  {
                    id: "EBS055",
                    Customer: "Shree Amman Pharmacy",
                    HQ: "HQ-Tanjore",
                    CreditNoteReturns: -6827.18,
                    invoices: [
                      {
                        Invoice: "CN-25-01586",
                        PostingDate: "2025-08-20",
                        CreditNoteReturns: -3004.64
                      }
                    ]
                  }
                ],
                BreakoutInvoice: [
                  {
                    Invoice: "CN-25-01586",
                    PostingDate: "2025-08-20",
                    HQ: "HQ-Tanjore",
                    Customer: "Shree Amman Pharmacy",
                    CreditNoteReturns: -3004.64,
                    items: [
                      {
                        item_name: "BRITORVA 40",
                        qty: -8,
                        amount: -1461.84,
                        purpose: "SALES_RETURN"
                      }
                    ]
                  }
                ]
              },
              {
                Name: "Offers",
                data: [
                  { Title: "Claim", Values: 0 },
                  { Title: "RD", Values: 0 }
                ],
                BreakoutCustomer: [],
                BreakoutInvoice: []
              }
            ],
            HQ: [
              {
                Type: "HQ",
                hq: "HQ-Madurai",
                Target: { value: 0, month: null },
                Incentive: 84547.1,
                Model: [
                  {
                    Name: "Sales",
                    data: [
                      { Title: "Gross", Values: 84547.1 },
                      { Title: "Net", Values: 84547.1 }
                    ],
                    BreakoutCustomer: [
                      {
                        id: "EBS072",
                        Customer: "Kasiviswanathan Medical Agencies Pvt Ltd",
                        HQ: "HQ-Madurai",
                        SalesValue: 30130.7,
                        invoices: [
                          {
                            Invoice: "INV-CB25-01521",
                            PostingDate: "2025-08-04",
                            SalesValue: 30130.7
                          }
                        ]
                      }
                    ],
                    BreakoutInvoice: [
                      {
                        Invoice: "INV-CB25-01521",
                        PostingDate: "2025-08-04",
                        HQ: "HQ-Madurai",
                        Customer: "Kasiviswanathan Medical Agencies Pvt Ltd",
                        SalesValue: 30130.7,
                        items: [
                          { item_name: "PREGABRIT", qty: 50, amount: 5143 }
                        ]
                      }
                    ]
                  },
                  {
                    Name: "Returns",
                    data: [
                      { Title: "Expiry", Values: 0 },
                      { Title: "Return", Values: 0 }
                    ],
                    BreakoutCustomer: [],
                    BreakoutInvoice: []
                  }
                ]
              },
              {
                Type: "HQ",
                hq: "HQ-Tanjore",
                Target: { value: 0, month: null },
                Incentive: 78899.6,
                Model: [
                  {
                    Name: "Sales",
                    data: [
                      { Title: "Gross", Values: 183037.02 },
                      { Title: "Net", Values: 78899.6 }
                    ],
                    BreakoutCustomer: [
                      {
                        id: "EBS127",
                        Customer: "V.A.Distributors Thanjavur",
                        HQ: "HQ-Tanjore",
                        SalesValue: 21814.2,
                        invoices: [
                          {
                            Invoice: "INV-CB25-01562",
                            PostingDate: "2025-08-08",
                            SalesValue: 21814.2
                          }
                        ]
                      }
                    ],
                    BreakoutInvoice: [
                      {
                        Invoice: "INV-CB25-01562",
                        PostingDate: "2025-08-08",
                        HQ: "HQ-Tanjore",
                        Customer: "V.A.Distributors Thanjavur",
                        SalesValue: 21814.2,
                        items: [
                          { item_name: "CALBRIT 60K", qty: 10, amount: 866.7 }
                        ]
                      }
                    ]
                  },
                  {
                    Name: "Returns",
                    data: [
                      { Title: "Expiry", Values: -28002.15 },
                      { Title: "Return", Values: -76135.27 }
                    ],
                    BreakoutCustomer: [
                      {
                        id: "EBS055",
                        Customer: "Shree Amman Pharmacy",
                        HQ: "HQ-Tanjore",
                        CreditNoteReturns: -6827.18,
                        invoices: [
                          {
                            Invoice: "CN-25-01586",
                            PostingDate: "2025-08-20",
                            CreditNoteReturns: -3004.64
                          }
                        ]
                      }
                    ],
                    BreakoutInvoice: [
                      {
                        Invoice: "CN-25-01586",
                        PostingDate: "2025-08-20",
                        HQ: "HQ-Tanjore",
                        Customer: "Shree Amman Pharmacy",
                        CreditNoteReturns: -3004.64,
                        items: [
                          {
                            item_name: "BRITORVA 40",
                            qty: -8,
                            amount: -1461.84,
                            purpose: "SALES_RETURN"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_library_tailwind_3_4_colors,
        styleTokensClassNames_library_tailwind_3_4_number_tokens,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <MolSalesCard
        brand={(() => {
          try {
            return $props.data.Brand;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [
                {
                  Brand: "PAINFREE",
                  HQ: "HQ-Madurai",
                  Incentive: 1200,
                  CreditNote: 0
                },
                {
                  Brand: "VITAMAX",
                  HQ: "HQ-Madurai",
                  Incentive: 0,
                  CreditNote: -100
                }
              ];
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.molSalesCard__dSKmN)}
        color={"#BBC809"}
        incentive={(() => {
          try {
            return $props.data.Incentive;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return 2400;
            }
            throw e;
          }
        })()}
        items={(() => {
          try {
            return $props.data.Model;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [
                {
                  Name: "Sales",
                  data: [
                    { Title: "Product", Values: 300 },
                    { Title: "Product", Values: 50000000 }
                  ]
                },
                {
                  Name: "Returns",
                  data: [
                    { Title: "Product", Values: 1000 },
                    { Title: "Product", Values: 800 },
                    { Title: "Product", Values: 2000 }
                  ]
                },
                {
                  Name: "Offers",
                  data: [
                    { Title: "Product", Values: 600 },
                    { Title: "Product", Values: 100 },
                    { Title: "Product", Values: 300 },
                    { Title: "Product", Values: 400 }
                  ]
                }
              ];
            }
            throw e;
          }
        })()}
        target={(() => {
          try {
            return $props.data.Target;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return 3000;
            }
            throw e;
          }
        })()}
        title={(() => {
          try {
            return $props.data.Name;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $props.data.HQ;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <MolSalesCard
            brand={(() => {
              try {
                return currentItem.Brand;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [
                    {
                      Brand: "PAINFREE",
                      HQ: "HQ-Madurai",
                      Incentive: 1200,
                      CreditNote: 0
                    },
                    {
                      Brand: "VITAMAX",
                      HQ: "HQ-Madurai",
                      Incentive: 0,
                      CreditNote: -100
                    }
                  ];
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.molSalesCard__mCv0F)}
            color={"#4672A2"}
            customer={(() => {
              try {
                return currentItem.Customer;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [
                    {
                      Customer: "AADITYA PHARMEX",
                      EBSCode: "EBS042",
                      HQ: "Chennai",
                      Incentive: 2000,
                      CreditNote: -500
                    },
                    {
                      Customer: "AADITYA PHARMEX",
                      EBSCode: "EBS042",
                      HQ: "Chennai",
                      Incentive: 2000,
                      CreditNote: -500
                    },
                    {
                      Customer: "AADITYA PHARMEX",
                      EBSCode: "EBS042",
                      HQ: "Chennai",
                      Incentive: 2000,
                      CreditNote: -500
                    },
                    {
                      Customer: "AADITYA PHARMEX",
                      EBSCode: "EBS042",
                      HQ: "Chennai",
                      Incentive: 2000,
                      CreditNote: -500
                    },
                    {
                      Customer: "AADITYA PHARMEX",
                      EBSCode: "EBS042",
                      HQ: "Chennai",
                      Incentive: 2000,
                      CreditNote: -500
                    },
                    {
                      Customer: "AADITYA PHARMEX",
                      EBSCode: "EBS042",
                      HQ: "Chennai",
                      Incentive: 2000,
                      CreditNote: -500
                    }
                  ];
                }
                throw e;
              }
            })()}
            incentive={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return currentItem.Incentive;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 2400;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return currentItem.Incentive;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 2400;
                      }
                      throw e;
                    }
                  })()
            }
            invoice={(() => {
              try {
                return currentItem.Invoices;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [
                    {
                      Invoice: "INV-25-10451",
                      PostingDate: "2025-07-05",
                      Customer: "AADITYA PHARMEX",
                      EBSCode: "EBS042",
                      HQ: "HQ-Madurai",
                      Incentive: 1200,
                      CreditNote: 0
                    },
                    {
                      Invoice: "CN-25-01001",
                      PostingDate: "2025-07-07",
                      Customer: "SRI LAKSHMI AGENCIES",
                      EBSCode: "EBS311",
                      HQ: "HQ-Madurai",
                      Incentive: 0,
                      CreditNote: -100
                    }
                  ];
                }
                throw e;
              }
            })()}
            items={(() => {
              try {
                return currentItem.Model;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [
                    {
                      Name: "Sales",
                      data: [
                        { Title: "Product", Values: 300 },
                        { Title: "Product", Values: 50000000 }
                      ]
                    },
                    {
                      Name: "Returns",
                      data: [
                        { Title: "Product", Values: 1000 },
                        { Title: "Product", Values: 800 },
                        { Title: "Product", Values: 2000 }
                      ]
                    },
                    {
                      Name: "Offers",
                      data: [
                        { Title: "Product", Values: 600 },
                        { Title: "Product", Values: 100 },
                        { Title: "Product", Values: 300 },
                        { Title: "Product", Values: 400 }
                      ]
                    }
                  ];
                }
                throw e;
              }
            })()}
            key={currentIndex}
            target={(() => {
              try {
                return currentItem.Target.value;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return 3000;
                }
                throw e;
              }
            })()}
            title={(() => {
              try {
                return currentItem.hq;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            type={(() => {
              try {
                return currentItem.Type;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        );
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOrgSalesCardMix__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOrgSalesCardMix__VariantsArgs;
    args?: PlasmicOrgSalesCardMix__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOrgSalesCardMix__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOrgSalesCardMix__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOrgSalesCardMix__ArgProps,
          internalVariantPropNames: PlasmicOrgSalesCardMix__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOrgSalesCardMix__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOrgSalesCardMix";
  } else {
    func.displayName = `PlasmicOrgSalesCardMix.${nodeName}`;
  }
  return func;
}

export const PlasmicOrgSalesCardMix = Object.assign(
  // Top-level PlasmicOrgSalesCardMix renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicOrgSalesCardMix
    internalVariantProps: PlasmicOrgSalesCardMix__VariantProps,
    internalArgProps: PlasmicOrgSalesCardMix__ArgProps
  }
);

export default PlasmicOrgSalesCardMix;
/* prettier-ignore-end */
