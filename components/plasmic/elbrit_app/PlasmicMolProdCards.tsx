/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: QLKbsHkUdyIn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Label from "../../Label"; // plasmic-import: _L7DdH4fVzRf/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicMolProdCards.module.css"; // plasmic-import: QLKbsHkUdyIn/css

createPlasmicElementProxy;

export type PlasmicMolProdCards__VariantMembers = {
  squar: "squar";
  mobile: "mobile";
};
export type PlasmicMolProdCards__VariantsArgs = {
  squar?: SingleBooleanChoiceArg<"squar">;
  mobile?: SingleBooleanChoiceArg<"mobile">;
};
type VariantPropType = keyof PlasmicMolProdCards__VariantsArgs;
export const PlasmicMolProdCards__VariantProps = new Array<VariantPropType>(
  "squar",
  "mobile"
);

export type PlasmicMolProdCards__ArgsType = {
  items?: string;
  mrp?: number;
  ptr?: number;
  pts?: number;
  brand?: string;
  onClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicMolProdCards__ArgsType;
export const PlasmicMolProdCards__ArgProps = new Array<ArgPropType>(
  "items",
  "mrp",
  "ptr",
  "pts",
  "brand",
  "onClick"
);

export type PlasmicMolProdCards__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultMolProdCardsProps {
  items?: string;
  mrp?: number;
  ptr?: number;
  pts?: number;
  brand?: string;
  onClick?: (event: any) => void;
  squar?: SingleBooleanChoiceArg<"squar">;
  mobile?: SingleBooleanChoiceArg<"mobile">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMolProdCards__RenderFunc(props: {
  variants: PlasmicMolProdCards__VariantsArgs;
  args: PlasmicMolProdCards__ArgsType;
  overrides: PlasmicMolProdCards__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          items: "Acerbit",
          mrp: 120,
          ptr: 100,
          pts: 80,
          brand: "Acebrit"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "item",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Acebrit"
      },
      {
        path: "squar",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.squar
      },
      {
        path: "mobile",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.mobile
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_library_tailwind_3_4_colors,
        styleTokensClassNames_library_tailwind_3_4_number_tokens,
        styleTokensClassNames_plasmic_rich_components,
        sty.root,
        {
          [sty.rootmobile]: hasVariant($state, "mobile", "mobile"),
          [sty.rootsquar]: hasVariant($state, "squar", "squar")
        }
      )}
      onClick={args.onClick}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox___35CFy, {
          [sty.freeBoxmobile___35CFYmUiqj]: hasVariant(
            $state,
            "mobile",
            "mobile"
          ),
          [sty.freeBoxsquar___35CFypRkqX]: hasVariant($state, "squar", "squar")
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__tbBl, {
            [sty.freeBoxmobile__tbBLmUiqj]: hasVariant(
              $state,
              "mobile",
              "mobile"
            ),
            [sty.freeBoxsquar__tbBlpRkqX]: hasVariant($state, "squar", "squar")
          })}
        >
          <Label
            className={classNames("__wab_instance", sty.label__yQiTg, {
              [sty.labelmobile__yQiTgmUiqj]: hasVariant(
                $state,
                "mobile",
                "mobile"
              ),
              [sty.labelsquar__yQiTgPRkqX]: hasVariant($state, "squar", "squar")
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uaIhd,
                {
                  [sty.textmobile__uaIhDmUiqj]: hasVariant(
                    $state,
                    "mobile",
                    "mobile"
                  ),
                  [sty.textsquar__uaIhdpRkqX]: hasVariant(
                    $state,
                    "squar",
                    "squar"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.items;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Label";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Label>
          <Label
            className={classNames("__wab_instance", sty.label__se4UY, {
              [sty.labelmobile__se4UYmUiqj]: hasVariant(
                $state,
                "mobile",
                "mobile"
              ),
              [sty.labelsquar__se4UYpRkqX]: hasVariant($state, "squar", "squar")
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__i7MJf
              )}
            >
              {"Brand:"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bgC3H,
                {
                  [sty.textsquar__bgC3HpRkqX]: hasVariant(
                    $state,
                    "squar",
                    "squar"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.brand;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Label";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Label>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__d6Hm, {
            [sty.freeBoxmobile__d6HmmUiqj]: hasVariant(
              $state,
              "mobile",
              "mobile"
            ),
            [sty.freeBoxsquar__d6HmPRkqX]: hasVariant($state, "squar", "squar")
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__hfEyz)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qg1B1,
                {
                  [sty.textmobile__qg1B1MUiqj]: hasVariant(
                    $state,
                    "mobile",
                    "mobile"
                  )
                }
              )}
            >
              {"MRP"}
            </div>
            <Label
              className={classNames("__wab_instance", sty.label__fCpdf, {
                [sty.labelmobile__fCpdFmUiqj]: hasVariant(
                  $state,
                  "mobile",
                  "mobile"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jvR8P,
                  {
                    [sty.textmobile__jvR8PmUiqj]: hasVariant(
                      $state,
                      "mobile",
                      "mobile"
                    )
                  }
                )}
              >
                {"\u20b9"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nvaNr,
                  {
                    [sty.textmobile__nvaNrmUiqj]: hasVariant(
                      $state,
                      "mobile",
                      "mobile"
                    )
                  }
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.mrp;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Label>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__nrVIp)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__o49Gv,
                {
                  [sty.textmobile__o49GVmUiqj]: hasVariant(
                    $state,
                    "mobile",
                    "mobile"
                  )
                }
              )}
            >
              {"PTR"}
            </div>
            <Label
              className={classNames("__wab_instance", sty.label___4WYp, {
                [sty.labelmobile___4WYpmUiqj]: hasVariant(
                  $state,
                  "mobile",
                  "mobile"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pQSrk,
                  {
                    [sty.textmobile__pQSrkmUiqj]: hasVariant(
                      $state,
                      "mobile",
                      "mobile"
                    )
                  }
                )}
              >
                {"\u20b9"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kdq9S,
                  {
                    [sty.textmobile__kdq9SmUiqj]: hasVariant(
                      $state,
                      "mobile",
                      "mobile"
                    )
                  }
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.ptr;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Label>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox___3EdkC, {
              [sty.freeBoxmobile___3EdkCmUiqj]: hasVariant(
                $state,
                "mobile",
                "mobile"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fb9Jy,
                {
                  [sty.textmobile__fb9JYmUiqj]: hasVariant(
                    $state,
                    "mobile",
                    "mobile"
                  )
                }
              )}
            >
              {"PTS"}
            </div>
            <Label className={classNames("__wab_instance", sty.label__hBDwA)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pYFt,
                  {
                    [sty.textmobile__pYFTmUiqj]: hasVariant(
                      $state,
                      "mobile",
                      "mobile"
                    )
                  }
                )}
              >
                {"\u20b9"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5Vm4J,
                  {
                    [sty.textmobile___5Vm4JmUiqj]: hasVariant(
                      $state,
                      "mobile",
                      "mobile"
                    )
                  }
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.pts;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Label>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMolProdCards__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMolProdCards__VariantsArgs;
    args?: PlasmicMolProdCards__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMolProdCards__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMolProdCards__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMolProdCards__ArgProps,
          internalVariantPropNames: PlasmicMolProdCards__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMolProdCards__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMolProdCards";
  } else {
    func.displayName = `PlasmicMolProdCards.${nodeName}`;
  }
  return func;
}

export const PlasmicMolProdCards = Object.assign(
  // Top-level PlasmicMolProdCards renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicMolProdCards
    internalVariantProps: PlasmicMolProdCards__VariantProps,
    internalArgProps: PlasmicMolProdCards__ArgProps
  }
);

export default PlasmicMolProdCards;
/* prettier-ignore-end */
