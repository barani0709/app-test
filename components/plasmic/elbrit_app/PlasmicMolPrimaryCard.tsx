/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: g9Zoq8xHSMb2

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import AtomMainCard from "../../AtomMainCard"; // plasmic-import: 1ot2PIONqw-D/component
import AtomCard from "../../AtomCard"; // plasmic-import: SSqSQS8QqSj-/component
import { AntdDrawer } from "@plasmicpkgs/antd5/skinny/registerDrawer";
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { PrimeDataTable } from "../../PrimeDataTable"; // plasmic-import: BYlkqz28tT8N/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicMolPrimaryCard.module.css"; // plasmic-import: g9Zoq8xHSMb2/css

createPlasmicElementProxy;

export type PlasmicMolPrimaryCard__VariantMembers = {};
export type PlasmicMolPrimaryCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicMolPrimaryCard__VariantsArgs;
export const PlasmicMolPrimaryCard__VariantProps = new Array<VariantPropType>();

export type PlasmicMolPrimaryCard__ArgsType = {
  name?: string;
  color?: any;
  items?: any;
  target?: number;
  customer?: any;
  invoice?: any;
  brand?: any;
  data?: any;
};
type ArgPropType = keyof PlasmicMolPrimaryCard__ArgsType;
export const PlasmicMolPrimaryCard__ArgProps = new Array<ArgPropType>(
  "name",
  "color",
  "items",
  "target",
  "customer",
  "invoice",
  "brand",
  "data"
);

export type PlasmicMolPrimaryCard__OverridesType = {
  root?: Flex__<"div">;
  atomMainCard?: Flex__<typeof AtomMainCard>;
  atomCard?: Flex__<typeof AtomCard>;
  drawer?: Flex__<typeof AntdDrawer>;
  tabs?: Flex__<typeof AntdTabs>;
};

export interface DefaultMolPrimaryCardProps {
  name?: string;
  color?: any;
  items?: any;
  target?: number;
  customer?: any;
  invoice?: any;
  brand?: any;
  data?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMolPrimaryCard__RenderFunc(props: {
  variants: PlasmicMolPrimaryCard__VariantsArgs;
  args: PlasmicMolPrimaryCard__ArgsType;
  overrides: PlasmicMolPrimaryCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          name: "Offers",
          color: "var(--token-5vmFiSI-IIdw)",
          items: [
            { Title: "Product", Values: 100, Qty: 10 },
            { Title: "Product", Values: 100, Qty: 10 },
            { Title: "Product", Values: 100, Qty: 10 },
            { Title: "Product", Values: 100, Qty: 10 }
          ],
          target: 1000,
          customer: [
            {
              id: "EBS072",
              Customer: "Kasiviswanathan Medical Agencies Pvt Ltd",
              HQ: "HQ-Madurai",
              SalesValue: 30130.7,
              invoices: [
                {
                  Invoice: "INV-CB25-01521",
                  PostingDate: "2025-08-04",
                  SalesValue: 30130.7
                }
              ]
            },
            {
              id: "EBS127",
              Customer: "V.A.Distributors Thanjavur",
              HQ: "HQ-Tanjore",
              SalesValue: 21814.2,
              invoices: [
                {
                  Invoice: "INV-CB25-01562",
                  PostingDate: "2025-08-08",
                  SalesValue: 21814.2
                }
              ]
            }
          ],
          invoice: [
            {
              Invoice: "INV-CB25-01521",
              PostingDate: "2025-08-04",
              HQ: "HQ-Madurai",
              Customer: "Kasiviswanathan Medical Agencies Pvt Ltd",
              SalesValue: 30130.7,
              items: [{ item_name: "PREGABRIT", qty: 50, amount: 5143 }]
            },
            {
              Invoice: "INV-CB25-01562",
              PostingDate: "2025-08-08",
              HQ: "HQ-Tanjore",
              Customer: "V.A.Distributors Thanjavur",
              SalesValue: 21814.2,
              items: [{ item_name: "CALBRIT 60K", qty: 10, amount: 866.7 }]
            }
          ],
          brand: [
            {
              Brand: "PAINFREE",
              HQ: "HQ-Madurai",
              Incentive: 1200,
              CreditNote: 0
            },
            {
              Brand: "VITAMAX",
              HQ: "HQ-Madurai",
              Incentive: 0,
              CreditNote: -100
            }
          ],
          data: [
            {
              id: 1,
              customerName: "ABC Corporation",
              email: "contact@abc.com",
              location: "Mumbai",
              orders: [
                {
                  orderId: "ORD-001",
                  orderDate: "2024-01-15",
                  totalAmount: 75000,
                  products: [
                    {
                      productName: "Laptop",
                      quantity: 2,
                      unitPrice: 25000,
                      category: "Electronics"
                    },
                    {
                      productName: "Mouse",
                      quantity: 5,
                      unitPrice: 5000,
                      category: "Accessories"
                    }
                  ]
                },
                {
                  orderId: "ORD-002",
                  orderDate: "2024-01-20",
                  totalAmount: 45000,
                  products: [
                    {
                      productName: "Monitor",
                      quantity: 3,
                      unitPrice: 15000,
                      category: "Electronics"
                    }
                  ]
                }
              ]
            },
            {
              id: 1,
              customerName: "ABC Corporation",
              email: "contact@abc.com",
              location: "Mumbai",
              orders: [
                {
                  orderId: "ORD-001",
                  orderDate: "2024-01-15",
                  totalAmount: 75000,
                  products: [
                    {
                      productName: "Laptop",
                      quantity: 2,
                      unitPrice: 25000,
                      category: "Electronics"
                    },
                    {
                      productName: "Mouse",
                      quantity: 5,
                      unitPrice: 5000,
                      category: "Accessories"
                    }
                  ]
                },
                {
                  orderId: "ORD-002",
                  orderDate: "2024-01-20",
                  totalAmount: 45000,
                  products: [
                    {
                      productName: "Monitor",
                      quantity: 3,
                      unitPrice: 15000,
                      category: "Electronics"
                    }
                  ]
                }
              ]
            },
            {
              id: 1,
              customerName: "ABC Corporation",
              email: "contact@abc.com",
              location: "Mumbai",
              orders: [
                {
                  orderId: "ORD-001",
                  orderDate: "2024-01-15",
                  totalAmount: 75000,
                  products: [
                    {
                      productName: "Laptop",
                      quantity: 2,
                      unitPrice: 25000,
                      category: "Electronics"
                    },
                    {
                      productName: "Mouse",
                      quantity: 5,
                      unitPrice: 5000,
                      category: "Accessories"
                    }
                  ]
                },
                {
                  orderId: "ORD-002",
                  orderDate: "2024-01-20",
                  totalAmount: 45000,
                  products: [
                    {
                      productName: "Monitor",
                      quantity: 3,
                      unitPrice: 15000,
                      category: "Electronics"
                    }
                  ]
                }
              ]
            }
          ]
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drawer.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.toggle;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "toggle",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_library_tailwind_3_4_colors,
        styleTokensClassNames_library_tailwind_3_4_number_tokens,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
      onClick={async event => {
        const $steps = {};
      }}
    >
      <AtomMainCard
        data-plasmic-name={"atomMainCard"}
        data-plasmic-override={overrides.atomMainCard}
        className={classNames("__wab_instance", sty.atomMainCard)}
        color={(() => {
          try {
            return $props.color;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "var(--token-Kz32cfmkCCmq)";
            }
            throw e;
          }
        })()}
        hidden={null}
        name={(() => {
          try {
            return $props.name;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__rKuRz)}
          onClick={async event => {
            const $steps = {};

            $steps["updateDrawerOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["drawer", "open"]
                    },
                    operation: 4
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    const oldValue = $stateGet(objRoot, variablePath);
                    $stateSet(objRoot, variablePath, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateDrawerOpen"] != null &&
              typeof $steps["updateDrawerOpen"] === "object" &&
              typeof $steps["updateDrawerOpen"].then === "function"
            ) {
              $steps["updateDrawerOpen"] = await $steps["updateDrawerOpen"];
            }
          }}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $props.items;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <AtomCard
                data-plasmic-name={"atomCard"}
                data-plasmic-override={overrides.atomCard}
                className={classNames("__wab_instance", sty.atomCard)}
                color={(() => {
                  try {
                    return $props.color;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "var(--token-IWP67w-wUXtW)";
                    }
                    throw e;
                  }
                })()}
                key={currentIndex}
                qty={(() => {
                  try {
                    return currentItem.Qty;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return 1;
                    }
                    throw e;
                  }
                })()}
                target={(() => {
                  try {
                    return $props.target;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return 100;
                    }
                    throw e;
                  }
                })()}
                title={(() => {
                  try {
                    return currentItem.Title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                values={(() => {
                  try {
                    return currentItem.Values;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return 10000000;
                    }
                    throw e;
                  }
                })()}
              />
            );
          })}
        </div>
      </AtomMainCard>
      <div
        className={classNames(
          projectcss.all,
          sty.freeBox___1Rd5C,
          "ant-drawer-content-wrapper"
        )}
      >
        <AntdDrawer
          data-plasmic-name={"drawer"}
          data-plasmic-override={overrides.drawer}
          className={classNames("__wab_instance", sty.drawer)}
          closeButtonClassName={classNames({
            [sty["pcls_vqOYEHXTKv2N"]]: true
          })}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_library_tailwind_3_4_colors,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            styleTokensClassNames_plasmic_rich_components
          )}
          drawerBodyClassName={classNames({ [sty["pcls_QD_COunfHQfo"]]: true })}
          drawerHeaderClassName={classNames({
            [sty["pcls_pbhl0UDpHw-8"]]: true
          })}
          drawerScopeClassName={sty["drawer__drawer"]}
          forceRender={true}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["drawer", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["drawer", "open"])}
          placement={"bottom"}
          title={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lzYjE
              )}
            >
              {"Customer Wise Sales"}
            </div>
          }
        >
          <div className={classNames(projectcss.all, sty.freeBox__skEe2)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__d0VNu
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <AntdTabs
              data-plasmic-name={"tabs"}
              data-plasmic-override={overrides.tabs}
              activeKey={generateStateValueProp($state, ["tabs", "activeKey"])}
              animateTabBar={true}
              animateTabContent={false}
              animated={true}
              className={classNames("__wab_instance", sty.tabs)}
              items={
                <React.Fragment>
                  <AntdTabItem
                    className={classNames("__wab_instance", sty.tabItem__rBImW)}
                    key={"1"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zL9O
                        )}
                      >
                        {"Customers"}
                      </div>
                    }
                  >
                    <PrimeDataTable
                      allowExpansion={null}
                      autoSavePivotConfig={false}
                      booleanFilterColumns={[]}
                      bulkActions={[]}
                      className={
                        "" +
                        " " +
                        classNames(
                          "__wab_instance",
                          sty.primeReactDataTable___4BPk
                        )
                      }
                      collapseAllLabel={"Collapse All"}
                      collapseIcon={"pi pi-minus"}
                      columnGroups={[]}
                      columns={[]}
                      contextMenu={null}
                      contextMenuSelection={null}
                      currencyColumns={[]}
                      currentPage={1}
                      currentPageReportTemplate={
                        "Showing {first} to {last} of {totalRecords} entries"
                      }
                      customFilterOptions={{}}
                      customFormatters={{}}
                      customGroupMappings={{}}
                      customTemplates={{}}
                      data={(() => {
                        try {
                          return $props.customer;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      dataKey={"Customer"}
                      datePickerFilterColumns={[]}
                      dropdownFilterColumns={[]}
                      editingRows={null}
                      enableAutoColumnGrouping={false}
                      enableAutoMerge={false}
                      enableBulkActions={false}
                      enableColumnFilter={true}
                      enableColumnGrouping={false}
                      enableColumnManagement={false}
                      enableContextMenu={false}
                      enableExcelExport={false}
                      enableExpansionAnimation={true}
                      enableExport={true}
                      enableFilterApply={true}
                      enableFilterClear={true}
                      enableFilterFooter={true}
                      enableFilterMatchModes={true}
                      enableFilterMenu={true}
                      enableFixedFooterTotals={false}
                      enableFooterGroups={true}
                      enableFooterTotals={false}
                      enableFrozenColumns={false}
                      enableFrozenRows={false}
                      enableGlobalFilter={true}
                      enableGridLines={true}
                      enableHeaderGroups={true}
                      enableHoverEffect={true}
                      enableInlineEditing={false}
                      enableLazyLoading={false}
                      enablePagination={true}
                      enablePdfExport={false}
                      enablePivotPersistence={true}
                      enablePivotTable={false}
                      enablePivotUI={false}
                      enableROICalculation={false}
                      enableRefresh={false}
                      enableReorderableColumns={false}
                      enableResizableColumns={false}
                      enableRowActions={false}
                      enableRowExpansion={true}
                      enableRowGrouping={false}
                      enableRowSelection={false}
                      enableSearch={true}
                      enableSorting={true}
                      enableStripedRows={true}
                      enableVirtualScrolling={false}
                      error={null}
                      expandAllLabel={"Expand All"}
                      expandIcon={"pi pi-plus"}
                      expandedRows={null}
                      expansionButtonClassName={""}
                      expansionButtonStyle={{}}
                      expansionColumnBody={null}
                      expansionColumnHeader={null}
                      expansionColumnPosition={"left"}
                      expansionColumnStyle={{ width: "5rem" }}
                      expansionColumnWidth={"5rem"}
                      exportFileType={"csv"}
                      exportFilename={"data"}
                      fields={[]}
                      filterDelay={300}
                      filterDisplay={"menu"}
                      filterLocale={"en"}
                      footerColumnGroup={null}
                      footerGroupStyle={{}}
                      footerTotalsConfig={{
                        showTotals: true,
                        showAverages: false,
                        showCounts: true,
                        numberFormat: "en-US",
                        currency: "USD",
                        precision: 2
                      }}
                      globalFilterFields={[]}
                      globalFilterPlaceholder={"Search..."}
                      graphqlQuery={null}
                      graphqlVariables={{}}
                      groupConfig={{
                        enableHeaderGroups: true,
                        enableFooterGroups: true,
                        groupStyle: {},
                        headerGroupStyle: {},
                        footerGroupStyle: {},
                        groupSeparator: "__",
                        ungroupedColumns: [],
                        totalColumns: [],
                        customGroupMappings: {},
                        groupingPatterns: []
                      }}
                      groupSeparator={"__"}
                      groupStyle={{}}
                      groupingPatterns={[]}
                      headerColumnGroup={null}
                      headerGroupStyle={{}}
                      imageFields={[]}
                      loading={false}
                      mergeConfig={{
                        by: [],
                        preserve: [],
                        autoDetectMergeFields: true,
                        mergeStrategy: "combine"
                      }}
                      metaKeySelection={true}
                      nestedDataConfig={{
                        enableNestedSorting: true,
                        enableNestedFiltering: true,
                        enableNestedPagination: false,
                        nestedPageSize: 10
                      }}
                      nestedKey={null}
                      numberFilterColumns={[]}
                      onRowCollapse={null}
                      onRowExpand={null}
                      pageSize={10}
                      pageSizeOptions={[5, 10, 25, 50, 100]}
                      pivotAggregationFunctions={{}}
                      pivotColumns={[]}
                      pivotConfigKey={"pivotConfig"}
                      pivotCurrency={"USD"}
                      pivotFieldSeparator={"__"}
                      pivotFilters={[]}
                      pivotNumberFormat={"en-US"}
                      pivotPrecision={2}
                      pivotRows={[]}
                      pivotShowColumnTotals={true}
                      pivotShowGrandTotals={true}
                      pivotShowRowTotals={true}
                      pivotShowSubTotals={true}
                      pivotSortColumns={true}
                      pivotSortDirection={"asc"}
                      pivotSortRows={true}
                      pivotUIPosition={"toolbar"}
                      pivotValues={[]}
                      plasmicApiToken={""}
                      plasmicTableConfigsId={""}
                      plasmicWorkspaceId={""}
                      popupImageFields={[]}
                      refetchInterval={0}
                      roiConfig={{
                        revenueField: "revenue",
                        costField: "cost",
                        investmentField: "investment",
                        profitField: "profit",
                        calculationMethod: "standard",
                        showROIColumn: true,
                        showROIAsPercentage: true,
                        roiColumnTitle: "ROI (%)",
                        roiColumnKey: "roi",
                        roiNumberFormat: "en-US",
                        roiPrecision: 2,
                        roiCurrency: "USD",
                        enableROIColorCoding: true,
                        roiColorThresholds: {
                          positive: "#22c55e",
                          neutral: "#6b7280",
                          negative: "#ef4444"
                        },
                        positiveROIThreshold: 0,
                        negativeROIThreshold: 0,
                        customROICalculation: null
                      }}
                      rowActions={[]}
                      rowExpansionTemplate={null}
                      selectOnEdit={false}
                      selectionMode={"multiple"}
                      showCurrentPageReport={true}
                      showExpandAllButtons={true}
                      showFilterMatchModes={true}
                      showFirstLastIcon={true}
                      showPageLinks={true}
                      style={{}}
                      tableSize={"normal"}
                      textFilterColumns={[]}
                      totalColumns={[]}
                      ungroupedColumns={[]}
                      useDirectCMSIntegration={true}
                      validateExpansion={null}
                    />
                  </AntdTabItem>
                  <AntdTabItem
                    className={classNames(
                      "__wab_instance",
                      sty.tabItem___3KhHy
                    )}
                    key={"2"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fZpP
                        )}
                      >
                        {"Invoices"}
                      </div>
                    }
                  >
                    <PrimeDataTable
                      allowExpansion={null}
                      autoSavePivotConfig={false}
                      booleanFilterColumns={[]}
                      bulkActions={[]}
                      className={
                        "" +
                        " " +
                        classNames(
                          "__wab_instance",
                          sty.primeReactDataTable__tX5Fs
                        )
                      }
                      collapseAllLabel={"Collapse All"}
                      collapseIcon={"pi pi-minus"}
                      columnGroups={[]}
                      columns={[]}
                      contextMenu={null}
                      contextMenuSelection={null}
                      currencyColumns={[]}
                      currentPage={1}
                      currentPageReportTemplate={
                        "Showing {first} to {last} of {totalRecords} entries"
                      }
                      customFilterOptions={{}}
                      customFormatters={{}}
                      customGroupMappings={{}}
                      customTemplates={{}}
                      data={(() => {
                        try {
                          return $props.invoice;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      dataKey={"Invoice"}
                      datePickerFilterColumns={[]}
                      dropdownFilterColumns={[]}
                      editingRows={null}
                      enableAutoColumnGrouping={false}
                      enableAutoMerge={false}
                      enableBulkActions={false}
                      enableColumnFilter={true}
                      enableColumnGrouping={false}
                      enableColumnManagement={false}
                      enableContextMenu={false}
                      enableExcelExport={false}
                      enableExpansionAnimation={true}
                      enableExport={true}
                      enableFilterApply={true}
                      enableFilterClear={true}
                      enableFilterFooter={true}
                      enableFilterMatchModes={true}
                      enableFilterMenu={true}
                      enableFixedFooterTotals={false}
                      enableFooterGroups={true}
                      enableFooterTotals={false}
                      enableFrozenColumns={false}
                      enableFrozenRows={false}
                      enableGlobalFilter={true}
                      enableGridLines={true}
                      enableHeaderGroups={true}
                      enableHoverEffect={true}
                      enableInlineEditing={false}
                      enableLazyLoading={false}
                      enablePagination={true}
                      enablePdfExport={false}
                      enablePivotPersistence={true}
                      enablePivotTable={false}
                      enablePivotUI={false}
                      enableROICalculation={false}
                      enableRefresh={false}
                      enableReorderableColumns={false}
                      enableResizableColumns={false}
                      enableRowActions={false}
                      enableRowExpansion={true}
                      enableRowGrouping={false}
                      enableRowSelection={false}
                      enableSearch={true}
                      enableSorting={true}
                      enableStripedRows={true}
                      enableVirtualScrolling={false}
                      error={null}
                      expandAllLabel={"Expand All"}
                      expandIcon={"pi pi-plus"}
                      expandedRows={null}
                      expansionButtonClassName={""}
                      expansionButtonStyle={{}}
                      expansionColumnBody={null}
                      expansionColumnHeader={null}
                      expansionColumnPosition={"left"}
                      expansionColumnStyle={{ width: "5rem" }}
                      expansionColumnWidth={"5rem"}
                      exportFileType={"csv"}
                      exportFilename={"data"}
                      fields={[]}
                      filterDelay={300}
                      filterDisplay={"menu"}
                      filterLocale={"en"}
                      footerColumnGroup={null}
                      footerGroupStyle={{}}
                      footerTotalsConfig={{
                        showTotals: true,
                        showAverages: false,
                        showCounts: true,
                        numberFormat: "en-US",
                        currency: "USD",
                        precision: 2
                      }}
                      globalFilterFields={[]}
                      globalFilterPlaceholder={"Search..."}
                      graphqlQuery={null}
                      graphqlVariables={{}}
                      groupConfig={{
                        enableHeaderGroups: true,
                        enableFooterGroups: true,
                        groupStyle: {},
                        headerGroupStyle: {},
                        footerGroupStyle: {},
                        groupSeparator: "__",
                        ungroupedColumns: [],
                        totalColumns: [],
                        customGroupMappings: {},
                        groupingPatterns: []
                      }}
                      groupSeparator={"__"}
                      groupStyle={{}}
                      groupingPatterns={[]}
                      headerColumnGroup={null}
                      headerGroupStyle={{}}
                      imageFields={[]}
                      loading={false}
                      mergeConfig={{
                        by: [],
                        preserve: [],
                        autoDetectMergeFields: true,
                        mergeStrategy: "combine"
                      }}
                      metaKeySelection={true}
                      nestedDataConfig={{
                        enableNestedSorting: true,
                        enableNestedFiltering: true,
                        enableNestedPagination: false,
                        nestedPageSize: 10
                      }}
                      nestedKey={null}
                      numberFilterColumns={[]}
                      onRowCollapse={null}
                      onRowExpand={null}
                      pageSize={10}
                      pageSizeOptions={[5, 10, 25, 50, 100]}
                      pivotAggregationFunctions={{}}
                      pivotColumns={[]}
                      pivotConfigKey={"pivotConfig"}
                      pivotCurrency={"USD"}
                      pivotFieldSeparator={"__"}
                      pivotFilters={[]}
                      pivotNumberFormat={"en-US"}
                      pivotPrecision={2}
                      pivotRows={[]}
                      pivotShowColumnTotals={true}
                      pivotShowGrandTotals={true}
                      pivotShowRowTotals={true}
                      pivotShowSubTotals={true}
                      pivotSortColumns={true}
                      pivotSortDirection={"asc"}
                      pivotSortRows={true}
                      pivotUIPosition={"toolbar"}
                      pivotValues={[]}
                      plasmicApiToken={""}
                      plasmicTableConfigsId={""}
                      plasmicWorkspaceId={""}
                      popupImageFields={[]}
                      refetchInterval={0}
                      roiConfig={{
                        revenueField: "revenue",
                        costField: "cost",
                        investmentField: "investment",
                        profitField: "profit",
                        calculationMethod: "standard",
                        showROIColumn: true,
                        showROIAsPercentage: true,
                        roiColumnTitle: "ROI (%)",
                        roiColumnKey: "roi",
                        roiNumberFormat: "en-US",
                        roiPrecision: 2,
                        roiCurrency: "USD",
                        enableROIColorCoding: true,
                        roiColorThresholds: {
                          positive: "#22c55e",
                          neutral: "#6b7280",
                          negative: "#ef4444"
                        },
                        positiveROIThreshold: 0,
                        negativeROIThreshold: 0,
                        customROICalculation: null
                      }}
                      rowActions={[]}
                      rowExpansionTemplate={null}
                      selectOnEdit={false}
                      selectionMode={"multiple"}
                      showCurrentPageReport={true}
                      showExpandAllButtons={true}
                      showFilterMatchModes={true}
                      showFirstLastIcon={true}
                      showPageLinks={true}
                      style={{}}
                      tableSize={"normal"}
                      textFilterColumns={[]}
                      totalColumns={[]}
                      ungroupedColumns={[]}
                      useDirectCMSIntegration={true}
                      validateExpansion={null}
                    />
                  </AntdTabItem>
                </React.Fragment>
              }
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["tabs", "activeKey"]).apply(
                  null,
                  eventArgs
                );
              }}
              sticky={false}
              tabBarBackground={"#FFF"}
              tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
              tabsScopeClassName={sty["tabs__tabs"]}
            />
          </div>
        </AntdDrawer>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "atomMainCard", "atomCard", "drawer", "tabs"],
  atomMainCard: ["atomMainCard", "atomCard"],
  atomCard: ["atomCard"],
  drawer: ["drawer", "tabs"],
  tabs: ["tabs"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  atomMainCard: typeof AtomMainCard;
  atomCard: typeof AtomCard;
  drawer: typeof AntdDrawer;
  tabs: typeof AntdTabs;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMolPrimaryCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMolPrimaryCard__VariantsArgs;
    args?: PlasmicMolPrimaryCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMolPrimaryCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMolPrimaryCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMolPrimaryCard__ArgProps,
          internalVariantPropNames: PlasmicMolPrimaryCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMolPrimaryCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMolPrimaryCard";
  } else {
    func.displayName = `PlasmicMolPrimaryCard.${nodeName}`;
  }
  return func;
}

export const PlasmicMolPrimaryCard = Object.assign(
  // Top-level PlasmicMolPrimaryCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    atomMainCard: makeNodeComponent("atomMainCard"),
    atomCard: makeNodeComponent("atomCard"),
    drawer: makeNodeComponent("drawer"),
    tabs: makeNodeComponent("tabs"),

    // Metadata about props expected for PlasmicMolPrimaryCard
    internalVariantProps: PlasmicMolPrimaryCard__VariantProps,
    internalArgProps: PlasmicMolPrimaryCard__ArgProps
  }
);

export default PlasmicMolPrimaryCard;
/* prettier-ignore-end */
