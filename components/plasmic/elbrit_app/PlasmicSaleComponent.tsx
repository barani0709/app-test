/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: 2EFOOXF0dbcN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdProgress } from "@plasmicpkgs/antd5/skinny/registerProgress";
import Label2 from "../../Label2"; // plasmic-import: 5wu-f2dIhZng/component
import AtomCard from "../../AtomCard"; // plasmic-import: SSqSQS8QqSj-/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicSaleComponent.module.css"; // plasmic-import: 2EFOOXF0dbcN/css

createPlasmicElementProxy;

export type PlasmicSaleComponent__VariantMembers = {};
export type PlasmicSaleComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicSaleComponent__VariantsArgs;
export const PlasmicSaleComponent__VariantProps = new Array<VariantPropType>();

export type PlasmicSaleComponent__ArgsType = {
  offers?: any;
  order?: any;
  sales?: string;
  offers2?: string;
};
type ArgPropType = keyof PlasmicSaleComponent__ArgsType;
export const PlasmicSaleComponent__ArgProps = new Array<ArgPropType>(
  "offers",
  "order",
  "sales",
  "offers2"
);

export type PlasmicSaleComponent__OverridesType = {
  root?: Flex__<"section">;
  progress?: Flex__<typeof AntdProgress>;
  atomCard?: Flex__<typeof AtomCard>;
};

export interface DefaultSaleComponentProps {
  offers?: any;
  order?: any;
  sales?: string;
  offers2?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSaleComponent__RenderFunc(props: {
  variants: PlasmicSaleComponent__VariantsArgs;
  args: PlasmicSaleComponent__ArgsType;
  overrides: PlasmicSaleComponent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          offers: { Product: 0, Price: 0, Claim: 0, RD: 0 },
          order: [
            { s: "sales", n: "SalesData", c: "#52c41a" },
            { s: "offers", n: "OfferData", c: "#ff4d4f" },
            { s: "cn", n: "CNData", c: "#eab308" }
          ],
          sales: "Sales",
          offers2: "Offers"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_library_tailwind_3_4_colors,
        styleTokensClassNames_library_tailwind_3_4_number_tokens,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__dTud)}>
        <AntdProgress
          data-plasmic-name={"progress"}
          data-plasmic-override={overrides.progress}
          className={classNames("__wab_instance", sty.progress)}
          size={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "default"
              : undefined
          }
          status={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "active"
              : "success"
          }
          stepColors={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? (() => {
                  const __composite = [
                    { color: null },
                    { color: null },
                    { color: null }
                  ];

                  return __composite;
                })()
              : undefined
          }
          steps={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? (() => {
                  try {
                    return undefined;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return 10;
                    }
                    throw e;
                  }
                })()
              : undefined
          }
          strokeLinecap={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "round"
              : "round"
          }
          type={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "line" : "line"
          }
        />

        <div className={classNames(projectcss.all, sty.freeBox__zrdBi)}>
          <Label2 className={classNames("__wab_instance", sty.label2__hDWh2)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fpQ6V
              )}
            >
              {"Aura & Proxima Coimbatore"}
            </div>
          </Label2>
          <Label2 className={classNames("__wab_instance", sty.label2___80Gt0)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qgRSi
              )}
            >
              {""}
            </div>
          </Label2>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__lY4So)}>
          <Label2 className={classNames("__wab_instance", sty.label2___8ANfX)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cJwgN
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.offers2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Offer";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ) : (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.offers2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Offers";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              )}
            </div>
          </Label2>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return Object.entries($props.offers);
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <AtomCard
                data-plasmic-name={"atomCard"}
                data-plasmic-override={overrides.atomCard}
                className={classNames("__wab_instance", sty.atomCard)}
                key={currentIndex}
              />
            );
          })}
        </div>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "progress", "atomCard"],
  progress: ["progress"],
  atomCard: ["atomCard"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  progress: typeof AntdProgress;
  atomCard: typeof AtomCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSaleComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSaleComponent__VariantsArgs;
    args?: PlasmicSaleComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSaleComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSaleComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSaleComponent__ArgProps,
          internalVariantPropNames: PlasmicSaleComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSaleComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSaleComponent";
  } else {
    func.displayName = `PlasmicSaleComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicSaleComponent = Object.assign(
  // Top-level PlasmicSaleComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    progress: makeNodeComponent("progress"),
    atomCard: makeNodeComponent("atomCard"),

    // Metadata about props expected for PlasmicSaleComponent
    internalVariantProps: PlasmicSaleComponent__VariantProps,
    internalArgProps: PlasmicSaleComponent__ArgProps
  }
);

export default PlasmicSaleComponent;
/* prettier-ignore-end */
