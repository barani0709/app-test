/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: HIBYsDzFCPvm

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Layout from "../../Layout"; // plasmic-import: pAY-hwRYSgy5/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import TextInput from "../../TextInput"; // plasmic-import: n1KYdl7MSeQ4/component
import MolHeadingWrapper from "../../MolHeadingWrapper"; // plasmic-import: lof4t-yfBibe/component
import MolTeamFilter from "../../MolTeamFilter"; // plasmic-import: dRYYz9rbmwKd/component
import HierarchyComponent from "../../HierarchyComponent"; // plasmic-import: yHfkhQ_Yo92c/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import MolKpi from "../../MolKpi"; // plasmic-import: LKN9Ltc3f3ft/component
import { AdvancedTable } from "../../AdvancedTable"; // plasmic-import: ynuIYskdpVZc/codeComponent
import MolVisit from "../../MolVisit"; // plasmic-import: -d77sI6c9v9H/component
import RadioGroup from "../../RadioGroup"; // plasmic-import: GYMz3GfToupI/component
import Radio from "../../Radio"; // plasmic-import: FhAk9xxd_Y_r/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicSingleServiceValidation.module.css"; // plasmic-import: HIBYsDzFCPvm/css

import SearchSvg2Icon from "./icons/PlasmicIcon__SearchSvg2"; // plasmic-import: ny0qr1BEnBpN/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: pGbufo6Ngt-g/icon

createPlasmicElementProxy;

export type PlasmicSingleServiceValidation__VariantMembers = {};
export type PlasmicSingleServiceValidation__VariantsArgs = {};
type VariantPropType = keyof PlasmicSingleServiceValidation__VariantsArgs;
export const PlasmicSingleServiceValidation__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSingleServiceValidation__ArgsType = {};
type ArgPropType = keyof PlasmicSingleServiceValidation__ArgsType;
export const PlasmicSingleServiceValidation__ArgProps =
  new Array<ArgPropType>();

export type PlasmicSingleServiceValidation__OverridesType = {
  root?: Flex__<"div">;
  layout?: Flex__<typeof Layout>;
  _switch?: Flex__<typeof AntdButton>;
  textInput?: Flex__<typeof TextInput>;
  svg?: Flex__<"svg">;
  textInput2?: Flex__<typeof TextInput>;
  molTeamFilter?: Flex__<typeof MolTeamFilter>;
  hierarchyComponent?: Flex__<typeof HierarchyComponent>;
  doctorDetails?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  molKpi?: Flex__<typeof MolKpi>;
  molVisit?: Flex__<typeof MolVisit>;
  radioGroup?: Flex__<typeof RadioGroup>;
};

export interface DefaultSingleServiceValidationProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSingleServiceValidation__RenderFunc(props: {
  variants: PlasmicSingleServiceValidation__VariantsArgs;
  args: PlasmicSingleServiceValidation__ArgsType;
  overrides: PlasmicSingleServiceValidation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let inputValue = "1";
                let formattedValue = (inputValue || "1").padStart(8, "0");
                return formattedValue;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "title",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.doctor.schema.fields
                .map((field, index) => ({
                  title: field.id,
                  value: $queries.doctor.data[0][field.id]
                }))
                .filter((item, index) => index !== 10);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "salesTeam",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "service",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.service.data.reduce((acc, item) => {
                const serviceDate = item.serviceDate
                  ? new Date(item.serviceDate)
                  : null;
                const createdDate = item.date ? new Date(item.date) : null;

                acc.push({
                  ...item,
                  serviceDate: serviceDate
                    ? `${serviceDate.getFullYear()}-${serviceDate.toLocaleString(
                        "en-US",
                        { month: "short" }
                      )}-${String(serviceDate.getDate()).padStart(2, "0")}`
                    : "",
                  date: createdDate
                    ? `${createdDate.getFullYear()}-${createdDate.toLocaleString(
                        "en-US",
                        { month: "short" }
                      )}-${String(createdDate.getDate()).padStart(2, "0")}`
                    : ""
                });

                return acc;
              }, []);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "support",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.support.data.reduce((acc, item) => {
                const date = item.date ? new Date(item.date) : null;

                acc.push({
                  ...item,
                  date: date
                    ? `${date.getFullYear()}-${date.toLocaleString("en-US", {
                        month: "short"
                      })}-${String(date.getDate()).padStart(2, "0")}`
                    : ""
                });

                return acc;
              }, []);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "supportItem",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.supportItems.data.reduce((acc, item) => {
                const date = item.date ? new Date(item.date) : null;

                acc.push({
                  ...item,
                  date: date
                    ? `${date.getFullYear()}-${date.toLocaleString("en-US", {
                        month: "short"
                      })}-${String(date.getDate()).padStart(2, "0")}`
                    : ""
                });

                return acc;
              }, []);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "filter",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => "allTime"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    service: usePlasmicDataOp(() => {
      return {
        sourceId: "xuq4vtFviiVZiJUaPTUnzT",
        opId: "4f503791-a65b-44ad-b32d-2519f0591b42",
        userArgs: {
          filters: [($state.textInput.value || "1").padStart(8, "0")]
        },
        cacheKey: `plasmic.$.4f503791-a65b-44ad-b32d-2519f0591b42.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    support: usePlasmicDataOp(() => {
      return {
        sourceId: "xuq4vtFviiVZiJUaPTUnzT",
        opId: "4a588406-8bf1-431c-90e9-a1b9e1b3e882",
        userArgs: {
          filters: [($state.textInput.value || "1").padStart(8, "0")]
        },
        cacheKey: `plasmic.$.4a588406-8bf1-431c-90e9-a1b9e1b3e882.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    doctor: usePlasmicDataOp(() => {
      return {
        sourceId: "xuq4vtFviiVZiJUaPTUnzT",
        opId: "ad87da46-bd69-45f2-b65c-681c3544bfc0",
        userArgs: {
          query: [($state.textInput.value || "1").padStart(8, "0")]
        },
        cacheKey: `plasmic.$.ad87da46-bd69-45f2-b65c-681c3544bfc0.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "xuq4vtFviiVZiJUaPTUnzT",
        opId: "86b20ee2-77a8-4a46-bf05-1e1a19d44dbd",
        userArgs: {
          query: [($state.textInput.value || "1").padStart(8, "0")]
        },
        cacheKey: `plasmic.$.86b20ee2-77a8-4a46-bf05-1e1a19d44dbd.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    supportItems: usePlasmicDataOp(() => {
      return {
        sourceId: "xuq4vtFviiVZiJUaPTUnzT",
        opId: "61e72a08-bb6d-4004-b15d-aeaa4d63d88a",
        userArgs: {
          filters: [($state.textInput.value || "1").padStart(8, "0")]
        },
        cacheKey: `plasmic.$.61e72a08-bb6d-4004-b15d-aeaa4d63d88a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    team: usePlasmicDataOp(() => {
      return {
        sourceId: "xuq4vtFviiVZiJUaPTUnzT",
        opId: "5269baba-8ec2-43c2-aa6b-79720729ea20",
        userArgs: {
          query: [
            $queries.query.data[0]?.employee_id,

            $queries.query.data[1]?.employee_id,

            $queries.query.data[2]?.employee_id,

            $queries.query.data[3]?.employee_id
          ]
        },
        cacheKey: `plasmic.$.5269baba-8ec2-43c2-aa6b-79720729ea20.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    eMpVisit: usePlasmicDataOp(() => {
      return {
        sourceId: "xuq4vtFviiVZiJUaPTUnzT",
        opId: "a5669abf-b212-4b3a-a43f-ca91204ecdc4",
        userArgs: {
          filters: [($state.textInput.value || "1").padStart(8, "0")]
        },
        cacheKey: `plasmic.$.a5669abf-b212-4b3a-a43f-ca91204ecdc4.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    drVist: usePlasmicDataOp(() => {
      return {
        sourceId: "xuq4vtFviiVZiJUaPTUnzT",
        opId: "5fca3a8f-acc6-4f20-84aa-b76fe63bfc0e",
        userArgs: {
          filters: [($state.textInput.value || "1").padStart(8, "0")]
        },
        cacheKey: `plasmic.$.5fca3a8f-acc6-4f20-84aa-b76fe63bfc0e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_library_tailwind_3_4_colors,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <Layout
            data-plasmic-name={"layout"}
            data-plasmic-override={overrides.layout}
            className={classNames("__wab_instance", sty.layout)}
          >
            <AntdButton
              data-plasmic-name={"_switch"}
              data-plasmic-override={overrides._switch}
              className={classNames("__wab_instance", sty._switch)}
              href={`/bulk-servcie-validation`}
              shape={"round"}
              size={"large"}
              type={"dashed"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__q9Dd
                )}
              >
                {"Switch to Bulk Validation"}
              </div>
            </AntdButton>
            <div className={classNames(projectcss.all, sty.freeBox__zfiRz)}>
              <div className={classNames(projectcss.all, sty.freeBox__kZMo)}>
                <div className={classNames(projectcss.all, sty.freeBox__mkahi)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__azwcc
                    )}
                  >
                    {"Dr Code"}
                  </div>
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    aria-label={"jhgfyjg"}
                    className={classNames("__wab_instance", sty.textInput)}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={``}
                    required={true}
                    showStartIcon={true}
                    startIcon={
                      <SearchSvg2Icon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    }
                    type={"text"}
                    value={
                      generateStateValueProp($state, ["textInput", "value"]) ??
                      ""
                    }
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___18Di5)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__omQeb
                    )}
                  >
                    {"Service Request Amount"}
                  </div>
                  <TextInput
                    data-plasmic-name={"textInput2"}
                    data-plasmic-override={overrides.textInput2}
                    className={classNames("__wab_instance", sty.textInput2)}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput2",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={``}
                    value={
                      generateStateValueProp($state, ["textInput2", "value"]) ??
                      ""
                    }
                  />
                </div>
                <MolHeadingWrapper
                  className={classNames(
                    "__wab_instance",
                    sty.molHeadingWrapper__j5W09
                  )}
                  onClick={async team => {
                    const $steps = {};

                    $steps["updateSalesTeam"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["salesTeam"]
                            },
                            operation: 0,
                            value: ""
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSalesTeam"] != null &&
                      typeof $steps["updateSalesTeam"] === "object" &&
                      typeof $steps["updateSalesTeam"].then === "function"
                    ) {
                      $steps["updateSalesTeam"] = await $steps[
                        "updateSalesTeam"
                      ];
                    }

                    $steps["updateSupport"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["support"]
                            },
                            operation: 0,
                            value: $queries.support.data
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSupport"] != null &&
                      typeof $steps["updateSupport"] === "object" &&
                      typeof $steps["updateSupport"].then === "function"
                    ) {
                      $steps["updateSupport"] = await $steps["updateSupport"];
                    }

                    $steps["updateService"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["service"]
                            },
                            operation: 0,
                            value: $queries.service.data
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateService"] != null &&
                      typeof $steps["updateService"] === "object" &&
                      typeof $steps["updateService"].then === "function"
                    ) {
                      $steps["updateService"] = await $steps["updateService"];
                    }
                  }}
                  title={"Team Selector"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__woUlz)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.query.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <MolTeamFilter
                          data-plasmic-name={"molTeamFilter"}
                          data-plasmic-override={overrides.molTeamFilter}
                          be={(() => {
                            try {
                              return currentItem.employee_id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          beName={(() => {
                            try {
                              return currentItem.Employee;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          className={classNames(
                            "__wab_instance",
                            sty.molTeamFilter
                          )}
                          clicked={(() => {
                            try {
                              return currentItem.sales_team == $state.salesTeam;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          hq={(() => {
                            try {
                              return currentItem.hq;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          key={currentIndex}
                          onClick={async Team => {
                            const $steps = {};

                            $steps["updateSalesTeam"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["salesTeam"]
                                    },
                                    operation: 0,
                                    value: currentItem.sales_team
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateSalesTeam"] != null &&
                              typeof $steps["updateSalesTeam"] === "object" &&
                              typeof $steps["updateSalesTeam"].then ===
                                "function"
                            ) {
                              $steps["updateSalesTeam"] = await $steps[
                                "updateSalesTeam"
                              ];
                            }

                            $steps["updateService"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["service"]
                                    },
                                    operation: 0,
                                    value: $queries.service.data.filter(
                                      x => x.salesTeam == $state.salesTeam
                                    )
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateService"] != null &&
                              typeof $steps["updateService"] === "object" &&
                              typeof $steps["updateService"].then === "function"
                            ) {
                              $steps["updateService"] = await $steps[
                                "updateService"
                              ];
                            }

                            $steps["updateSupport"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["support"]
                                    },
                                    operation: 0,
                                    value: $queries.support.data.filter(
                                      x => x.salesTeam == $state.salesTeam
                                    )
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateSupport"] != null &&
                              typeof $steps["updateSupport"] === "object" &&
                              typeof $steps["updateSupport"].then === "function"
                            ) {
                              $steps["updateSupport"] = await $steps[
                                "updateSupport"
                              ];
                            }

                            $steps["updateSupportItem"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["supportItem"]
                                    },
                                    operation: 0,
                                    value: $queries.support.data.filter(
                                      x => x.salesTeam == $state.salesTeam
                                    )
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateSupportItem"] != null &&
                              typeof $steps["updateSupportItem"] === "object" &&
                              typeof $steps["updateSupportItem"].then ===
                                "function"
                            ) {
                              $steps["updateSupportItem"] = await $steps[
                                "updateSupportItem"
                              ];
                            }
                          }}
                          salesTeam={(() => {
                            try {
                              return currentItem.sales_team;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          slectedState={(() => {
                            try {
                              return $state.salesTeam;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      );
                    })}
                  </div>
                </MolHeadingWrapper>
                {(() => {
                  try {
                    return $state.salesTeam != "";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <MolHeadingWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.molHeadingWrapper__yyu3Y
                    )}
                    title={"Employee Hierarchy"}
                  >
                    <HierarchyComponent
                      data-plasmic-name={"hierarchyComponent"}
                      data-plasmic-override={overrides.hierarchyComponent}
                      className={classNames(
                        "__wab_instance",
                        sty.hierarchyComponent
                      )}
                      data={(() => {
                        try {
                          return $queries.team.data.filter(
                            x => x.salesTeam == $state.salesTeam
                          )[0];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </MolHeadingWrapper>
                ) : null}
              </div>
              <MolHeadingWrapper
                className={classNames(
                  "__wab_instance",
                  sty.molHeadingWrapper__otUlL
                )}
                title={"Doctor Details"}
              >
                <div
                  data-plasmic-name={"doctorDetails"}
                  data-plasmic-override={overrides.doctorDetails}
                  className={classNames(projectcss.all, sty.doctorDetails)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__urWd8)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__paemn
                          )}
                          key={currentIndex}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eyGqI
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "DrName";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__n9Ssm
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.value;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                  <Embed
                    data-plasmic-name={"embedHtml"}
                    data-plasmic-override={overrides.embedHtml}
                    className={classNames("__wab_instance", sty.embedHtml)}
                    code={(() => {
                      try {
                        return `<iframe
  id="doctor-map"
  width="100%"
  height="300"
  style="border:0; border-radius: 10px"
  loading="lazy"
  allowfullscreen
  referrerpolicy="no-referrer-when-downgrade"
  src="https://maps.google.com/maps?q=${$queries.doctor.data[0].standardizedLocation.x},${$queries.doctor.data[0].standardizedLocation.y}&z=14&output=embed">
</iframe>`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return '<iframe\r\n  id="doctor-map"\r\n  width="100%"\r\n  height="300"\r\n  style="border:0; border-radius: 10px;"\r\n  loading="lazy"\r\n  allowfullscreen\r\n  referrerpolicy="no-referrer-when-downgrade">\r\n</iframe>\r\n\r\n<script>\r\n  // Get the location string from your Plasmic query\r\n  const locationString = "${$queries.doctor.data[0].standardizedLocation}";\r\n\r\n  // Use JavaScript to find the numbers for \'y\' (latitude) and \'x\' (longitude)\r\n  const latMatch = locationString.match(/y:([\\d.-]+)/);\r\n  const lonMatch = locationString.match(/x:([\\d.-]+)/);\r\n\r\n  // Check if we found the numbers\r\n  if (latMatch && lonMatch) {\r\n    const latitude = latMatch[1];\r\n    const longitude = lonMatch[1];\r\n\r\n    // Build the correct Google Maps URL\r\n    const mapUrl = `https://maps.google.com/maps?q=${latitude},${longitude}&z=14&output=embed`;\r\n\r\n    // Find the iframe placeholder and set its source to our new URL\r\n    document.getElementById(\'doctor-map\').src = mapUrl;\r\n  }\r\n</script>';
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
              </MolHeadingWrapper>
              <div className={classNames(projectcss.all, sty.freeBox__iiFiB)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return (() => {
                        let tSupport = $state.support.reduce(
                          (b, a) => parseInt(a.supportValue) + b,
                          0
                        );
                        let tService = $state.service.reduce(
                          (b, a) => parseInt(a.serviceAmount) + b,
                          0
                        );
                        let tROI = tSupport / tService;
                        let lService = !$state.service?.length
                          ? 0
                          : (() => {
                              const latestDate = new Date(
                                $state.service.reduce((l, c) =>
                                  new Date(c.serviceDate) >
                                  new Date(l.serviceDate)
                                    ? c
                                    : l
                                ).serviceDate
                              );
                              return $state.service
                                .filter(
                                  i =>
                                    new Date(i.serviceDate).getMonth() ===
                                      latestDate.getMonth() &&
                                    new Date(i.serviceDate).getFullYear() ===
                                      latestDate.getFullYear()
                                )
                                .reduce(
                                  (t, c) => t + parseInt(c.serviceAmount, 10),
                                  0
                                );
                            })();
                        let lSupport = $state.support?.length
                          ? (() => {
                              const d = $state.support;
                              const lD = new Date(
                                d.reduce((l, c) =>
                                  new Date(c.date) > new Date(l.date) ? c : l
                                ).date
                              );
                              return d
                                .filter(i => {
                                  const iD = new Date(i.date);
                                  return (
                                    iD.getMonth() === lD.getMonth() &&
                                    iD.getFullYear() === lD.getFullYear()
                                  );
                                })
                                .reduce(
                                  (t, c) => t + parseInt(c.supportValue, 10),
                                  0
                                );
                            })()
                          : 0;
                        let lROI = lSupport / lService;
                        return [
                          {
                            icon: "active",
                            heading: "Total ROI",
                            value: tROI
                          },
                          {
                            icon: "active",
                            heading: "Total Support",
                            value: tSupport
                          },
                          {
                            icon: "active",
                            heading: "Total Service",
                            value: tService
                          },
                          {
                            icon: "active",
                            heading: "lROI",
                            value: lROI
                          },
                          {
                            icon: "active",
                            heading: "Latest Service",
                            value: lService
                          },
                          {
                            icon: "active",
                            heading: "Lates Support",
                            value: lSupport
                          }
                        ];
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <MolKpi
                      data-plasmic-name={"molKpi"}
                      data-plasmic-override={overrides.molKpi}
                      className={classNames("__wab_instance", sty.molKpi)}
                      count={(() => {
                        try {
                          return currentItem.heading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      icon={(() => {
                        try {
                          return currentItem.icon;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      key={currentIndex}
                      status={(() => {
                        try {
                          return currentItem.value;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  );
                })}
              </div>
              <MolHeadingWrapper
                className={classNames(
                  "__wab_instance",
                  sty.molHeadingWrapper__pjChe
                )}
                title={"Service Data"}
              >
                <AdvancedTable
                  bulkActions={[]}
                  cellHeight={"auto"}
                  cellMaxHeight={"none"}
                  cellMaxWidth={"none"}
                  cellMinHeight={"auto"}
                  cellMinWidth={"auto"}
                  cellWidth={"auto"}
                  className={
                    "" +
                    " " +
                    classNames("__wab_instance", sty.advancedDataTable__u826B)
                  }
                  columnGroups={[]}
                  columns={[]}
                  currentPage={1}
                  data={(() => {
                    try {
                      return $state.service;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  defaultBodyStyle={{}}
                  defaultHeaderStyle={{}}
                  enableBulkActions={false}
                  enableColumnFilter={false}
                  enableColumnGrouping={false}
                  enableColumnManagement={false}
                  enableExport={true}
                  enablePagination={true}
                  enableRefresh={false}
                  enableRowActions={false}
                  enableRowSelection={false}
                  enableSearch={true}
                  enableSorting={true}
                  error={null}
                  fields={[
                    "serviceDate",
                    "salesTeam",
                    "hq",
                    "serviceId",
                    "serviceName",
                    "serviceCode",
                    "serviceAmount",
                    "remarks"
                  ]}
                  footerColumnGroup={null}
                  graphqlQuery={null}
                  graphqlVariables={{}}
                  groupConfig={{
                    enableHeaderGroups: true,
                    enableFooterGroups: true,
                    groupStyle: {},
                    headerGroupStyle: {},
                    footerGroupStyle: {}
                  }}
                  headerColumnGroup={null}
                  imageFields={[]}
                  loading={false}
                  pageSize={3}
                  pageSizeOptions={[5, 10, 25, 50, 100]}
                  popupImageFields={[]}
                  refetchInterval={0}
                  rowActions={[]}
                  style={{}}
                  tableHeight={"600px"}
                  theme={"default"}
                />
              </MolHeadingWrapper>
              <MolHeadingWrapper
                className={classNames(
                  "__wab_instance",
                  sty.molHeadingWrapper__mgm7W
                )}
                title={"Support Data"}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___99O3F)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lLOvH)}
                  >
                    <AdvancedTable
                      bulkActions={[]}
                      cellHeight={"auto"}
                      cellMaxHeight={"none"}
                      cellMaxWidth={"none"}
                      cellMinHeight={"auto"}
                      cellMinWidth={"auto"}
                      cellWidth={"auto"}
                      className={
                        "" +
                        " " +
                        classNames(
                          "__wab_instance",
                          sty.advancedDataTable__haY63
                        )
                      }
                      columnGroups={[]}
                      columns={[]}
                      currentPage={1}
                      data={(() => {
                        try {
                          return $state.support;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      defaultBodyStyle={{}}
                      defaultHeaderStyle={{}}
                      enableBulkActions={false}
                      enableColumnFilter={false}
                      enableColumnGrouping={false}
                      enableColumnManagement={false}
                      enableExport={true}
                      enablePagination={true}
                      enableRefresh={false}
                      enableRowActions={false}
                      enableRowSelection={false}
                      enableSearch={true}
                      enableSorting={true}
                      error={null}
                      fields={["salesTeam", "hq", "date", "supportValue"]}
                      footerColumnGroup={null}
                      graphqlQuery={null}
                      graphqlVariables={{}}
                      groupConfig={{
                        enableHeaderGroups: true,
                        enableFooterGroups: true,
                        groupStyle: {},
                        headerGroupStyle: {},
                        footerGroupStyle: {}
                      }}
                      headerColumnGroup={null}
                      imageFields={[]}
                      loading={false}
                      pageSize={5}
                      pageSizeOptions={[5, 10, 25, 50, 100]}
                      popupImageFields={[]}
                      refetchInterval={0}
                      rowActions={[]}
                      style={{}}
                      tableHeight={"600px"}
                      theme={"default"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1Q49U)}
                  >
                    <AdvancedTable
                      bulkActions={[]}
                      cellHeight={"auto"}
                      cellMaxHeight={"none"}
                      cellMaxWidth={"none"}
                      cellMinHeight={"auto"}
                      cellMinWidth={"auto"}
                      cellWidth={"auto"}
                      className={
                        "" +
                        " " +
                        classNames(
                          "__wab_instance",
                          sty.advancedDataTable__oNtO
                        )
                      }
                      columnGroups={[]}
                      columns={[]}
                      currentPage={1}
                      data={(() => {
                        try {
                          return $state.supportItem;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      defaultBodyStyle={{}}
                      defaultHeaderStyle={{}}
                      enableBulkActions={false}
                      enableColumnFilter={false}
                      enableColumnGrouping={false}
                      enableColumnManagement={false}
                      enableExport={true}
                      enablePagination={true}
                      enableRefresh={false}
                      enableRowActions={false}
                      enableRowSelection={false}
                      enableSearch={true}
                      enableSorting={true}
                      error={null}
                      fields={["date", "item", "Brand", "Qty", "Value"]}
                      footerColumnGroup={null}
                      graphqlQuery={null}
                      graphqlVariables={{}}
                      groupConfig={{
                        enableHeaderGroups: true,
                        enableFooterGroups: true,
                        groupStyle: {},
                        headerGroupStyle: {},
                        footerGroupStyle: {}
                      }}
                      headerColumnGroup={null}
                      imageFields={[]}
                      loading={false}
                      pageSize={5}
                      pageSizeOptions={[5, 10, 25, 50, 100]}
                      popupImageFields={[]}
                      refetchInterval={0}
                      rowActions={[]}
                      style={{}}
                      tableHeight={"600px"}
                      theme={"default"}
                    />
                  </div>
                </div>
              </MolHeadingWrapper>
              <MolHeadingWrapper
                className={classNames(
                  "__wab_instance",
                  sty.molHeadingWrapper__a6Ko7
                )}
                slot={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iXttN)}
                  >
                    <RadioGroup
                      data-plasmic-name={"radioGroup"}
                      data-plasmic-override={overrides.radioGroup}
                      className={classNames("__wab_instance", sty.radioGroup)}
                      label={"Filter"}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "radioGroup",
                          "value"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async val => {
                          const $steps = {};

                          $steps["updateFilter"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["filter"]
                                  },
                                  operation: 0,
                                  value: $state.radioGroup.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateFilter"] != null &&
                            typeof $steps["updateFilter"] === "object" &&
                            typeof $steps["updateFilter"].then === "function"
                          ) {
                            $steps["updateFilter"] = await $steps[
                              "updateFilter"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      options={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__psaYb
                          )}
                        >
                          <Radio
                            className={classNames(
                              "__wab_instance",
                              sty.radio__ts2Yq
                            )}
                            label={"All"}
                            value={"allTime"}
                          />

                          <Radio
                            className={classNames(
                              "__wab_instance",
                              sty.radio__aqalH
                            )}
                            label={"Current Month"}
                            value={"currentMonth"}
                          />

                          <Radio
                            className={classNames(
                              "__wab_instance",
                              sty.radio__kqkQm
                            )}
                            label={"Last 3 Months"}
                            value={"lastThreeMonths"}
                          />

                          <Radio
                            className={classNames(
                              "__wab_instance",
                              sty.radio__xrKmg
                            )}
                            label={"Last 6 Months"}
                            value={"lastSixMonths"}
                          />
                        </div>
                      }
                      showLabel={true}
                      value={generateStateValueProp($state, [
                        "radioGroup",
                        "value"
                      ])}
                    />

                    <Radio
                      className={classNames("__wab_instance", sty.radio__fq4O4)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xu2Ap
                          )}
                        >
                          {"AllTIme"}
                        </div>
                      }
                      value={(() => {
                        try {
                          return $state.filter;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />

                    <Radio
                      className={classNames("__wab_instance", sty.radio__ackCs)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kvpEz
                          )}
                        >
                          {"Current Month"}
                        </div>
                      }
                    />

                    <Radio
                      className={classNames("__wab_instance", sty.radio__sCx0H)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__acKeo
                          )}
                        >
                          {"Last Three Month"}
                        </div>
                      }
                    />

                    <Radio
                      className={classNames("__wab_instance", sty.radio__z3W2L)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yXpsp
                          )}
                        >
                          {"Last Six Month"}
                        </div>
                      }
                    />
                  </div>
                }
                title={"Visit Data"}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $queries.team.data.reduce((p, c) => {
                        let st = c.salesTeam;
                        let hq = c.hq;
                        let data = (() => {
                          const calc = d =>
                            Object.entries(
                              d.reduce(
                                (t, i) => (
                                  Object.keys(i)
                                    .filter(k => k.includes("Visit"))
                                    .forEach(
                                      k =>
                                        (t[k] =
                                          (t[k] || 0) + (parseInt(i[k]) || 0))
                                    ),
                                  t
                                ),
                                {}
                              )
                            ).map(([key, value]) => ({ key, value }));
                          const teamData = $queries.drVist.data.filter(
                            x => x.salesTeam === st
                          );
                          const now = new Date();
                          return {
                            allTime: calc(teamData),
                            currentMonth: calc(
                              teamData.filter(
                                x =>
                                  new Date(x.date) >=
                                  new Date(now.getFullYear(), now.getMonth(), 1)
                              )
                            ),
                            lastThreeMonths: calc(
                              teamData.filter(
                                x =>
                                  new Date(x.date) >=
                                  new Date(
                                    new Date().setMonth(now.getMonth() - 3)
                                  )
                              )
                            ),
                            lastSixMonths: calc(
                              teamData.filter(
                                x =>
                                  new Date(x.date) >=
                                  new Date(
                                    new Date().setMonth(now.getMonth() - 6)
                                  )
                              )
                            )
                          };
                        })();
                        let ret = {
                          team: st,
                          hq: hq,
                          data: data
                        };
                        return [...p, ret];
                      }, []);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dEvtY)}
                      key={currentIndex}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__u37Eu
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jq7Vd
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.team;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5VIro
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.hq;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oslDh
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return currentItem.data[$state.radioGroup.value];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_1, __plasmic_idx_1) => {
                          const currentItem = __plasmic_item_1;
                          const currentIndex = __plasmic_idx_1;
                          return (
                            <MolVisit
                              data-plasmic-name={"molVisit"}
                              data-plasmic-override={overrides.molVisit}
                              className={classNames(
                                "__wab_instance",
                                sty.molVisit
                              )}
                              designation={(() => {
                                try {
                                  return currentItem.key;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              key={currentIndex}
                              visits={(() => {
                                try {
                                  return currentItem.value;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          );
                        })}
                      </div>
                    </div>
                  );
                })}
                <div className={classNames(projectcss.all, sty.freeBox__o9Q0T)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__x72Ij)}
                  >
                    <AdvancedTable
                      bulkActions={[]}
                      cellHeight={"auto"}
                      cellMaxHeight={"none"}
                      cellMaxWidth={"none"}
                      cellMinHeight={"auto"}
                      cellMinWidth={"auto"}
                      cellWidth={"auto"}
                      className={
                        "" +
                        " " +
                        classNames(
                          "__wab_instance",
                          sty.advancedDataTable__zrkc5
                        )
                      }
                      columnGroups={[]}
                      columns={[]}
                      currentPage={1}
                      data={(() => {
                        try {
                          return $queries.eMpVisit.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      defaultBodyStyle={{}}
                      defaultHeaderStyle={{}}
                      enableBulkActions={false}
                      enableColumnFilter={true}
                      enableColumnGrouping={false}
                      enableColumnManagement={false}
                      enableExport={true}
                      enablePagination={true}
                      enableRefresh={false}
                      enableRowActions={false}
                      enableRowSelection={false}
                      enableSearch={true}
                      enableSorting={true}
                      error={null}
                      fields={[
                        "designation",
                        "visitDate",
                        "visitTime",
                        "employeeId",
                        "distance",
                        "actualLocation",
                        "hq",
                        "salesTeam"
                      ]}
                      footerColumnGroup={null}
                      graphqlQuery={null}
                      graphqlVariables={{}}
                      groupConfig={{
                        enableHeaderGroups: true,
                        enableFooterGroups: true,
                        groupStyle: {},
                        headerGroupStyle: {},
                        footerGroupStyle: {}
                      }}
                      headerColumnGroup={null}
                      imageFields={[]}
                      loading={false}
                      pageSize={3}
                      pageSizeOptions={[5, 10, 25, 50, 100]}
                      popupImageFields={[]}
                      refetchInterval={0}
                      rowActions={[]}
                      style={{}}
                      tableHeight={"600px"}
                      theme={"default"}
                    />
                  </div>
                </div>
              </MolHeadingWrapper>
            </div>
          </Layout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "layout",
    "_switch",
    "textInput",
    "svg",
    "textInput2",
    "molTeamFilter",
    "hierarchyComponent",
    "doctorDetails",
    "embedHtml",
    "molKpi",
    "molVisit",
    "radioGroup"
  ],
  layout: [
    "layout",
    "_switch",
    "textInput",
    "svg",
    "textInput2",
    "molTeamFilter",
    "hierarchyComponent",
    "doctorDetails",
    "embedHtml",
    "molKpi",
    "molVisit",
    "radioGroup"
  ],
  _switch: ["_switch"],
  textInput: ["textInput", "svg"],
  svg: ["svg"],
  textInput2: ["textInput2"],
  molTeamFilter: ["molTeamFilter"],
  hierarchyComponent: ["hierarchyComponent"],
  doctorDetails: ["doctorDetails", "embedHtml"],
  embedHtml: ["embedHtml"],
  molKpi: ["molKpi"],
  molVisit: ["molVisit"],
  radioGroup: ["radioGroup"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  layout: typeof Layout;
  _switch: typeof AntdButton;
  textInput: typeof TextInput;
  svg: "svg";
  textInput2: typeof TextInput;
  molTeamFilter: typeof MolTeamFilter;
  hierarchyComponent: typeof HierarchyComponent;
  doctorDetails: "div";
  embedHtml: typeof Embed;
  molKpi: typeof MolKpi;
  molVisit: typeof MolVisit;
  radioGroup: typeof RadioGroup;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSingleServiceValidation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSingleServiceValidation__VariantsArgs;
    args?: PlasmicSingleServiceValidation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSingleServiceValidation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSingleServiceValidation__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSingleServiceValidation__ArgProps,
          internalVariantPropNames: PlasmicSingleServiceValidation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSingleServiceValidation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSingleServiceValidation";
  } else {
    func.displayName = `PlasmicSingleServiceValidation.${nodeName}`;
  }
  return func;
}

export const PlasmicSingleServiceValidation = Object.assign(
  // Top-level PlasmicSingleServiceValidation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    layout: makeNodeComponent("layout"),
    _switch: makeNodeComponent("_switch"),
    textInput: makeNodeComponent("textInput"),
    svg: makeNodeComponent("svg"),
    textInput2: makeNodeComponent("textInput2"),
    molTeamFilter: makeNodeComponent("molTeamFilter"),
    hierarchyComponent: makeNodeComponent("hierarchyComponent"),
    doctorDetails: makeNodeComponent("doctorDetails"),
    embedHtml: makeNodeComponent("embedHtml"),
    molKpi: makeNodeComponent("molKpi"),
    molVisit: makeNodeComponent("molVisit"),
    radioGroup: makeNodeComponent("radioGroup"),

    // Metadata about props expected for PlasmicSingleServiceValidation
    internalVariantProps: PlasmicSingleServiceValidation__VariantProps,
    internalArgProps: PlasmicSingleServiceValidation__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSingleServiceValidation;
/* prettier-ignore-end */
