/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: pAY-hwRYSgy5

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Sidebar from "../../Sidebar"; // plasmic-import: 5ad-lh9d17tn/component
import { AntdDrawer } from "@plasmicpkgs/antd5/skinny/registerDrawer";
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";
import AtomMenuItem from "../../AtomMenuItem"; // plasmic-import: U5XW7pkODig0/component
import Button from "../../Button"; // plasmic-import: 3_Gvwy-erxzw/component
import Popover from "../../Popover"; // plasmic-import: 0utbx7M9Fpbm/component
import { AntdAvatar } from "@plasmicpkgs/antd5/skinny/registerAvatar";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicLayout.module.css"; // plasmic-import: pAY-hwRYSgy5/css

import MenuDeepIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__MenuDeep"; // plasmic-import: XLcJJmvdQUl3/icon
import LogoutIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__Logout"; // plasmic-import: UOnydwul0hWX/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: Zy2qa_w9_rBJ/icon

createPlasmicElementProxy;

export type PlasmicLayout__VariantMembers = {};
export type PlasmicLayout__VariantsArgs = {};
type VariantPropType = keyof PlasmicLayout__VariantsArgs;
export const PlasmicLayout__VariantProps = new Array<VariantPropType>();

export type PlasmicLayout__ArgsType = { children?: React.ReactNode };
type ArgPropType = keyof PlasmicLayout__ArgsType;
export const PlasmicLayout__ArgProps = new Array<ArgPropType>("children");

export type PlasmicLayout__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  sidebar?: Flex__<typeof Sidebar>;
  menuButton?: Flex__<"div">;
  moreMenu?: Flex__<typeof AntdDrawer>;
  cmsEntryField?: Flex__<typeof CmsRowField>;
  popover?: Flex__<typeof Popover>;
  avatar?: Flex__<typeof AntdAvatar>;
  sidebar2?: Flex__<typeof Sidebar>;
};

export interface DefaultLayoutProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLayout__RenderFunc(props: {
  variants: PlasmicLayout__VariantsArgs;
  args: PlasmicLayout__ArgsType;
  overrides: PlasmicLayout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "collapse",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "moreMenu.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "popover.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_library_tailwind_3_4_colors,
        styleTokensClassNames_library_tailwind_3_4_number_tokens,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["goToLogin"] = false
            ? (() => {
                const actionArgs = { destination: `/login` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToLogin"] != null &&
            typeof $steps["goToLogin"] === "object" &&
            typeof $steps["goToLogin"].then === "function"
          ) {
            $steps["goToLogin"] = await $steps["goToLogin"];
          }
        }}
      />

      <div className={classNames(projectcss.all, sty.freeBox__zLfYs)}>
        <Sidebar
          data-plasmic-name={"sidebar"}
          data-plasmic-override={overrides.sidebar}
          className={classNames("__wab_instance", sty.sidebar)}
          menu={[]}
          mobileView={undefined}
          toggleMode={(() => {
            try {
              return !$state.collapse;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()}
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__me2Od)}>
        <div className={classNames(projectcss.all, sty.freeBox__wweml)}>
          <div
            data-plasmic-name={"menuButton"}
            data-plasmic-override={overrides.menuButton}
            className={classNames(projectcss.all, sty.menuButton)}
          >
            <MenuDeepIcon
              className={classNames(projectcss.all, sty.svg__bitqB)}
              onClick={async event => {
                const $steps = {};

                $steps["updateCollapse"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["collapse"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCollapse"] != null &&
                  typeof $steps["updateCollapse"] === "object" &&
                  typeof $steps["updateCollapse"].then === "function"
                ) {
                  $steps["updateCollapse"] = await $steps["updateCollapse"];
                }
              }}
              role={"img"}
            />

            <MenuDeepIcon
              className={classNames(projectcss.all, sty.svg__mE9N)}
              onClick={async event => {
                const $steps = {};

                $steps["updateMoreMenuOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["moreMenu", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateMoreMenuOpen"] != null &&
                  typeof $steps["updateMoreMenuOpen"] === "object" &&
                  typeof $steps["updateMoreMenuOpen"].then === "function"
                ) {
                  $steps["updateMoreMenuOpen"] = await $steps[
                    "updateMoreMenuOpen"
                  ];
                }
              }}
              role={"img"}
            />
          </div>
          <AntdDrawer
            data-plasmic-name={"moreMenu"}
            data-plasmic-override={overrides.moreMenu}
            className={classNames("__wab_instance", sty.moreMenu)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames,
              styleTokensClassNames_antd_5_hostless,
              styleTokensClassNames_library_tailwind_3_4_colors,
              styleTokensClassNames_library_tailwind_3_4_number_tokens,
              styleTokensClassNames_plasmic_rich_components
            )}
            drawerMaskClassName={classNames({
              [sty["pcls_FikmVvw8_h9N"]]: true
            })}
            drawerScopeClassName={sty["moreMenu__drawer"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["moreMenu", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["moreMenu", "open"])}
            placement={"left"}
            title={"More Menu"}
          >
            <div className={classNames(projectcss.all, sty.freeBox___1QBeu)}>
              <div className={classNames(projectcss.all, sty.freeBox___8Le19)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kIv6
                  )}
                >
                  {"Drawer content"}
                </div>
                <CmsQueryRepeater
                  className={classNames(
                    "__wab_instance",
                    sty.cmsDataFetcher___1PM6D
                  )}
                  desc={false}
                  emptyMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xy065
                          )}
                        >
                          {"No matching published entries found."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  filterField={(() => {
                    try {
                      return "type";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  filterValue={"more top"}
                  forceEmptyState={false}
                  forceLoadingState={false}
                  limit={0}
                  loadingMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__u3Fx4
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  mode={"rows"}
                  noAutoRepeat={false}
                  noLayout={false}
                  table={"menu"}
                  useDraft={false}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sdQxl
                        )}
                      >
                        <CmsRowField
                          data-plasmic-name={"cmsEntryField"}
                          data-plasmic-override={overrides.cmsEntryField}
                          className={classNames(
                            "__wab_instance",
                            sty.cmsEntryField
                          )}
                          themeResetClassName={classNames(
                            projectcss.root_reset,
                            projectcss.root_reset_tags,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            styleTokensClassNames,
                            styleTokensClassNames_antd_5_hostless,
                            styleTokensClassNames_library_tailwind_3_4_colors,
                            styleTokensClassNames_library_tailwind_3_4_number_tokens,
                            styleTokensClassNames_plasmic_rich_components
                          )}
                        />

                        <AtomMenuItem
                          className={classNames(
                            "__wab_instance",
                            sty.atomMenuItem__b7Xr
                          )}
                          icon={(() => {
                            try {
                              return $ctx.plasmicCmsMenuItem.data.icon.url;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          iconMode={true}
                          name={(() => {
                            try {
                              return $ctx.plasmicCmsMenuCollection[0].data
                                .menuName;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                    )}
                  </DataCtxReader__>
                </CmsQueryRepeater>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__mn9S3)}>
                <CmsQueryRepeater
                  className={classNames(
                    "__wab_instance",
                    sty.cmsDataFetcher__dpxIc
                  )}
                  desc={false}
                  emptyMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__utt0A
                          )}
                        >
                          {"No matching published entries found."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  filterField={(() => {
                    try {
                      return "type";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  filterValue={"more bottom"}
                  forceEmptyState={false}
                  forceLoadingState={false}
                  limit={0}
                  loadingMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1CoKh
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  mode={"rows"}
                  noAutoRepeat={false}
                  noLayout={false}
                  table={"menu"}
                  useDraft={false}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__p8VB8
                        )}
                      >
                        <AtomMenuItem
                          className={classNames(
                            "__wab_instance",
                            sty.atomMenuItem___6T477
                          )}
                          icon={(() => {
                            try {
                              return $ctx.plasmicCmsMenuItem.data.icon.url;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          iconMode={true}
                          name={(() => {
                            try {
                              return $ctx.plasmicCmsMenuCollection[0].data
                                .menuName;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                    )}
                  </DataCtxReader__>
                </CmsQueryRepeater>
              </div>
            </div>
          </AntdDrawer>
          <div className={classNames(projectcss.all, sty.freeBox__em73)}>
            <Button
              className={classNames("__wab_instance", sty.button__zvrE8)}
              color={"errorDestructive"}
              iconStart={true}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__a8IDz
                  )}
                >
                  {"Logout"}
                </div>
              }
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            const auth = window.firebaseAuth;
                            if (auth) {
                              return auth.signOut().catch(error => {
                                console.error("Logout failed:", error);
                              });
                            } else {
                              return console.error(
                                "Firebase Auth not available"
                              );
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              size={"large"}
              start={
                <LogoutIcon
                  className={classNames(projectcss.all, sty.svg__zlgj)}
                  role={"img"}
                />
              }
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__udao8
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return localStorage.getItem("userDisplayName");
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__upUgj)}>
            <Popover
              data-plasmic-name={"popover"}
              data-plasmic-override={overrides.popover}
              className={classNames("__wab_instance", sty.popover)}
              content={
                <div className={classNames(projectcss.all, sty.freeBox__ikiuD)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kcnMq
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            `Name: ` + localStorage.getItem("userDisplayName")
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oWcfV
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToProfilePage"] = true
                        ? (() => {
                            const actionArgs = { destination: `/profile` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToProfilePage"] != null &&
                        typeof $steps["goToProfilePage"] === "object" &&
                        typeof $steps["goToProfilePage"].then === "function"
                      ) {
                        $steps["goToProfilePage"] = await $steps[
                          "goToProfilePage"
                        ];
                      }
                    }}
                  >
                    {"Profile"}
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__tOffk)}
                    color={"errorDestructive"}
                    iconStart={true}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__up2Oi
                        )}
                      >
                        {"Logout"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  if (
                                    typeof window !== "undefined" &&
                                    window.firebaseAuth
                                  ) {
                                    return window.firebaseAuth
                                      .signOut()
                                      .then(() => {
                                        localStorage.clear();
                                        window.location.href = "/login";
                                      })
                                      .catch(error => {
                                        console.error("Logout failed:", error);
                                      });
                                  } else {
                                    return console.error(
                                      "Firebase Auth not available"
                                    );
                                  }
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    size={"large"}
                    start={
                      <LogoutIcon
                        className={classNames(projectcss.all, sty.svg__vSgQg)}
                        role={"img"}
                      />
                    }
                  />
                </div>
              }
              isOpen={generateStateValueProp($state, ["popover", "isOpen"])}
              offset={10}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["popover", "isOpen"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              shouldFlip={true}
              trigger={
                <AntdAvatar
                  data-plasmic-name={"avatar"}
                  data-plasmic-override={overrides.avatar}
                  className={classNames("__wab_instance", sty.avatar)}
                  href={(() => {
                    try {
                      return $state.collapse;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  letters={(() => {
                    try {
                      return localStorage.getItem("userInitial");
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  shape={"circle"}
                  src={(() => {
                    try {
                      return localStorage.getItem("userAvatar");
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              }
            />
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__esS)}>
          {renderPlasmicSlot({
            defaultContents: null,
            value: args.children
          })}
        </div>
        <Sidebar
          data-plasmic-name={"sidebar2"}
          data-plasmic-override={overrides.sidebar2}
          className={classNames("__wab_instance", sty.sidebar2)}
          mobileView={true}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "sidebar",
    "menuButton",
    "moreMenu",
    "cmsEntryField",
    "popover",
    "avatar",
    "sidebar2"
  ],
  sideEffect: ["sideEffect"],
  sidebar: ["sidebar"],
  menuButton: ["menuButton"],
  moreMenu: ["moreMenu", "cmsEntryField"],
  cmsEntryField: ["cmsEntryField"],
  popover: ["popover", "avatar"],
  avatar: ["avatar"],
  sidebar2: ["sidebar2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  sidebar: typeof Sidebar;
  menuButton: "div";
  moreMenu: typeof AntdDrawer;
  cmsEntryField: typeof CmsRowField;
  popover: typeof Popover;
  avatar: typeof AntdAvatar;
  sidebar2: typeof Sidebar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLayout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLayout__VariantsArgs;
    args?: PlasmicLayout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLayout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLayout__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLayout__ArgProps,
          internalVariantPropNames: PlasmicLayout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLayout";
  } else {
    func.displayName = `PlasmicLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicLayout = Object.assign(
  // Top-level PlasmicLayout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    sidebar: makeNodeComponent("sidebar"),
    menuButton: makeNodeComponent("menuButton"),
    moreMenu: makeNodeComponent("moreMenu"),
    cmsEntryField: makeNodeComponent("cmsEntryField"),
    popover: makeNodeComponent("popover"),
    avatar: makeNodeComponent("avatar"),
    sidebar2: makeNodeComponent("sidebar2"),

    // Metadata about props expected for PlasmicLayout
    internalVariantProps: PlasmicLayout__VariantProps,
    internalArgProps: PlasmicLayout__ArgProps
  }
);

export default PlasmicLayout;
/* prettier-ignore-end */
