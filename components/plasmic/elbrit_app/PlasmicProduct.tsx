/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: topV3Yt3slki

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Layout from "../../Layout"; // plasmic-import: pAY-hwRYSgy5/component
import AtomFilters from "../../AtomFilters"; // plasmic-import: 2w5tC3oZOkGj/component
import Popover from "../../Popover"; // plasmic-import: 0utbx7M9Fpbm/component
import RadioGroup from "../../RadioGroup"; // plasmic-import: GYMz3GfToupI/component
import Radio from "../../Radio"; // plasmic-import: FhAk9xxd_Y_r/component
import TextInput from "../../TextInput"; // plasmic-import: n1KYdl7MSeQ4/component
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components";
import MolProdCards from "../../MolProdCards"; // plasmic-import: QLKbsHkUdyIn/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicProduct.module.css"; // plasmic-import: topV3Yt3slki/css

import SearchSvg2Icon from "./icons/PlasmicIcon__SearchSvg2"; // plasmic-import: ny0qr1BEnBpN/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: pGbufo6Ngt-g/icon

createPlasmicElementProxy;

export type PlasmicProduct__VariantMembers = {};
export type PlasmicProduct__VariantsArgs = {};
type VariantPropType = keyof PlasmicProduct__VariantsArgs;
export const PlasmicProduct__VariantProps = new Array<VariantPropType>();

export type PlasmicProduct__ArgsType = {};
type ArgPropType = keyof PlasmicProduct__ArgsType;
export const PlasmicProduct__ArgProps = new Array<ArgPropType>();

export type PlasmicProduct__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  layout?: Flex__<typeof Layout>;
  popover2?: Flex__<typeof Popover>;
  radioGroup2?: Flex__<typeof RadioGroup>;
  textInput?: Flex__<typeof TextInput>;
  svg?: Flex__<"svg">;
  loadingBoundary?: Flex__<typeof LoadingBoundary>;
  molProdCards?: Flex__<typeof MolProdCards>;
};

export interface DefaultProductProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProduct__RenderFunc(props: {
  variants: PlasmicProduct__VariantsArgs;
  args: PlasmicProduct__ArgsType;
  overrides: PlasmicProduct__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "items",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "RABRITON DSR"
      },
      {
        path: "prod",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const toSet = v =>
                  new Set(
                    (Array.isArray(v) ? v : [v]).map(x =>
                      String(x ?? "")
                        .trim()
                        .toLowerCase()
                    )
                  );
                const want = toSet(
                  $queries.product.data.response.data.Items.edges
                );
                return ($state.data ?? [])
                  .filter(e =>
                    want.has(
                      String(e?.node?.item_name ?? "")
                        .trim()
                        .toLowerCase()
                    )
                  )
                  .map(e => e.node);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "toggle",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "data",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const edges =
                  $queries.product?.data?.response?.data?.Items?.edges ?? [];
                const sortVal = String($state.sort ?? "")
                  .trim()
                  .toLowerCase();

                const nameOf = e => String(e?.node?.item_name ?? "");
                const ptsOf = e => {
                  const v = Number(e?.node?.whg_last_pts);
                  return Number.isFinite(v) ? v : null;
                };

                const cmpText = (ea, eb) =>
                  nameOf(ea).localeCompare(nameOf(eb), undefined, {
                    sensitivity: "base"
                  });

                const cmpNumAsc = (ea, eb) => {
                  const a = ptsOf(ea),
                    b = ptsOf(eb);
                  if (a === null && b === null) return 0;
                  if (a === null) return 1;
                  if (b === null) return -1;
                  return a - b;
                };

                const cmpNumDesc = (ea, eb) => {
                  const a = ptsOf(ea),
                    b = ptsOf(eb);
                  if (a === null && b === null) return 0;
                  if (a === null) return 1; // nulls last
                  if (b === null) return -1;
                  return b - a;
                };

                // ✅ If no sort or explicitly "missing(1)" → return edges as-is
                if (!sortVal || sortVal === "missing(1)") {
                  return edges;
                }

                if (["a-z", "az", "asc"].includes(sortVal)) {
                  return [...edges].sort(cmpText);
                }
                if (["z-a", "za", "desc"].includes(sortVal)) {
                  return [...edges].sort((a, b) => cmpText(b, a));
                }
                if (
                  ["low-high", "low→high", "low to high", "l-h"].includes(
                    sortVal
                  )
                ) {
                  return [...edges].sort(cmpNumAsc);
                }
                if (
                  ["high-low", "high→low", "high to low", "h-l"].includes(
                    sortVal
                  )
                ) {
                  return [...edges].sort(cmpNumDesc);
                }

                // Fallback → just return original data
                return edges;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "filter",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "_switch",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "sort",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.radioGroup2.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "popover2.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "radioGroup2.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => "A-Z"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    product: usePlasmicDataOp(() => {
      return {
        sourceId: "kipZkDNi8dCzZdLA5QF7Pw",
        opId: "28e16ad6-fef3-4913-a0e4-bfea20b3247d",
        userArgs: {},
        cacheKey: `plasmic.$.28e16ad6-fef3-4913-a0e4-bfea20b3247d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_library_tailwind_3_4_colors,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["graphqlQuery"] = false
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "kipZkDNi8dCzZdLA5QF7Pw",
                        opId: "28e16ad6-fef3-4913-a0e4-bfea20b3247d",
                        userArgs: {},
                        cacheKey: null,
                        invalidatedKeys: null,
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["graphqlQuery"] != null &&
                typeof $steps["graphqlQuery"] === "object" &&
                typeof $steps["graphqlQuery"].then === "function"
              ) {
                $steps["graphqlQuery"] = await $steps["graphqlQuery"];
              }

              $steps["updateData"] = false
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["data"]
                      },
                      operation: 0,
                      value: (() => {
                        const edges =
                          $steps.graphqlQuery?.data?.response?.data?.Items
                            ?.edges ?? [];
                        const sortVal = String($state.sort ?? "")
                          .trim()
                          .toLowerCase();
                        const nameOf = e => String(e?.node?.item_name ?? "");
                        const ptsOf = e => {
                          const v = Number(e?.node?.whg_last_pts);
                          return Number.isFinite(v) ? v : null;
                        };
                        const cmpText = (ea, eb) =>
                          nameOf(ea).localeCompare(nameOf(eb), undefined, {
                            sensitivity: "base"
                          });
                        const cmpNumAsc = (ea, eb) => {
                          const a = ptsOf(ea),
                            b = ptsOf(eb);
                          if (a === null && b === null) return 0;
                          if (a === null) return 1;
                          if (b === null) return -1;
                          return a - b;
                        };
                        const cmpNumDesc = (ea, eb) => {
                          const a = ptsOf(ea),
                            b = ptsOf(eb);
                          if (a === null && b === null) return 0;
                          if (a === null) return 1;
                          if (b === null) return -1;
                          return b - a;
                        };
                        if (!sortVal || sortVal === "missing(1)") {
                          return edges;
                        }
                        if (["a-z", "az", "asc"].includes(sortVal)) {
                          return [...edges].sort(cmpText);
                        }
                        if (["z-a", "za", "desc"].includes(sortVal)) {
                          return [...edges].sort((a, b) => cmpText(b, a));
                        }
                        if (
                          [
                            "low-high",
                            "low\u2192high",
                            "low to high",
                            "l-h"
                          ].includes(sortVal)
                        ) {
                          return [...edges].sort(cmpNumAsc);
                        }
                        if (
                          [
                            "high-low",
                            "high\u2192low",
                            "high to low",
                            "h-l"
                          ].includes(sortVal)
                        ) {
                          return [...edges].sort(cmpNumDesc);
                        }
                        return edges;
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateData"] != null &&
                typeof $steps["updateData"] === "object" &&
                typeof $steps["updateData"].then === "function"
              ) {
                $steps["updateData"] = await $steps["updateData"];
              }
            }}
          />

          <Layout
            data-plasmic-name={"layout"}
            data-plasmic-override={overrides.layout}
            className={classNames("__wab_instance", sty.layout)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__q5Cec)}>
              <div className={classNames(projectcss.all, sty.freeBox__jaHoc)}>
                <div className={classNames(projectcss.all, sty.freeBox__rT0Fa)}>
                  <AtomFilters
                    className={classNames(
                      "__wab_instance",
                      sty.atomFilters__aSnnC
                    )}
                    icon={(() => {
                      try {
                        return (() => {
                          switch ($state.radioGroup2.value) {
                            case "Low-High":
                              return "s-up";
                            case "High-Low":
                              return "s-down";
                            case "A-Z":
                              return "s-up";
                            case "Z-A":
                              return "s-down";
                            default:
                              return "sort";
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updatePopover2IsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["popover2", "isOpen"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePopover2IsOpen"] != null &&
                        typeof $steps["updatePopover2IsOpen"] === "object" &&
                        typeof $steps["updatePopover2IsOpen"].then ===
                          "function"
                      ) {
                        $steps["updatePopover2IsOpen"] = await $steps[
                          "updatePopover2IsOpen"
                        ];
                      }
                    }}
                    select={true}
                    value={(() => {
                      try {
                        return $state.radioGroup2.value;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rtZeB)}
                    >
                      <Popover
                        data-plasmic-name={"popover2"}
                        data-plasmic-override={overrides.popover2}
                        className={classNames("__wab_instance", sty.popover2)}
                        content={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__unyi8
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updatePopoverIsOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["popover2", "isOpen"]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePopoverIsOpen"] != null &&
                                typeof $steps["updatePopoverIsOpen"] ===
                                  "object" &&
                                typeof $steps["updatePopoverIsOpen"].then ===
                                  "function"
                              ) {
                                $steps["updatePopoverIsOpen"] = await $steps[
                                  "updatePopoverIsOpen"
                                ];
                              }
                            }}
                          >
                            <RadioGroup
                              data-plasmic-name={"radioGroup2"}
                              data-plasmic-override={overrides.radioGroup2}
                              className={classNames(
                                "__wab_instance",
                                sty.radioGroup2
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___106ZK
                                  )}
                                >
                                  {"Sort"}
                                </div>
                              }
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "radioGroup2",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              options={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__egB
                                  )}
                                >
                                  <Radio
                                    className={classNames(
                                      "__wab_instance",
                                      sty.radio__x3XXj
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___2C0Ey
                                        )}
                                      >
                                        {hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "Product name A\u2013Z"
                                          : "A\u2013Z Ascending"}
                                      </div>
                                    }
                                    value={"A-Z"}
                                  />

                                  <Radio
                                    className={classNames(
                                      "__wab_instance",
                                      sty.radio__nV1I9
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__royY5
                                        )}
                                      >
                                        {hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "Product Name Z\u2013A"
                                          : "Z\u2013A Descending"}
                                      </div>
                                    }
                                    value={"Z-A"}
                                  />

                                  <Radio
                                    className={classNames(
                                      "__wab_instance",
                                      sty.radio__wru4B
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__qB3Bf
                                        )}
                                      >
                                        {hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "(PTS) Low \u2192 High"
                                          : "Low \u2192 High (PTS)"}
                                      </div>
                                    }
                                    value={"Low-High"}
                                  />

                                  <Radio
                                    className={classNames(
                                      "__wab_instance",
                                      sty.radio__lT27M
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___27Fcq
                                        )}
                                      >
                                        {hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "(PTS) High \u2192 Low"
                                          : "High \u2192 Low (PTS)"}
                                      </div>
                                    }
                                    value={"High-Low"}
                                  />

                                  <Radio
                                    className={classNames(
                                      "__wab_instance",
                                      sty.radio__w5Ux8
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__kaDdg
                                        )}
                                      >
                                        {"Clear Sort"}
                                      </div>
                                    }
                                    value={``}
                                  />
                                </div>
                              }
                              showDescription={false}
                              showLabel={false}
                              value={generateStateValueProp($state, [
                                "radioGroup2",
                                "value"
                              ])}
                            />
                          </div>
                        }
                        isOpen={generateStateValueProp($state, [
                          "popover2",
                          "isOpen"
                        ])}
                        offset={1}
                        onOpenChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "popover2",
                            "isOpen"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        shouldFlip={true}
                        trigger={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xTftE
                            )}
                          >
                            {""}
                          </div>
                        }
                      />
                    </div>
                  </AtomFilters>
                  <AtomFilters
                    children={null}
                    className={classNames(
                      "__wab_instance",
                      sty.atomFilters__p4YH8
                    )}
                    icon={(() => {
                      try {
                        return $state.toggle ? "grid" : "list";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    name={"View"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateToggle"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["toggle"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateToggle"] != null &&
                        typeof $steps["updateToggle"] === "object" &&
                        typeof $steps["updateToggle"].then === "function"
                      ) {
                        $steps["updateToggle"] = await $steps["updateToggle"];
                      }
                    }}
                    value={``}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__ngz0S)}>
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    endIcon={
                      <CheckSvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    }
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async event => {
                        const $steps = {};

                        $steps["updateFilter"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["filter"]
                                },
                                operation: 0,
                                value: (() => {
                                  const input =
                                    $state.textInput.value?.trim() ?? "";
                                  return input.length >= 2 ? input : "";
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFilter"] != null &&
                          typeof $steps["updateFilter"] === "object" &&
                          typeof $steps["updateFilter"].then === "function"
                        ) {
                          $steps["updateFilter"] = await $steps["updateFilter"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Enter the Product Name"
                        : undefined
                    }
                    showStartIcon={true}
                    value={
                      generateStateValueProp($state, ["textInput", "value"]) ??
                      ""
                    }
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__t13M)}>
                <LoadingBoundary
                  data-plasmic-name={"loadingBoundary"}
                  data-plasmic-override={overrides.loadingBoundary}
                  loadingState={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ogcj
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                >
                  <DataCtxReader__>
                    {$ctx =>
                      (_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return (() => {
                              const edges = $state.data ?? [];
                              const nodes = edges.map(x => x.node);
                              const norm = s =>
                                String(s ?? "")
                                  .trim()
                                  .toLowerCase();
                              const fmt = v => {
                                const num = Number(v);
                                if (!Number.isFinite(num)) return v;
                                return Math.round(num * 100) / 100;
                              };
                              const formattedNodes = nodes.map(n => ({
                                ...n,
                                whg_last_mrp: fmt(n.whg_last_mrp),
                                whg_last_ptr: fmt(n.whg_last_ptr),
                                whg_last_pts: fmt(n.whg_last_pts)
                              }));
                              const filterVal = norm($state.filter);
                              if (!filterVal) return formattedNodes;
                              return formattedNodes.filter(n =>
                                norm(n?.item_name).includes(filterVal)
                              );
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <MolProdCards
                            data-plasmic-name={"molProdCards"}
                            data-plasmic-override={overrides.molProdCards}
                            brand={(() => {
                              try {
                                return currentItem.brand__name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            className={classNames(
                              "__wab_instance",
                              sty.molProdCards
                            )}
                            items={(() => {
                              try {
                                return currentItem.item_name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            key={currentIndex}
                            mobile={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? (() => {
                                    try {
                                      return $state.toggle;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                : undefined
                            }
                            mrp={(() => {
                              try {
                                return currentItem.whg_last_mrp;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return 120;
                                }
                                throw e;
                              }
                            })()}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateItems"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["items"]
                                      },
                                      operation: 0,
                                      value: currentItem.item_name
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateItems"] != null &&
                                typeof $steps["updateItems"] === "object" &&
                                typeof $steps["updateItems"].then === "function"
                              ) {
                                $steps["updateItems"] = await $steps[
                                  "updateItems"
                                ];
                              }

                              $steps["updateItems2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/product_item/${(() => {
                                        try {
                                          return $ctx.fn.encodeURIComponent(
                                            $state.items
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateItems2"] != null &&
                                typeof $steps["updateItems2"] === "object" &&
                                typeof $steps["updateItems2"].then ===
                                  "function"
                              ) {
                                $steps["updateItems2"] = await $steps[
                                  "updateItems2"
                                ];
                              }
                            }}
                            ptr={(() => {
                              try {
                                return currentItem.whg_last_ptr;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return 100;
                                }
                                throw e;
                              }
                            })()}
                            pts={(() => {
                              try {
                                return currentItem.whg_last_pts;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return 80;
                                }
                                throw e;
                              }
                            })()}
                            squar={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? undefined
                                : (() => {
                                    try {
                                      return $state.toggle;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "squar";
                                      }
                                      throw e;
                                    }
                                  })()
                            }
                          />
                        );
                      })
                    }
                  </DataCtxReader__>
                </LoadingBoundary>
              </div>
            </div>
          </Layout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "layout",
    "popover2",
    "radioGroup2",
    "textInput",
    "svg",
    "loadingBoundary",
    "molProdCards"
  ],
  sideEffect: ["sideEffect"],
  layout: [
    "layout",
    "popover2",
    "radioGroup2",
    "textInput",
    "svg",
    "loadingBoundary",
    "molProdCards"
  ],
  popover2: ["popover2", "radioGroup2"],
  radioGroup2: ["radioGroup2"],
  textInput: ["textInput", "svg"],
  svg: ["svg"],
  loadingBoundary: ["loadingBoundary", "molProdCards"],
  molProdCards: ["molProdCards"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  layout: typeof Layout;
  popover2: typeof Popover;
  radioGroup2: typeof RadioGroup;
  textInput: typeof TextInput;
  svg: "svg";
  loadingBoundary: typeof LoadingBoundary;
  molProdCards: typeof MolProdCards;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProduct__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProduct__VariantsArgs;
    args?: PlasmicProduct__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProduct__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProduct__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProduct__ArgProps,
          internalVariantPropNames: PlasmicProduct__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProduct__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProduct";
  } else {
    func.displayName = `PlasmicProduct.${nodeName}`;
  }
  return func;
}

export const PlasmicProduct = Object.assign(
  // Top-level PlasmicProduct renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    layout: makeNodeComponent("layout"),
    popover2: makeNodeComponent("popover2"),
    radioGroup2: makeNodeComponent("radioGroup2"),
    textInput: makeNodeComponent("textInput"),
    svg: makeNodeComponent("svg"),
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    molProdCards: makeNodeComponent("molProdCards"),

    // Metadata about props expected for PlasmicProduct
    internalVariantProps: PlasmicProduct__VariantProps,
    internalArgProps: PlasmicProduct__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProduct;
/* prettier-ignore-end */
