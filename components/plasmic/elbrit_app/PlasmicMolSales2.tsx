/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: TKeZbwwAX_2f

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdProgress } from "@plasmicpkgs/antd5/skinny/registerProgress";
import Label2 from "../../Label2"; // plasmic-import: 5wu-f2dIhZng/component
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicMolSales2.module.css"; // plasmic-import: TKeZbwwAX_2f/css

createPlasmicElementProxy;

export type PlasmicMolSales2__VariantMembers = {};
export type PlasmicMolSales2__VariantsArgs = {};
type VariantPropType = keyof PlasmicMolSales2__VariantsArgs;
export const PlasmicMolSales2__VariantProps = new Array<VariantPropType>();

export type PlasmicMolSales2__ArgsType = {
  team?: string;
  main?: any;
  offer?: any;
  sales?: any;
  order?: any;
  cn?: any;
  target?: number;
  progress?: any;
};
type ArgPropType = keyof PlasmicMolSales2__ArgsType;
export const PlasmicMolSales2__ArgProps = new Array<ArgPropType>(
  "team",
  "main",
  "offer",
  "sales",
  "order",
  "cn",
  "target",
  "progress"
);

export type PlasmicMolSales2__OverridesType = {
  root?: Flex__<"section">;
  progress?: Flex__<typeof AntdProgress>;
  tabs?: Flex__<typeof AntdTabs>;
  tabs2?: Flex__<typeof AntdTabs>;
};

export interface DefaultMolSales2Props {
  team?: string;
  main?: any;
  offer?: any;
  sales?: any;
  order?: any;
  cn?: any;
  target?: number;
  progress?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMolSales2__RenderFunc(props: {
  variants: PlasmicMolSales2__VariantsArgs;
  args: PlasmicMolSales2__ArgsType;
  overrides: PlasmicMolSales2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          team: "Aura & Proxima Coimbatore",
          main: { Sales: 0, Returns: 0, Offers: 0 },
          offer: { RD: 0, "Product Offer": 0, "Price Offer": 0, Claim: 0 },
          sales: { Target: 0, Incentive: 0, Gross: 0, Net: 0 },
          order: [
            { s: "sales", n: "SalesData", c: "#52c41a" },
            { s: "offer", n: "OfferData", c: "#ff4d4f" },
            { s: "cn", n: "CNData", c: "#eab308" }
          ],
          cn: { CN: 0, Return: 0, Expiry: 0, Breakage: 0 },
          target: 10000000,
          progress: { "sales%": 0, "cn%": 0, "offers%": 0 }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "tabs2.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? "2" : "3"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_library_tailwind_3_4_colors,
        styleTokensClassNames_library_tailwind_3_4_number_tokens,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__lyZqt)}>
        <AntdProgress
          data-plasmic-name={"progress"}
          data-plasmic-override={overrides.progress}
          className={classNames("__wab_instance", sty.progress)}
          infoFormat={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? (percent, successPercent) => {
                  return 100;
                }
              : (percent, successPercent) => {
                  return 100;
                }
          }
          percent={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? (() => {
                  try {
                    return $props.progress["sales%"];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return 100;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return $props.progress["sales%"];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
          }
          size={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "default"
              : undefined
          }
          status={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "active"
              : "success"
          }
          stepColors={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? (() => {
                  const __composite = [
                    { color: null },
                    { color: null },
                    { color: null }
                  ];
                  __composite["0"]["color"] = "var(--token-S_8JUp_UmCy6)";
                  __composite["1"]["color"] = "var(--token-IWP67w-wUXtW)";
                  __composite["2"]["color"] = "var(--token-C_qy35rsoZeQ)";
                  return __composite;
                })()
              : undefined
          }
          steps={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? (() => {
                  try {
                    return undefined;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return 10;
                    }
                    throw e;
                  }
                })()
              : undefined
          }
          strokeColor={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
                ? "#86EFAC"
                : undefined
              : true
              ? "var(--antd-colorSuccessText)"
              : undefined
          }
          strokeLinecap={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "round"
              : "round"
          }
          successPercent={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? (() => {
                  try {
                    return $props.progress["cn%"];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return 10;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return $props.progress["cn%"];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
          }
          successStrokeColor={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
                ? "#7F1D1D"
                : undefined
              : undefined
          }
          trailColor={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
                ? "#D1D5DB"
                : undefined
              : true
              ? "#D1D5DB"
              : undefined
          }
          type={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "line" : "line"
          }
        />

        <div className={classNames(projectcss.all, sty.freeBox__zPaOc)}>
          <Label2 className={classNames("__wab_instance", sty.label2__mVjDg)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fcAbk
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.team;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Aura & Proxima Coimbatore";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ) : (
                "Aura & Proxima Coimbatore"
              )}
            </div>
          </Label2>
          <Label2 className={classNames("__wab_instance", sty.label2__l7AZt)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oAcLk
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.target;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "2cr";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ) : (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.target;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "2cr";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              )}
            </div>
          </Label2>
        </div>
        <AntdTabs
          data-plasmic-name={"tabs"}
          data-plasmic-override={overrides.tabs}
          activeKey={generateStateValueProp($state, ["tabs", "activeKey"])}
          animateTabBar={true}
          animateTabContent={true}
          animated={true}
          centered={
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          }
          className={classNames("__wab_instance", sty.tabs)}
          defaultActiveKey={"0"}
          destroyInactiveTabPane={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
              : undefined
          }
          items={(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $props.order;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <AntdTabItem
                className={classNames("__wab_instance", sty.tabItem__eS87T)}
                disabled={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? false
                    : undefined
                }
                key={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return currentIndex;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return currentIndex;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                }
                label={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sRwPw)}
                    style={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? (() => {
                            try {
                              return { background: currentItem.c };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return { background: currentItem.c };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                    }
                    tabIndex={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? (() => {
                            try {
                              return currentIndex;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        : undefined
                    }
                  >
                    <Label2
                      className={classNames(
                        "__wab_instance",
                        sty.label2__d4Lgs
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__m65X1
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.n;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Sales";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.n;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Sales";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    </Label2>
                    <Label2
                      className={classNames(
                        "__wab_instance",
                        sty.label2__rVs0J
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5EyDg
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $props.main.Sales;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Label";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          "Label"
                        )}
                      </div>
                    </Label2>
                  </div>
                }
              >
                <div className={classNames(projectcss.all, sty.freeBox__dO6I9)}>
                  <Label2
                    className={classNames("__wab_instance", sty.label2__tMxua)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ldT48
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.n;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Offer";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.n;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Offer";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                  </Label2>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return Object.entries($props[currentItem.s]);
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_1, __plasmic_idx_1) => {
                    const currentItem = __plasmic_item_1;
                    const currentIndex = __plasmic_idx_1;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__uFCnH
                        )}
                        key={currentIndex}
                      >
                        <Label2
                          className={classNames(
                            "__wab_instance",
                            sty.label2__uOczk
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__l0Wl6
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem[0];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "RD";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem[0];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "RD";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </Label2>
                        <Label2
                          className={classNames(
                            "__wab_instance",
                            sty.label2__sDl0W
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__amzIu
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem[1];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Label";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem[1];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Label";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </Label2>
                      </div>
                    );
                  })}
                </div>
              </AntdTabItem>
            );
          })}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["tabs", "activeKey"]).apply(
              null,
              eventArgs
            );
          }}
          sticky={false}
          tabBarBackground={"#FFF"}
          tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
          tabsScopeClassName={sty["tabs__tabs"]}
        />

        <AntdTabs
          data-plasmic-name={"tabs2"}
          data-plasmic-override={overrides.tabs2}
          activeKey={generateStateValueProp($state, ["tabs2", "activeKey"])}
          animateTabBar={true}
          animateTabContent={true}
          animated={true}
          centered={
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          }
          className={classNames("__wab_instance", sty.tabs2)}
          defaultActiveKey={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "2" : "3"
          }
          items={
            <React.Fragment>
              <AntdTabItem
                className={classNames("__wab_instance", sty.tabItem___4J1N0)}
                disabled={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? false
                    : undefined
                }
                key={"1"}
                label={
                  <React.Fragment>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2PsCe
                      )}
                    >
                      {"First Item"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1FKaY
                      )}
                    >
                      <Label2
                        className={classNames(
                          "__wab_instance",
                          sty.label2__hfp9W
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iRTvU
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $props.order[0].n;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Sales";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $props.order[0].n;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Sales";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          )}
                        </div>
                      </Label2>
                      <Label2
                        className={classNames(
                          "__wab_instance",
                          sty.label2__wge7G
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__r2Cnn
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $props.main.Sales;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Label";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            "Label"
                          )}
                        </div>
                      </Label2>
                    </div>
                  </React.Fragment>
                }
              >
                <div className={classNames(projectcss.all, sty.freeBox__jS7H)}>
                  <Label2
                    className={classNames("__wab_instance", sty.label2___55QLj)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rmZy
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $props.order[0].n;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Offer";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $props.order[0].n;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Offer";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                  </Label2>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return Object.entries($props[$props.order[0].s]);
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rnNc4
                        )}
                        key={currentIndex}
                      >
                        <Label2
                          className={classNames(
                            "__wab_instance",
                            sty.label2__hshbo
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dv8Mh
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem[0];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "RD";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem[0];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "RD";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </Label2>
                        <Label2
                          className={classNames(
                            "__wab_instance",
                            sty.label2__xBebn
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0HcfL
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem[1];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Label";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem[1];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Label";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </Label2>
                      </div>
                    );
                  })}
                </div>
              </AntdTabItem>
              <AntdTabItem
                className={classNames("__wab_instance", sty.tabItem__tCksm)}
                key={"2"}
                label={
                  <React.Fragment>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lLoxW
                      )}
                    >
                      {"Tab Label 2"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pFxAl)}
                    >
                      <Label2
                        className={classNames(
                          "__wab_instance",
                          sty.label2__jVwW
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wGotO
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $props.order[1].n;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Sales";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $props.order[1].n;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Sales";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          )}
                        </div>
                      </Label2>
                      <Label2
                        className={classNames(
                          "__wab_instance",
                          sty.label2__qffhV
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ypgUu
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $props.main.Sales;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Label";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            "Label"
                          )}
                        </div>
                      </Label2>
                    </div>
                  </React.Fragment>
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ucNZe
                  )}
                >
                  {"Tab Children 2"}
                </div>
              </AntdTabItem>
              <AntdTabItem
                className={classNames("__wab_instance", sty.tabItem__yiAnN)}
                key={"3"}
                label={
                  <React.Fragment>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__itUtK
                      )}
                    >
                      {"Tab Label 3"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5JfIm
                      )}
                    >
                      <Label2
                        className={classNames(
                          "__wab_instance",
                          sty.label2___81Wht
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4HRaq
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $props.order[2].n;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Sales";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $props.order[2].n;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Sales";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          )}
                        </div>
                      </Label2>
                      <Label2
                        className={classNames(
                          "__wab_instance",
                          sty.label2__asvxK
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__puRjR
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $props.main.Sales;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Label";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            "Label"
                          )}
                        </div>
                      </Label2>
                    </div>
                  </React.Fragment>
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kcP0B
                  )}
                >
                  {"Tab Children 3"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__evxOv)}>
                  <Label2
                    className={classNames("__wab_instance", sty.label2__z4F2N)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8QLpk
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $props.order[1].n;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Offer";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $props.order[0].n;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Offer";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                  </Label2>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return Object.entries($props[$props.order[2].s]);
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pVaWp
                        )}
                        key={currentIndex}
                      >
                        <Label2
                          className={classNames(
                            "__wab_instance",
                            sty.label2__nEgvi
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__l6Vca
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem[0];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "RD";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem[0];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "RD";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </Label2>
                        <Label2
                          className={classNames(
                            "__wab_instance",
                            sty.label2__ucH9X
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___1AuAj
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem[1];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Label";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem[1];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Label";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </Label2>
                      </div>
                    );
                  })}
                </div>
              </AntdTabItem>
            </React.Fragment>
          }
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["tabs2", "activeKey"]).apply(
              null,
              eventArgs
            );
          }}
          sticky={false}
          tabBarBackground={"#FFF"}
          tabsDropdownScopeClassName={sty["tabs2__tabsDropdown"]}
          tabsScopeClassName={sty["tabs2__tabs"]}
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__jWhNk)}>
        <Label2 className={classNames("__wab_instance", sty.label2___0Sfcr)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__uwFc3
            )}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly") ? (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.order[0].n;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Offer";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.order[0].n;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Offer";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            )}
          </div>
        </Label2>
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return Object.entries($props[$props.order[0].s]);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(projectcss.all, sty.freeBox__zNq81)}
              key={currentIndex}
            >
              <Label2
                className={classNames("__wab_instance", sty.label2__a3Neo)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oH1L8
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem[0];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "RD";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    "RD"
                  )}
                </div>
              </Label2>
              <Label2
                className={classNames("__wab_instance", sty.label2__zTAss)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zqNx
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem[1];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Label";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    "Label"
                  )}
                </div>
              </Label2>
            </div>
          );
        })}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___5Ol)}>
        <Label2 className={classNames("__wab_instance", sty.label2__c6Qxc)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lynus
            )}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly") ? (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.order[0].n;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Offer";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.order[1].n;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Offer";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            )}
          </div>
        </Label2>
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return Object.entries($props[$props.order[0].s]);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(projectcss.all, sty.freeBox___6L8I)}
              key={currentIndex}
            >
              <Label2
                className={classNames("__wab_instance", sty.label2__h5TO9)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uLrww
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem[0];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "RD";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    "RD"
                  )}
                </div>
              </Label2>
              <Label2
                className={classNames("__wab_instance", sty.label2__fXmb5)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__r9JR7
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem[1];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Label";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    "Label"
                  )}
                </div>
              </Label2>
            </div>
          );
        })}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__b7Hk2)}>
        <Label2 className={classNames("__wab_instance", sty.label2__udFan)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lc3NC
            )}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly") ? (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.order[0].n;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Offer";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.order[0].n;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Offer";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            )}
          </div>
        </Label2>
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return Object.entries($props[$props.order[0].s]);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(projectcss.all, sty.freeBox__nirOs)}
              key={currentIndex}
            >
              <Label2
                className={classNames("__wab_instance", sty.label2__ht3Q)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eXTh0
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem[0];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "RD";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    "RD"
                  )}
                </div>
              </Label2>
              <Label2
                className={classNames("__wab_instance", sty.label2__ckct9)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__e52G7
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem[1];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Label";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    "Label"
                  )}
                </div>
              </Label2>
            </div>
          );
        })}
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "progress", "tabs", "tabs2"],
  progress: ["progress"],
  tabs: ["tabs"],
  tabs2: ["tabs2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  progress: typeof AntdProgress;
  tabs: typeof AntdTabs;
  tabs2: typeof AntdTabs;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMolSales2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMolSales2__VariantsArgs;
    args?: PlasmicMolSales2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMolSales2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMolSales2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMolSales2__ArgProps,
          internalVariantPropNames: PlasmicMolSales2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMolSales2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMolSales2";
  } else {
    func.displayName = `PlasmicMolSales2.${nodeName}`;
  }
  return func;
}

export const PlasmicMolSales2 = Object.assign(
  // Top-level PlasmicMolSales2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    progress: makeNodeComponent("progress"),
    tabs: makeNodeComponent("tabs"),
    tabs2: makeNodeComponent("tabs2"),

    // Metadata about props expected for PlasmicMolSales2
    internalVariantProps: PlasmicMolSales2__VariantProps,
    internalArgProps: PlasmicMolSales2__ArgProps
  }
);

export default PlasmicMolSales2;
/* prettier-ignore-end */
