/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: o0hwj7uH2g2-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Layout from "../../Layout"; // plasmic-import: pAY-hwRYSgy5/component
import { AntdDateRangePicker } from "@plasmicpkgs/antd5/skinny/registerDateRangePicker";
import { dateRangePickerHelpers as AntdDateRangePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDateRangePicker";
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import Button from "../../Button"; // plasmic-import: lBHNzts6tFyj/component
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { PrimeDataTable } from "../../PrimeDataTable"; // plasmic-import: BYlkqz28tT8N/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicReports.module.css"; // plasmic-import: o0hwj7uH2g2-/css

import CheckSvgIcon from "../plasmic_tabs/icons/PlasmicIcon__CheckSvg"; // plasmic-import: zq2s7N0xWucT/icon
import IconIcon from "../plasmic_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: 8K40faRNhuCj/icon

createPlasmicElementProxy;

export type PlasmicReports__VariantMembers = {};
export type PlasmicReports__VariantsArgs = {};
type VariantPropType = keyof PlasmicReports__VariantsArgs;
export const PlasmicReports__VariantProps = new Array<VariantPropType>();

export type PlasmicReports__ArgsType = {};
type ArgPropType = keyof PlasmicReports__ArgsType;
export const PlasmicReports__ArgProps = new Array<ArgPropType>();

export type PlasmicReports__OverridesType = {
  root?: Flex__<"div">;
  layout?: Flex__<typeof Layout>;
  dateRangePicker?: Flex__<typeof AntdDateRangePicker>;
  tabsContainer?: Flex__<typeof TabsContainer>;
  tabUnderline?: Flex__<typeof TabUnderline>;
  table?: Flex__<typeof RichTable>;
  table2?: Flex__<typeof RichTable>;
  salesTeam?: Flex__<typeof AntdSelect>;
  serviceCode?: Flex__<typeof AntdSelect>;
  primeReactDataTable?: Flex__<typeof PrimeDataTable>;
  table3?: Flex__<typeof RichTable>;
  table4?: Flex__<typeof RichTable>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultReportsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReports__RenderFunc(props: {
  variants: PlasmicReports__VariantsArgs;
  args: PlasmicReports__ArgsType;
  overrides: PlasmicReports__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "hqData",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const data = $queries.hqWise.data.response.data.service;
                let aggregated = data.reduce((acc, item) => {
                  const {
                    hq,
                    salesTeam,
                    serviceCode,
                    serviceName,
                    serviceAmount = 0
                  } = item;
                  if (!hq || !salesTeam || !serviceCode || !serviceName)
                    return acc;
                  const key = `${hq}-${salesTeam}`;
                  if (!acc[key]) {
                    acc[key] = {
                      hq,
                      salesTeam,
                      totalServiceAmount: 0
                    };
                  }
                  acc[key].totalServiceAmount += serviceAmount;
                  if (!acc[key][serviceName]) {
                    acc[key][serviceName] = 0;
                  }
                  acc[key][serviceName] += serviceAmount;
                  return acc;
                }, {});
                return Object.values(aggregated);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "table[].selectedRowKey",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table[].selectedRow",
        type: "private",
        variableType: "object",

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table[].selectedRows",
        type: "private",
        variableType: "array",

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table[].selectedRowKeys",
        type: "private",
        variableType: "array",

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "dateRangePicker.startDate",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "2025-03-01T10:54:55.243Z",

        onMutate: generateOnMutateForSpec(
          "startDate",
          AntdDateRangePicker_Helpers
        )
      },
      {
        path: "dateRangePicker.endDate",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "2025-05-01T12:07:10.591Z",

        onMutate: generateOnMutateForSpec(
          "endDate",
          AntdDateRangePicker_Helpers
        )
      },
      {
        path: "fn",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.fn.flatten(
                $queries.serviceVsSupport.data.response.data
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "table2[].selectedRowKey",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table2[].selectedRow",
        type: "private",
        variableType: "object",

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table2[].selectedRows",
        type: "private",
        variableType: "array",

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table2[].selectedRowKeys",
        type: "private",
        variableType: "array",

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "table3.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table3.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table3.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table3.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "salesTeam.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "serviceCode.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ["17", "001"]
      },
      {
        path: "table4.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table4.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table4.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table4.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "tabledata",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let sourceData = $queries.serviceVsSupport.data.response.data;

                let BEdata = sourceData.BETeam.map(item => {
                  let k = Object.keys(item).filter(x =>
                    x.includes("employeeBy")
                  );
                  let uk = Object.keys(item).filter(
                    x => !x.includes("employeeBy")
                  );

                  vals = k.reduce((p, y) => {
                    p[y.replace("employeeBy", "")] = item[y]
                      ? item[y]["fullName"]
                      : item[y];
                    return p;
                  }, {});
                  return JSON.parse(
                    JSON.stringify({ ...item, ...vals }, [
                      ...uk,
                      ...Object.keys(vals)
                    ])
                  );
                });

                return { ...sourceData, BETeam: BEdata };
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "serviceSupportVisit",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.fn.flatten(
                {
                  Be: "BEName",
                  Abm: "ABMName",
                  Rbm: "RBMName",
                  Sm: "SMName",
                  Srrbm: "SrRBMName",
                  Dyrbm: "DyRBMName"
                },
                $queries.serviceVsSupport.data.response.data,
                {
                  prefixMap: {
                    employeeBy: null
                  },
                  suffixMap: {
                    _fullName: null
                  }
                }
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    hqWise: usePlasmicDataOp(() => {
      return {
        sourceId: "fd9ij7KB5XdhXScf1JL9tG",
        opId: "ae7253d9-9630-4a3b-b29d-161eed79af64",
        userArgs: {
          variables: [$state.dateRangePicker.endDate]
        },
        cacheKey: `plasmic.$.ae7253d9-9630-4a3b-b29d-161eed79af64.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "xuq4vtFviiVZiJUaPTUnzT",
        opId: "b76659e6-22db-4610-a08c-7d063e5f5f5e",
        userArgs: {},
        cacheKey: `plasmic.$.b76659e6-22db-4610-a08c-7d063e5f5f5e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    serviceVsSupport: usePlasmicDataOp(() => {
      return {
        sourceId: "fd9ij7KB5XdhXScf1JL9tG",
        opId: "a0c9f7a9-71bf-48c2-b56d-af94d7317b36",
        userArgs: {
          variables: [
            $state.dateRangePicker.startDate?.split("T")[0],

            $state.dateRangePicker.endDate?.split("T")[0],

            $state.serviceCode.value
          ]
        },
        cacheKey: `plasmic.$.a0c9f7a9-71bf-48c2-b56d-af94d7317b36.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    serviceCode: usePlasmicDataOp(() => {
      return {
        sourceId: "fd9ij7KB5XdhXScf1JL9tG",
        opId: "c39f9be6-1a1e-4a3d-b055-da1f0ff6395e",
        userArgs: {},
        cacheKey: `plasmic.$.c39f9be6-1a1e-4a3d-b055-da1f0ff6395e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    drCount: usePlasmicDataOp(() => {
      return {
        sourceId: "fd9ij7KB5XdhXScf1JL9tG",
        opId: "75b86bf8-4200-441f-b8a8-fd7d5fbb8ab8",
        userArgs: {
          variables: [
            $state.dateRangePicker.startDate?.split("T")[0],

            (date =>
              new Date(
                new Date(date).getFullYear(),
                new Date(date).getMonth() + 1,
                0
              )
                .toISOString()
                .split("T")[0])($state.dateRangePicker.endDate)
          ]
        },
        cacheKey: `plasmic.$.75b86bf8-4200-441f-b8a8-fd7d5fbb8ab8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    savePivotConfig: usePlasmicDataOp(() => {
      return {
        sourceId: "fd9ij7KB5XdhXScf1JL9tG",
        opId: "99a3a14c-7475-4139-90be-2322494b3b11",
        userArgs: {
          variables: [$ctx.pagePath]
        },
        cacheKey: `plasmic.$.99a3a14c-7475-4139-90be-2322494b3b11.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    loadPivotConfig: usePlasmicDataOp(() => {
      return {
        sourceId: "fd9ij7KB5XdhXScf1JL9tG",
        opId: "4782c2b7-4187-4227-b2d0-be7ebb556152",
        userArgs: {},
        cacheKey: `plasmic.$.4782c2b7-4187-4227-b2d0-be7ebb556152.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_library_tailwind_3_4_colors,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
          onLoad={async event => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return ($state.fn = {
                        summarize:
                          (groupBy = [], timeKeys = [], sumKeys = []) =>
                          (data = []) => {
                            const result = [];
                            const getGroupKey = row =>
                              groupBy.map(k => row?.[k] ?? "").join("||");
                            const getTimeKey = row =>
                              timeKeys.map(k => row?.[k] ?? "").join("||");
                            const map = new Map();
                            data.forEach(row => {
                              const gKey = getGroupKey(row);
                              const tKey = getTimeKey(row);
                              if (!map.has(gKey)) {
                                map.set(gKey, {
                                  ...groupBy.reduce(
                                    (a, k) => ({
                                      ...a,
                                      [k]: row[k]
                                    }),
                                    {}
                                  )
                                });
                              }
                              const entry = map.get(gKey);
                              sumKeys.forEach(k => {
                                entry[k + "_Total"] =
                                  (entry[k + "_Total"] || 0) + (row[k] || 0);
                                if (tKey) {
                                  const colKey = `${tKey}__${k}`;
                                  entry[colKey] =
                                    (entry[colKey] || 0) + (row[k] || 0);
                                }
                              });
                              map.set(gKey, entry);
                            });
                            return Array.from(map.values());
                          },
                        aggregate:
                          (by, mode = "sum") =>
                          data => {
                            if (!Array.isArray(data)) return [];
                            const num = v =>
                              +String(v || "").replace(/,/g, "") || 0;
                            const numericKeys = Object.keys(
                              data[0] || {}
                            ).filter(
                              k =>
                                !by.includes(k) &&
                                data.some(r => !Number.isNaN(num(r[k])))
                            );
                            const grouped = data.reduce((acc, row) => {
                              const key = by.map(k => row[k]).join("__");
                              if (!acc[key]) {
                                acc[key] = Object.fromEntries(
                                  by.map(k => [k, row[k]])
                                );
                                if (mode === "count") {
                                  acc[key]._count = 0;
                                } else {
                                  numericKeys.forEach(f => (acc[key][f] = 0));
                                }
                              }
                              if (mode === "count") {
                                acc[key]._count += 1;
                              } else {
                                numericKeys.forEach(f => {
                                  acc[key][f] += num(row[f]);
                                });
                              }
                              return acc;
                            }, {});
                            return Object.values(grouped);
                          },
                        pivote:
                          (
                            by,
                            keys,
                            values,
                            mode = "sum",
                            ignoreZeros = true
                          ) =>
                          data => {
                            if (!Array.isArray(data)) return [];
                            const singleValue = values.length === 1;
                            const valueName = values[0];
                            const num = v =>
                              +String(v || "").replace(/,/g, "") || 0;
                            const rowKey = r => by.map(k => r[k]).join("__");
                            const colKey = r => keys.map(k => r[k]).join("-");
                            const rows = {},
                              colTotals = {};
                            data.forEach(r => {
                              const rk = rowKey(r),
                                ck = colKey(r);
                              rows[rk] ??= {
                                ...Object.fromEntries(by.map(k => [k, r[k]])),
                                __cols: {},
                                __totals: Object.fromEntries(
                                  values.map(v => [`${v} Total`, 0])
                                )
                              };
                              values.forEach(v => {
                                const val = mode === "count" ? 1 : num(r[v]);
                                const key = singleValue ? ck : `${ck}__${v}`;
                                rows[rk].__cols[key] =
                                  (rows[rk].__cols[key] || 0) + val;
                                rows[rk].__totals[`${v} Total`] += val;
                                colTotals[key] = (colTotals[key] || 0) + val;
                              });
                            });
                            const allCols = Object.keys(colTotals);
                            const activeCols = ignoreZeros
                              ? allCols.filter(c => colTotals[c] > 0)
                              : allCols;
                            return Object.values(rows)
                              .map(r => ({
                                ...Object.fromEntries(by.map(k => [k, r[k]])),
                                ...Object.fromEntries(
                                  activeCols
                                    .filter(k => k in r.__cols)
                                    .map(k => [k, r.__cols[k]])
                                ),
                                ...r.__totals
                              }))
                              .sort((a, b) =>
                                String(a[by[0]]).localeCompare(String(b[by[0]]))
                              );
                          },
                        merge:
                          (by = [], preserve = []) =>
                          (tables = {}) => {
                            const getKey = row =>
                              by.map(k => row?.[k] ?? "").join("||");
                            const preserveKey = preserve.find(k =>
                              by.includes(k)
                            );
                            const preserveCache = {};
                            Object.values(tables)
                              .flat()
                              .forEach(row => {
                                const id = row?.[preserveKey];
                                if (!id) return;
                                preserveCache[id] ??= {};
                                preserve.forEach(field => {
                                  const value = row?.[field];
                                  if (
                                    value !== undefined &&
                                    value !== null &&
                                    value !== "" &&
                                    value !== 0 &&
                                    !preserveCache[id][field]
                                  ) {
                                    preserveCache[id][field] = value;
                                  }
                                });
                              });
                            const mergedMap = Object.values(tables)
                              .flat()
                              .reduce((acc, row) => {
                                const key = getKey(row);
                                const existing = acc[key] || {};
                                const id = row?.[preserveKey];
                                acc[key] = {
                                  ...existing,
                                  ...row
                                };
                                preserve.forEach(field => {
                                  const current = acc[key][field];
                                  if (
                                    (current === undefined ||
                                      current === null ||
                                      current === "" ||
                                      current === 0) &&
                                    id &&
                                    preserveCache[id]?.[field]
                                  ) {
                                    acc[key][field] = preserveCache[id][field];
                                  }
                                });
                                return acc;
                              }, {});
                            return Object.values(mergedMap);
                          }
                      });
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
        >
          <Layout
            data-plasmic-name={"layout"}
            data-plasmic-override={overrides.layout}
            className={classNames("__wab_instance", sty.layout)}
          >
            {(() => {
              const child$Props = {
                allowEmptyStartDate: true,
                className: classNames("__wab_instance", sty.dateRangePicker),
                defaultEndDate: "2025-05-01T12:07:10.591Z",
                defaultStartDate: "2025-03-01T10:54:55.243Z",
                disableStartDate: false,
                endDate: generateStateValueProp($state, [
                  "dateRangePicker",
                  "endDate"
                ]),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "startDate",
                    ["dateRangePicker", "startDate"],
                    AntdDateRangePicker_Helpers
                  ).apply(null, eventArgs);
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "endDate",
                    ["dateRangePicker", "endDate"],
                    AntdDateRangePicker_Helpers
                  ).apply(null, eventArgs);
                },
                picker: "month",
                popupClassName: classNames({
                  [sty["pcls_P0cVhrEK0v_u"]]: true
                }),
                popupScopeClassName:
                  sty["dateRangePicker__dateRangePickerPopup"],
                presets: (() => {
                  const __composite = [
                    {},
                    { label: null, startDate: null, endDate: null }
                  ];
                  __composite["1"]["label"] = "current FY";
                  __composite["1"]["startDate"] = "2025-04-01T08:29:00.000Z";
                  __composite["1"]["endDate"] = "2026-03-31T08:29:55.188Z";
                  return __composite;
                })(),

                size: "middle",
                startDate: generateStateValueProp($state, [
                  "dateRangePicker",
                  "startDate"
                ])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "startDate",
                    plasmicStateName: "dateRangePicker.startDate"
                  },
                  {
                    name: "endDate",
                    plasmicStateName: "dateRangePicker.endDate"
                  }
                ],
                [],
                AntdDateRangePicker_Helpers ?? {},
                child$Props
              );

              return (
                <AntdDateRangePicker
                  data-plasmic-name={"dateRangePicker"}
                  data-plasmic-override={overrides.dateRangePicker}
                  {...child$Props}
                />
              );
            })()}
            <TabsContainer
              data-plasmic-name={"tabsContainer"}
              data-plasmic-override={overrides.tabsContainer}
              initialKey={"tab"}
              mountMode={"mountLazily"}
              previewAll={false}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uy7R1)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qE35D)}
                    >
                      <TabButton
                        className={classNames(
                          "__wab_instance",
                          sty.tabButton__lpebi
                        )}
                        tabKey={"tab1"}
                      >
                        <Button>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nmFsN
                            )}
                          >
                            {"Hq Report"}
                          </div>
                        </Button>
                      </TabButton>
                      <TabButton
                        className={classNames(
                          "__wab_instance",
                          sty.tabButton__oijtq
                        )}
                        tabKey={"tab2"}
                      >
                        <Button>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yB5VV
                            )}
                          >
                            {"Recuring Service vs support"}
                          </div>
                        </Button>
                      </TabButton>
                      <TabButton
                        className={classNames(
                          "__wab_instance",
                          sty.tabButton__pzk0L
                        )}
                        tabKey={"drCount"}
                      >
                        <Button>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dzpRx
                            )}
                          >
                            {"Prescriber Count"}
                          </div>
                        </Button>
                      </TabButton>
                      <TabUnderline
                        data-plasmic-name={"tabUnderline"}
                        data-plasmic-override={overrides.tabUnderline}
                        className={classNames(
                          "__wab_instance",
                          sty.tabUnderline
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qeTwp)}
                    >
                      <TabContent
                        className={classNames(
                          "__wab_instance",
                          sty.tabContent__trfyF
                        )}
                        tabKey={"tab1"}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $queries.query.data;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__d2BFy
                              )}
                              key={currentIndex}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___3T458
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.name;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.table
                                  ),
                                  data: (() => {
                                    try {
                                      return $state.fn
                                        .pivote(
                                          ["hq", "salesTeam"],
                                          ["serviceCode", "serviceName"],
                                          ["serviceAmount"],
                                          "sum",
                                          false
                                        )(
                                          $queries.hqWise.data.response.data
                                            .service
                                        )
                                        .filter(
                                          x => x.salesTeam == currentItem.name
                                        );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return (() => {
                                          try {
                                            return $queries.hqWise;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })();
                                      }
                                      throw e;
                                    }
                                  })(),
                                  defaultSize: "middle",
                                  fields: [
                                    { key: "hq", fieldId: "hq" },
                                    { key: "salesTeam", fieldId: "salesTeam" },
                                    { key: "Total", fieldId: "Total" },
                                    {
                                      key: "totalServiceAmount",
                                      fieldId: "totalServiceAmount"
                                    },
                                    { key: "Travel", fieldId: "Travel" },
                                    { key: "RD 3", fieldId: "RD 3" },
                                    { key: "Cheque", fieldId: "Cheque" },
                                    {
                                      key: "cash back activity",
                                      fieldId: "cash back activity"
                                    },
                                    { key: "Gold", fieldId: "Gold" },
                                    { key: "Cash", fieldId: "Cash" },
                                    {
                                      key: "18-cash back activity",
                                      fieldId: "18-cash back activity"
                                    },
                                    {
                                      key: "001-Cheque",
                                      fieldId: "001-Cheque"
                                    },
                                    { key: "3-Travel", fieldId: "3-Travel" },
                                    { key: "22-RD 3", fieldId: "22-RD 3" },
                                    { key: "13-Cash", fieldId: "13-Cash" },
                                    { key: "2-Gold", fieldId: "2-Gold" }
                                  ],
                                  hideColumnPicker: true,
                                  hideDensity: true,
                                  hideExports: false,
                                  hideSearch: true,
                                  onRowSelectionChanged: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "selectedRowKey",
                                      [
                                        "table",
                                        __plasmic_idx_0,
                                        "selectedRowKey"
                                      ],
                                      RichTable_Helpers
                                    ).apply(null, eventArgs);
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "selectedRow",
                                      ["table", __plasmic_idx_0, "selectedRow"],
                                      RichTable_Helpers
                                    ).apply(null, eventArgs);
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "selectedRows",
                                      [
                                        "table",
                                        __plasmic_idx_0,
                                        "selectedRows"
                                      ],
                                      RichTable_Helpers
                                    ).apply(null, eventArgs);
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "selectedRowKeys",
                                      [
                                        "table",
                                        __plasmic_idx_0,
                                        "selectedRowKeys"
                                      ],
                                      RichTable_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  pagination: false,
                                  scopeClassName: sty["table__instance"],
                                  selectedRowKey: generateStateValueProp(
                                    $state,
                                    ["table", __plasmic_idx_0, "selectedRowKey"]
                                  ),
                                  selectedRowKeys: generateStateValueProp(
                                    $state,
                                    [
                                      "table",
                                      __plasmic_idx_0,
                                      "selectedRowKeys"
                                    ]
                                  ),
                                  themeResetClassName: classNames(
                                    projectcss.root_reset,
                                    projectcss.root_reset_tags,
                                    projectcss.plasmic_default_styles,
                                    projectcss.plasmic_mixins,
                                    styleTokensClassNames,
                                    styleTokensClassNames_antd_5_hostless,
                                    styleTokensClassNames_library_tailwind_3_4_colors,
                                    styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                    styleTokensClassNames_plasmic_rich_components
                                  )
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "selectedRowKey",
                                      plasmicStateName: "table[].selectedRowKey"
                                    },
                                    {
                                      name: "selectedRow",
                                      plasmicStateName: "table[].selectedRow"
                                    },
                                    {
                                      name: "selectedRows",
                                      plasmicStateName: "table[].selectedRows"
                                    },
                                    {
                                      name: "selectedRowKeys",
                                      plasmicStateName:
                                        "table[].selectedRowKeys"
                                    }
                                  ],
                                  [__plasmic_idx_0],
                                  RichTable_Helpers ?? {},
                                  child$Props
                                );
                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "table[].selectedRowKey",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    },
                                    {
                                      name: "table[].selectedRowKeys",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <RichTable
                                    data-plasmic-name={"table"}
                                    data-plasmic-override={overrides.table}
                                    {...child$Props}
                                  />
                                );
                              })()}
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.table2
                                  ),
                                  data: (() => {
                                    try {
                                      return $state.fn
                                        .summarize(
                                          ["hq"],
                                          ["salesTeam"],
                                          ["serviceCode", "serviceName"],
                                          "serviceAmount",
                                          "sum"
                                        )(
                                          $queries.hqWise.data.response.data
                                            .service
                                        )
                                        .filter(
                                          x => x.salesTeam == currentItem.name
                                        );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return (() => {
                                          try {
                                            return $queries.hqWise;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })();
                                      }
                                      throw e;
                                    }
                                  })(),
                                  defaultSize: "small",
                                  fields: [
                                    { key: "hq", fieldId: "hq" },
                                    { key: "salesTeam", fieldId: "salesTeam" },
                                    { key: "Total", fieldId: "Total" },
                                    {
                                      key: "totalServiceAmount",
                                      fieldId: "totalServiceAmount"
                                    },
                                    { key: "Travel", fieldId: "Travel" },
                                    { key: "RD 3", fieldId: "RD 3" },
                                    { key: "Cheque", fieldId: "Cheque" },
                                    {
                                      key: "cash back activity",
                                      fieldId: "cash back activity"
                                    },
                                    { key: "Gold", fieldId: "Gold" },
                                    { key: "Cash", fieldId: "Cash" },
                                    {
                                      key: "18-cash back activity",
                                      fieldId: "18-cash back activity"
                                    },
                                    {
                                      key: "001-Cheque",
                                      fieldId: "001-Cheque"
                                    },
                                    { key: "3-Travel", fieldId: "3-Travel" },
                                    { key: "22-RD 3", fieldId: "22-RD 3" },
                                    { key: "13-Cash", fieldId: "13-Cash" },
                                    { key: "2-Gold", fieldId: "2-Gold" }
                                  ],
                                  hideColumnPicker: true,
                                  hideDensity: true,
                                  hideExports: true,
                                  hideSearch: true,
                                  onRowSelectionChanged: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "selectedRowKey",
                                      [
                                        "table2",
                                        __plasmic_idx_0,
                                        "selectedRowKey"
                                      ],
                                      RichTable_Helpers
                                    ).apply(null, eventArgs);
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "selectedRow",
                                      [
                                        "table2",
                                        __plasmic_idx_0,
                                        "selectedRow"
                                      ],
                                      RichTable_Helpers
                                    ).apply(null, eventArgs);
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "selectedRows",
                                      [
                                        "table2",
                                        __plasmic_idx_0,
                                        "selectedRows"
                                      ],
                                      RichTable_Helpers
                                    ).apply(null, eventArgs);
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "selectedRowKeys",
                                      [
                                        "table2",
                                        __plasmic_idx_0,
                                        "selectedRowKeys"
                                      ],
                                      RichTable_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  pagination: false,
                                  scopeClassName: sty["table2__instance"],
                                  selectedRowKey: generateStateValueProp(
                                    $state,
                                    [
                                      "table2",
                                      __plasmic_idx_0,
                                      "selectedRowKey"
                                    ]
                                  ),
                                  selectedRowKeys: generateStateValueProp(
                                    $state,
                                    [
                                      "table2",
                                      __plasmic_idx_0,
                                      "selectedRowKeys"
                                    ]
                                  ),
                                  themeResetClassName: classNames(
                                    projectcss.root_reset,
                                    projectcss.root_reset_tags,
                                    projectcss.plasmic_default_styles,
                                    projectcss.plasmic_mixins,
                                    styleTokensClassNames,
                                    styleTokensClassNames_antd_5_hostless,
                                    styleTokensClassNames_library_tailwind_3_4_colors,
                                    styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                    styleTokensClassNames_plasmic_rich_components
                                  )
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "selectedRowKey",
                                      plasmicStateName:
                                        "table2[].selectedRowKey"
                                    },
                                    {
                                      name: "selectedRow",
                                      plasmicStateName: "table2[].selectedRow"
                                    },
                                    {
                                      name: "selectedRows",
                                      plasmicStateName: "table2[].selectedRows"
                                    },
                                    {
                                      name: "selectedRowKeys",
                                      plasmicStateName:
                                        "table2[].selectedRowKeys"
                                    }
                                  ],
                                  [__plasmic_idx_0],
                                  RichTable_Helpers ?? {},
                                  child$Props
                                );
                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "table2[].selectedRowKey",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    },
                                    {
                                      name: "table2[].selectedRowKeys",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <RichTable
                                    data-plasmic-name={"table2"}
                                    data-plasmic-override={overrides.table2}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                          );
                        })}
                      </TabContent>
                      <TabContent
                        className={classNames(
                          "__wab_instance",
                          sty.tabContent__ulJa
                        )}
                        tabKey={"tab2"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uFQv
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bdSNn
                            )}
                          >
                            <AntdSelect
                              data-plasmic-name={"salesTeam"}
                              data-plasmic-override={overrides.salesTeam}
                              className={classNames(
                                "__wab_instance",
                                sty.salesTeam
                              )}
                              defaultOpen={false}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                styleTokensClassNames,
                                styleTokensClassNames_antd_5_hostless,
                                styleTokensClassNames_library_tailwind_3_4_colors,
                                styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                styleTokensClassNames_plasmic_rich_components
                              )}
                              defaultValue={[]}
                              mode={"multiple"}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "salesTeam",
                                  "value"
                                ]).apply(null, eventArgs);
                              }}
                              options={(() => {
                                try {
                                  return $queries.query.data.map(x => ({
                                    value: x.name,
                                    label: x.name,
                                    type: "Option"
                                  }));
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [
                                      {
                                        value: "option2",
                                        label: "Option 2",
                                        type: "option"
                                      }
                                    ];
                                  }
                                  throw e;
                                }
                              })()}
                              placeholder={"Select..."}
                              popupScopeClassName={sty["salesTeam__popup"]}
                              size={"large"}
                              value={generateStateValueProp($state, [
                                "salesTeam",
                                "value"
                              ])}
                            />

                            <AntdSelect
                              data-plasmic-name={"serviceCode"}
                              data-plasmic-override={overrides.serviceCode}
                              className={classNames(
                                "__wab_instance",
                                sty.serviceCode
                              )}
                              defaultOpen={false}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                styleTokensClassNames,
                                styleTokensClassNames_antd_5_hostless,
                                styleTokensClassNames_library_tailwind_3_4_colors,
                                styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                styleTokensClassNames_plasmic_rich_components
                              )}
                              defaultValue={["17", "001"]}
                              mode={"multiple"}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "serviceCode",
                                  "value"
                                ]).apply(null, eventArgs);
                              }}
                              options={(() => {
                                try {
                                  return $queries.serviceCode.data.response.data.service_aggregate.nodes.map(
                                    x => ({
                                      value: x.serviceCode,
                                      label: x.serviceName,
                                      type: "Option"
                                    })
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [
                                      {
                                        value: "option2",
                                        label: "Option 2",
                                        type: "option"
                                      }
                                    ];
                                  }
                                  throw e;
                                }
                              })()}
                              placeholder={"Select..."}
                              popupScopeClassName={sty["serviceCode__popup"]}
                              size={"large"}
                              value={generateStateValueProp($state, [
                                "serviceCode",
                                "value"
                              ])}
                            />
                          </div>
                          <PrimeDataTable
                            data-plasmic-name={"primeReactDataTable"}
                            data-plasmic-override={
                              overrides.primeReactDataTable
                            }
                            allowExpansion={null}
                            autoSavePivotConfig={false}
                            booleanFilterColumns={[]}
                            bulkActions={[]}
                            className={
                              "" +
                              " " +
                              classNames(
                                "__wab_instance",
                                sty.primeReactDataTable
                              )
                            }
                            collapseAllLabel={"Collapse All"}
                            collapseIcon={"pi pi-minus"}
                            columnGroups={[]}
                            columns={[]}
                            contextMenu={null}
                            contextMenuSelection={null}
                            currencyColumns={[]}
                            currentPage={1}
                            currentPageReportTemplate={
                              "Showing {first} to {last} of {totalRecords} entries"
                            }
                            customFilterOptions={{}}
                            customFormatters={{}}
                            customGroupMappings={{}}
                            customTemplates={{}}
                            data={(() => {
                              try {
                                return $state.serviceSupportVisit;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            dataKey={null}
                            datePickerFilterColumns={[]}
                            dropdownFilterColumns={[]}
                            editingRows={null}
                            enableAutoColumnGrouping={true}
                            enableAutoMerge={true}
                            enableBulkActions={false}
                            enableColumnFilter={true}
                            enableColumnGrouping={true}
                            enableColumnManagement={true}
                            enableContextMenu={false}
                            enableExcelExport={false}
                            enableExpansionAnimation={true}
                            enableExport={true}
                            enableFilterApply={true}
                            enableFilterClear={true}
                            enableFilterFooter={true}
                            enableFilterMatchModes={true}
                            enableFilterMenu={true}
                            enableFixedFooterTotals={true}
                            enableFooterGroups={true}
                            enableFooterTotals={true}
                            enableFrozenColumns={false}
                            enableFrozenRows={false}
                            enableGlobalFilter={true}
                            enableGridLines={true}
                            enableHeaderGroups={true}
                            enableHoverEffect={true}
                            enableInlineEditing={false}
                            enableLazyLoading={false}
                            enablePagination={true}
                            enablePdfExport={false}
                            enablePivotPersistence={true}
                            enablePivotTable={false}
                            enablePivotUI={true}
                            enableROICalculation={false}
                            enableRefresh={false}
                            enableReorderableColumns={false}
                            enableResizableColumns={false}
                            enableRowActions={false}
                            enableRowExpansion={false}
                            enableRowGrouping={false}
                            enableRowSelection={false}
                            enableSearch={true}
                            enableSorting={true}
                            enableStripedRows={true}
                            enableVirtualScrolling={false}
                            error={null}
                            expandAllLabel={"Expand All"}
                            expandIcon={"pi pi-plus"}
                            expandedRows={null}
                            expansionButtonClassName={""}
                            expansionButtonStyle={{}}
                            expansionColumnBody={null}
                            expansionColumnHeader={null}
                            expansionColumnPosition={"left"}
                            expansionColumnStyle={{ width: "5rem" }}
                            expansionColumnWidth={"5rem"}
                            exportFileType={"csv"}
                            exportFilename={"data"}
                            fields={[]}
                            filterDelay={300}
                            filterDisplay={"menu"}
                            filterLocale={"en"}
                            footerColumnGroup={null}
                            footerGroupStyle={{}}
                            footerTotalsConfig={{
                              showTotals: true,
                              showAverages: false,
                              showCounts: true,
                              numberFormat: "en-US",
                              currency: "USD",
                              precision: 2
                            }}
                            globalFilterFields={[]}
                            globalFilterPlaceholder={"Search..."}
                            graphqlQuery={null}
                            graphqlVariables={{}}
                            groupConfig={{
                              enableHeaderGroups: true,
                              enableFooterGroups: true,
                              groupStyle: {},
                              headerGroupStyle: {},
                              footerGroupStyle: {},
                              groupSeparator: "__",
                              ungroupedColumns: [],
                              totalColumns: [],
                              customGroupMappings: {},
                              groupingPatterns: []
                            }}
                            groupSeparator={"__"}
                            groupStyle={{}}
                            groupingPatterns={[]}
                            headerColumnGroup={null}
                            headerGroupStyle={{}}
                            imageFields={[]}
                            loading={false}
                            mergeConfig={{
                              by: [],
                              preserve: [],
                              autoDetectMergeFields: true,
                              mergeStrategy: "combine"
                            }}
                            metaKeySelection={true}
                            nestedDataConfig={{
                              enableNestedSorting: true,
                              enableNestedFiltering: true,
                              enableNestedPagination: false,
                              nestedPageSize: 10
                            }}
                            nestedKey={null}
                            numberFilterColumns={[]}
                            onRowCollapse={null}
                            onRowExpand={null}
                            pageSize={10}
                            pageSizeOptions={[5, 10, 25, 50, 100]}
                            pivotAggregationFunctions={{}}
                            pivotColumns={[]}
                            pivotConfigKey={"ssv"}
                            pivotCurrency={"USD"}
                            pivotFieldSeparator={"__"}
                            pivotFilters={[]}
                            pivotNumberFormat={"en-US"}
                            pivotPrecision={2}
                            pivotRows={[]}
                            pivotShowColumnTotals={true}
                            pivotShowGrandTotals={true}
                            pivotShowRowTotals={true}
                            pivotShowSubTotals={true}
                            pivotSortColumns={true}
                            pivotSortDirection={"asc"}
                            pivotSortRows={true}
                            pivotUIPosition={"toolbar"}
                            pivotValues={[]}
                            plasmicApiToken={""}
                            plasmicTableConfigsId={""}
                            plasmicWorkspaceId={""}
                            popupImageFields={[]}
                            refetchInterval={0}
                            roiConfig={{
                              revenueField: "revenue",
                              costField: "cost",
                              investmentField: "investment",
                              profitField: "profit",
                              calculationMethod: "standard",
                              showROIColumn: true,
                              showROIAsPercentage: true,
                              roiColumnTitle: "ROI (%)",
                              roiColumnKey: "roi",
                              roiNumberFormat: "en-US",
                              roiPrecision: 2,
                              roiCurrency: "USD",
                              enableROIColorCoding: true,
                              roiColorThresholds: {
                                positive: "#22c55e",
                                neutral: "#6b7280",
                                negative: "#ef4444"
                              },
                              positiveROIThreshold: 0,
                              negativeROIThreshold: 0,
                              customROICalculation: null
                            }}
                            rowActions={[]}
                            rowExpansionTemplate={null}
                            selectOnEdit={false}
                            selectionMode={"multiple"}
                            showCurrentPageReport={true}
                            showExpandAllButtons={true}
                            showFilterMatchModes={true}
                            showFirstLastIcon={true}
                            showPageLinks={true}
                            style={{}}
                            tableSize={"normal"}
                            textFilterColumns={[]}
                            totalColumns={[]}
                            ungroupedColumns={[]}
                            useDirectCMSIntegration={true}
                            validateExpansion={null}
                          />

                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.table3
                              ),
                              data: (() => {
                                try {
                                  return $state.fn
                                    .pivote(
                                      ["drCode", "drName", "salesTeam"],
                                      ["date"],
                                      ["serviceAmount", "supportValue"]
                                    )(
                                      $state.fn.merge(
                                        [
                                          "drCode",
                                          "drName",
                                          "salesTeam",
                                          "date"
                                        ],
                                        ["drCode", "drName", "hq"]
                                      )(
                                        $queries.serviceVsSupport.data.response
                                          .data
                                      )
                                    )
                                    .filter(
                                      x =>
                                        !$state.salesTeam?.value?.length ||
                                        $state.salesTeam.value.includes(
                                          x.salesTeam
                                        )
                                    );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              fields: [
                                { key: "drCode", fieldId: "drCode" },
                                { key: "drName", fieldId: "drName" },
                                { key: "date", fieldId: "date" },
                                { key: "hq", fieldId: "hq" },
                                { key: "salesTeam", fieldId: "salesTeam" },
                                {
                                  key: "serviceAmount Total",
                                  fieldId: "serviceAmount Total"
                                },
                                {
                                  key: "supportValue Total",
                                  fieldId: "supportValue Total"
                                },
                                {
                                  key: "serviceAmount",
                                  fieldId: "serviceAmount"
                                },
                                { key: "serviceId", fieldId: "serviceId" },
                                {
                                  key: "serviceMonth",
                                  fieldId: "serviceMonth"
                                },
                                { key: "serviceDate", fieldId: "serviceDate" },
                                {
                                  key: "supportValue",
                                  fieldId: "supportValue"
                                },
                                {
                                  key: "May-2025__serviceAmount",
                                  fieldId: "May-2025__serviceAmount"
                                },
                                {
                                  key: "May-2025__supportValue",
                                  fieldId: "May-2025__supportValue"
                                },
                                {
                                  key: "Jun-2025__serviceAmount",
                                  fieldId: "Jun-2025__serviceAmount"
                                },
                                {
                                  key: "Jun-2025__supportValue",
                                  fieldId: "Jun-2025__supportValue"
                                },
                                {
                                  key: "Jul-2025__serviceAmount",
                                  fieldId: "Jul-2025__serviceAmount"
                                }
                              ],
                              onRowSelectionChanged: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRowKey",
                                  ["table3", "selectedRowKey"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRow",
                                  ["table3", "selectedRow"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRows",
                                  ["table3", "selectedRows"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRowKeys",
                                  ["table3", "selectedRowKeys"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                              },
                              scopeClassName: sty["table3__instance"],
                              selectedRowKey: generateStateValueProp($state, [
                                "table3",
                                "selectedRowKey"
                              ]),
                              selectedRowKeys: generateStateValueProp($state, [
                                "table3",
                                "selectedRowKeys"
                              ]),
                              themeResetClassName: classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                styleTokensClassNames,
                                styleTokensClassNames_antd_5_hostless,
                                styleTokensClassNames_library_tailwind_3_4_colors,
                                styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                styleTokensClassNames_plasmic_rich_components
                              )
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "selectedRowKey",
                                  plasmicStateName: "table3.selectedRowKey"
                                },
                                {
                                  name: "selectedRow",
                                  plasmicStateName: "table3.selectedRow"
                                },
                                {
                                  name: "selectedRows",
                                  plasmicStateName: "table3.selectedRows"
                                },
                                {
                                  name: "selectedRowKeys",
                                  plasmicStateName: "table3.selectedRowKeys"
                                }
                              ],
                              [],
                              RichTable_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <RichTable
                                data-plasmic-name={"table3"}
                                data-plasmic-override={overrides.table3}
                                {...child$Props}
                              />
                            );
                          })()}
                          {(() => {
                            const child$Props = {
                              canSelectRows: "none",
                              className: classNames(
                                "__wab_instance",
                                sty.table4
                              ),
                              data: (() => {
                                try {
                                  return $state.fn
                                    .summarize(
                                      ["salesTeam"],
                                      ["serviceMonth"],
                                      ["serviceAmount", "supportValue"]
                                    )(
                                      $state.fn.merge(
                                        [
                                          "drCode",
                                          "drName",
                                          "salesTeam",
                                          "date"
                                        ],
                                        ["drCode", "drName", "hq"]
                                      )(
                                        $queries.serviceVsSupport.data.response
                                          .data
                                      )
                                    )
                                    .filter(
                                      x =>
                                        !$state.salesTeam?.value?.length ||
                                        $state.salesTeam.value.includes(
                                          x.salesTeam
                                        )
                                    );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              defaultSize: "large",
                              onRowSelectionChanged: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRowKey",
                                  ["table4", "selectedRowKey"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRow",
                                  ["table4", "selectedRow"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRows",
                                  ["table4", "selectedRows"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRowKeys",
                                  ["table4", "selectedRowKeys"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                              },
                              scopeClassName: sty["table4__instance"],
                              selectedRowKey: generateStateValueProp($state, [
                                "table4",
                                "selectedRowKey"
                              ]),
                              selectedRowKeys: generateStateValueProp($state, [
                                "table4",
                                "selectedRowKeys"
                              ]),
                              themeResetClassName: classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                styleTokensClassNames,
                                styleTokensClassNames_antd_5_hostless,
                                styleTokensClassNames_library_tailwind_3_4_colors,
                                styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                styleTokensClassNames_plasmic_rich_components
                              )
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "selectedRowKey",
                                  plasmicStateName: "table4.selectedRowKey"
                                },
                                {
                                  name: "selectedRow",
                                  plasmicStateName: "table4.selectedRow"
                                },
                                {
                                  name: "selectedRows",
                                  plasmicStateName: "table4.selectedRows"
                                },
                                {
                                  name: "selectedRowKeys",
                                  plasmicStateName: "table4.selectedRowKeys"
                                }
                              ],
                              [],
                              RichTable_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <RichTable
                                data-plasmic-name={"table4"}
                                data-plasmic-override={overrides.table4}
                                {...child$Props}
                              />
                            );
                          })()}
                          <SideEffect
                            data-plasmic-name={"sideEffect"}
                            data-plasmic-override={overrides.sideEffect}
                            className={classNames(
                              "__wab_instance",
                              sty.sideEffect
                            )}
                          />
                        </div>
                      </TabContent>
                      <TabContent
                        children={null}
                        className={classNames(
                          "__wab_instance",
                          sty.tabContent__yRz5L
                        )}
                        tabKey={"drCount"}
                      />
                    </div>
                  </div>
                )}
              </DataCtxReader__>
            </TabsContainer>
          </Layout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "layout",
    "dateRangePicker",
    "tabsContainer",
    "tabUnderline",
    "table",
    "table2",
    "salesTeam",
    "serviceCode",
    "primeReactDataTable",
    "table3",
    "table4",
    "sideEffect"
  ],
  layout: [
    "layout",
    "dateRangePicker",
    "tabsContainer",
    "tabUnderline",
    "table",
    "table2",
    "salesTeam",
    "serviceCode",
    "primeReactDataTable",
    "table3",
    "table4",
    "sideEffect"
  ],
  dateRangePicker: ["dateRangePicker"],
  tabsContainer: [
    "tabsContainer",
    "tabUnderline",
    "table",
    "table2",
    "salesTeam",
    "serviceCode",
    "primeReactDataTable",
    "table3",
    "table4",
    "sideEffect"
  ],
  tabUnderline: ["tabUnderline"],
  table: ["table"],
  table2: ["table2"],
  salesTeam: ["salesTeam"],
  serviceCode: ["serviceCode"],
  primeReactDataTable: ["primeReactDataTable"],
  table3: ["table3"],
  table4: ["table4"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  layout: typeof Layout;
  dateRangePicker: typeof AntdDateRangePicker;
  tabsContainer: typeof TabsContainer;
  tabUnderline: typeof TabUnderline;
  table: typeof RichTable;
  table2: typeof RichTable;
  salesTeam: typeof AntdSelect;
  serviceCode: typeof AntdSelect;
  primeReactDataTable: typeof PrimeDataTable;
  table3: typeof RichTable;
  table4: typeof RichTable;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReports__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReports__VariantsArgs;
    args?: PlasmicReports__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReports__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicReports__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReports__ArgProps,
          internalVariantPropNames: PlasmicReports__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReports__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReports";
  } else {
    func.displayName = `PlasmicReports.${nodeName}`;
  }
  return func;
}

export const PlasmicReports = Object.assign(
  // Top-level PlasmicReports renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    layout: makeNodeComponent("layout"),
    dateRangePicker: makeNodeComponent("dateRangePicker"),
    tabsContainer: makeNodeComponent("tabsContainer"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    table: makeNodeComponent("table"),
    table2: makeNodeComponent("table2"),
    salesTeam: makeNodeComponent("salesTeam"),
    serviceCode: makeNodeComponent("serviceCode"),
    primeReactDataTable: makeNodeComponent("primeReactDataTable"),
    table3: makeNodeComponent("table3"),
    table4: makeNodeComponent("table4"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicReports
    internalVariantProps: PlasmicReports__VariantProps,
    internalArgProps: PlasmicReports__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicReports;
/* prettier-ignore-end */
