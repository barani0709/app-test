/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: 5dAXS18GO-4H

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import AtomMainCard from "../../AtomMainCard"; // plasmic-import: 1ot2PIONqw-D/component
import { AntdProgress } from "@plasmicpkgs/antd5/skinny/registerProgress";
import Label from "../../Label"; // plasmic-import: _L7DdH4fVzRf/component
import MolPrimaryCard from "../../MolPrimaryCard"; // plasmic-import: g9Zoq8xHSMb2/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicMolSalesCard.module.css"; // plasmic-import: 5dAXS18GO-4H/css

import TrophySvgrepoComSvgIcon from "./icons/PlasmicIcon__TrophySvgrepoComSvg"; // plasmic-import: I-YFqw4HE4AB/icon
import CircleFilledIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__CircleFilled"; // plasmic-import: Z45_TKGL7Jxg/icon

createPlasmicElementProxy;

export type PlasmicMolSalesCard__VariantMembers = {};
export type PlasmicMolSalesCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicMolSalesCard__VariantsArgs;
export const PlasmicMolSalesCard__VariantProps = new Array<VariantPropType>();

export type PlasmicMolSalesCard__ArgsType = {
  title?: string;
  target?: number;
  incentive?: number;
  items?: any;
  type?: string;
  color?: any;
  customer?: any;
  invoice?: any;
  brand?: any;
};
type ArgPropType = keyof PlasmicMolSalesCard__ArgsType;
export const PlasmicMolSalesCard__ArgProps = new Array<ArgPropType>(
  "title",
  "target",
  "incentive",
  "items",
  "type",
  "color",
  "customer",
  "invoice",
  "brand"
);

export type PlasmicMolSalesCard__OverridesType = {
  root?: Flex__<"div">;
  atomMainCard?: Flex__<typeof AtomMainCard>;
  h1?: Flex__<"h1">;
  progress?: Flex__<typeof AntdProgress>;
  molPrimaryCard?: Flex__<typeof MolPrimaryCard>;
};

export interface DefaultMolSalesCardProps {
  title?: string;
  target?: number;
  incentive?: number;
  items?: any;
  type?: string;
  color?: any;
  customer?: any;
  invoice?: any;
  brand?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMolSalesCard__RenderFunc(props: {
  variants: PlasmicMolSalesCard__VariantsArgs;
  args: PlasmicMolSalesCard__ArgsType;
  overrides: PlasmicMolSalesCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          title: "Sales Total",
          target: 3000,
          incentive: 5000,
          items: [
            {
              Name: "Sales",
              data: [
                { Title: "Gross", Values: 267534.12 },
                { Title: "Net", Values: 157860.2 }
              ],
              BreakoutCustomer: [
                {
                  id: "EBS072",
                  Customer: "Kasiviswanathan Medical Agencies Pvt Ltd",
                  HQ: "HQ-Madurai",
                  SalesValue: 30130.7,
                  invoices: [
                    {
                      Invoice: "INV-CB25-01521",
                      PostingDate: "2025-08-04",
                      SalesValue: 30130.7
                    }
                  ]
                },
                {
                  id: "EBS127",
                  Customer: "V.A.Distributors Thanjavur",
                  HQ: "HQ-Tanjore",
                  SalesValue: 21814.2,
                  invoices: [
                    {
                      Invoice: "INV-CB25-01562",
                      PostingDate: "2025-08-08",
                      SalesValue: 21814.2
                    }
                  ]
                }
              ],
              BreakoutInvoice: [
                {
                  Invoice: "INV-CB25-01521",
                  PostingDate: "2025-08-04",
                  HQ: "HQ-Madurai",
                  Customer: "Kasiviswanathan Medical Agencies Pvt Ltd",
                  SalesValue: 30130.7,
                  items: [{ item_name: "PREGABRIT", qty: 50, amount: 5143 }]
                },
                {
                  Invoice: "INV-CB25-01562",
                  PostingDate: "2025-08-08",
                  HQ: "HQ-Tanjore",
                  Customer: "V.A.Distributors Thanjavur",
                  SalesValue: 21814.2,
                  items: [{ item_name: "CALBRIT 60K", qty: 10, amount: 866.7 }]
                }
              ]
            },
            {
              Name: "Returns",
              data: [
                { Title: "Expiry", Values: -28002.15 },
                { Title: "Return", Values: -76135.27 }
              ],
              BreakoutCustomer: [
                {
                  id: "EBS055",
                  Customer: "Shree Amman Pharmacy",
                  HQ: "HQ-Tanjore",
                  CreditNoteReturns: -6827.18,
                  invoices: [
                    {
                      Invoice: "CN-25-01586",
                      PostingDate: "2025-08-20",
                      CreditNoteReturns: -3004.64
                    }
                  ]
                }
              ],
              BreakoutInvoice: [
                {
                  Invoice: "CN-25-01586",
                  PostingDate: "2025-08-20",
                  HQ: "HQ-Tanjore",
                  Customer: "Shree Amman Pharmacy",
                  CreditNoteReturns: -3004.64,
                  items: [
                    {
                      item_name: "BRITORVA 40",
                      qty: -8,
                      amount: -1461.84,
                      purpose: "SALES_RETURN"
                    }
                  ]
                }
              ]
            },
            {
              Name: "Offers",
              data: [
                { Title: "Claim", Values: 0 },
                { Title: "RD", Values: 0 }
              ],
              BreakoutCustomer: [],
              BreakoutInvoice: []
            }
          ],
          color: "#4672A2",
          customer: {
            sales: [
              {
                id: "EBS072",
                Customer: "Kasiviswanathan Medical Agencies Pvt Ltd",
                HQ: "HQ-Madurai",
                SalesValue: 30130.7,
                invoices: [
                  {
                    Invoice: "INV-CB25-01521",
                    PostingDate: "2025-08-04",
                    SalesValue: 30130.7
                  }
                ]
              },
              {
                id: "EBS127",
                Customer: "V.A.Distributors Thanjavur",
                HQ: "HQ-Tanjore",
                SalesValue: 21814.2,
                invoices: [
                  {
                    Invoice: "INV-CB25-01562",
                    PostingDate: "2025-08-08",
                    SalesValue: 21814.2
                  }
                ]
              }
            ],
            returns: [
              {
                id: "EBS055",
                Customer: "Shree Amman Pharmacy",
                HQ: "HQ-Tanjore",
                CreditNoteReturns: -6827.18,
                invoices: [
                  {
                    Invoice: "CN-25-01586",
                    PostingDate: "2025-08-20",
                    CreditNoteReturns: -3004.64
                  }
                ]
              }
            ],
            offers: []
          },
          invoice: {
            sales: [
              {
                id: "EBS072",
                Customer: "Kasiviswanathan Medical Agencies Pvt Ltd",
                HQ: "HQ-Madurai",
                SalesValue: 30130.7,
                invoices: [
                  {
                    Invoice: "INV-CB25-01521",
                    PostingDate: "2025-08-04",
                    SalesValue: 30130.7
                  }
                ]
              },
              {
                id: "EBS127",
                Customer: "V.A.Distributors Thanjavur",
                HQ: "HQ-Tanjore",
                SalesValue: 21814.2,
                invoices: [
                  {
                    Invoice: "INV-CB25-01562",
                    PostingDate: "2025-08-08",
                    SalesValue: 21814.2
                  }
                ]
              }
            ],
            returns: [
              {
                id: "EBS055",
                Customer: "Shree Amman Pharmacy",
                HQ: "HQ-Tanjore",
                CreditNoteReturns: -6827.18,
                invoices: [
                  {
                    Invoice: "CN-25-01586",
                    PostingDate: "2025-08-20",
                    CreditNoteReturns: -3004.64
                  }
                ]
              }
            ],
            offers: []
          },
          brand: [
            {
              Brand: "PAINFREE",
              HQ: "HQ-Madurai",
              Incentive: 1200,
              CreditNote: 0
            },
            {
              Brand: "VITAMAX",
              HQ: "HQ-Madurai",
              Incentive: 0,
              CreditNote: -100
            }
          ]
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_library_tailwind_3_4_colors,
        styleTokensClassNames_library_tailwind_3_4_number_tokens,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <AtomMainCard
        data-plasmic-name={"atomMainCard"}
        data-plasmic-override={overrides.atomMainCard}
        className={classNames("__wab_instance", sty.atomMainCard)}
        color={(() => {
          try {
            return $props.color;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "var(--token-Kz32cfmkCCmq)";
            }
            throw e;
          }
        })()}
        hidden={
          <div className={classNames(projectcss.all, sty.freeBox___5Edw)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $props.items;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <MolPrimaryCard
                  data-plasmic-name={"molPrimaryCard"}
                  data-plasmic-override={overrides.molPrimaryCard}
                  brand={(() => {
                    try {
                      return $props.brand;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [
                          {
                            Brand: "PAINFREE",
                            HQ: "HQ-Madurai",
                            Incentive: 1200,
                            CreditNote: 0
                          },
                          {
                            Brand: "VITAMAX",
                            HQ: "HQ-Madurai",
                            Incentive: 0,
                            CreditNote: -100
                          }
                        ];
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.molPrimaryCard)}
                  color={(() => {
                    try {
                      return (() => {
                        const colorCodes = {
                          Sales: "green",
                          Returns: "red",
                          Offers: "black"
                        };
                        return colorCodes[currentItem.Name] ?? "black";
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "var(--token-5vmFiSI-IIdw)";
                      }
                      throw e;
                    }
                  })()}
                  customer={(() => {
                    try {
                      return currentItem.BreakoutCustomer;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [
                          {
                            Customer: "AADITYA PHARMEX",
                            EBSCode: "EBS042",
                            HQ: "Chennai",
                            Incentive: 2000,
                            CreditNote: -500
                          },
                          {
                            Customer: "AADITYA PHARMEX",
                            EBSCode: "EBS042",
                            HQ: "Chennai",
                            Incentive: 2000,
                            CreditNote: -500
                          },
                          {
                            Customer: "AADITYA PHARMEX",
                            EBSCode: "EBS042",
                            HQ: "Chennai",
                            Incentive: 2000,
                            CreditNote: -500
                          },
                          {
                            Customer: "AADITYA PHARMEX",
                            EBSCode: "EBS042",
                            HQ: "Chennai",
                            Incentive: 2000,
                            CreditNote: -500
                          },
                          {
                            Customer: "AADITYA PHARMEX",
                            EBSCode: "EBS042",
                            HQ: "Chennai",
                            Incentive: 2000,
                            CreditNote: -500
                          },
                          {
                            Customer: "AADITYA PHARMEX",
                            EBSCode: "EBS042",
                            HQ: "Chennai",
                            Incentive: 2000,
                            CreditNote: -500
                          }
                        ];
                      }
                      throw e;
                    }
                  })()}
                  invoice={(() => {
                    try {
                      return currentItem.BreakoutInvoice;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [
                          {
                            Invoice: "INV-25-10451",
                            PostingDate: "2025-07-05",
                            Customer: "AADITYA PHARMEX",
                            EBSCode: "EBS042",
                            HQ: "HQ-Madurai",
                            Incentive: 1200,
                            CreditNote: 0
                          },
                          {
                            Invoice: "CN-25-01001",
                            PostingDate: "2025-07-07",
                            Customer: "SRI LAKSHMI AGENCIES",
                            EBSCode: "EBS311",
                            HQ: "HQ-Madurai",
                            Incentive: 0,
                            CreditNote: -100
                          }
                        ];
                      }
                      throw e;
                    }
                  })()}
                  items={(() => {
                    try {
                      return currentItem.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [
                          { Title: "Product", Values: 100, Qty: 10 },
                          { Title: "Product", Values: 100, Qty: 10 }
                        ];
                      }
                      throw e;
                    }
                  })()}
                  key={currentIndex}
                  name={(() => {
                    try {
                      return currentItem.Name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  target={(() => {
                    try {
                      return $props.target;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 1000;
                      }
                      throw e;
                    }
                  })()}
                />
              );
            })}
          </div>
        }
        name={(() => {
          try {
            return $props.type;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        shadow={true}
      >
        <h1
          data-plasmic-name={"h1"}
          data-plasmic-override={overrides.h1}
          className={classNames(
            projectcss.all,
            projectcss.h1,
            projectcss.__wab_text,
            sty.h1
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "You won't believe what happens next.";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h1>
        <div className={classNames(projectcss.all, sty.freeBox__o6XRa)}>
          <div className={classNames(projectcss.all, sty.freeBox__aquy)}>
            <AntdProgress
              data-plasmic-name={"progress"}
              data-plasmic-override={overrides.progress}
              className={classNames("__wab_instance", sty.progress)}
              gradient={[]}
              percent={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (() => {
                      try {
                        return $props.target && $props.target !== 0
                          ? (($props.incentive / $props.target) * 100)
                              .toFixed(1)
                              .replace(/\.0$/, "")
                          : "0";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return $props.target && $props.incentive
                          ? `${(($props.incentive / $props.target) * 100)
                              .toFixed(1)
                              .replace(/\.0$/, "")}`
                          : "0";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
              }
              showInfo={true}
              status={"normal"}
              strokeColor={
                true ? "var(--antd-colorSuccessTextActive)" : undefined
              }
              trailColor={true ? "#E5E7EB" : undefined}
              type={"line"}
            />

            <TrophySvgrepoComSvgIcon
              className={classNames(projectcss.all, sty.svg___12QIl)}
              role={"img"}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__qQl7P)}>
            <Label
              className={classNames("__wab_instance", sty.label__od21B)}
              size={"lg"}
            >
              <CircleFilledIcon
                className={classNames(projectcss.all, sty.svg__eTj3T)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tDmBf
                )}
              >
                {"Sales:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pDvvk
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.incentive.toLocaleString();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Label";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Label>
            <Label
              className={classNames("__wab_instance", sty.label__fBpkZ)}
              size={"lg"}
            >
              <CircleFilledIcon
                className={classNames(projectcss.all, sty.svg__tRmxw)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8JhaR
                )}
              >
                {"Target:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__d86A
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.target.toLocaleString();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Label";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Label>
          </div>
        </div>
      </AtomMainCard>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "atomMainCard", "h1", "progress", "molPrimaryCard"],
  atomMainCard: ["atomMainCard", "h1", "progress", "molPrimaryCard"],
  h1: ["h1"],
  progress: ["progress"],
  molPrimaryCard: ["molPrimaryCard"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  atomMainCard: typeof AtomMainCard;
  h1: "h1";
  progress: typeof AntdProgress;
  molPrimaryCard: typeof MolPrimaryCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMolSalesCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMolSalesCard__VariantsArgs;
    args?: PlasmicMolSalesCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMolSalesCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMolSalesCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMolSalesCard__ArgProps,
          internalVariantPropNames: PlasmicMolSalesCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMolSalesCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMolSalesCard";
  } else {
    func.displayName = `PlasmicMolSalesCard.${nodeName}`;
  }
  return func;
}

export const PlasmicMolSalesCard = Object.assign(
  // Top-level PlasmicMolSalesCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    atomMainCard: makeNodeComponent("atomMainCard"),
    h1: makeNodeComponent("h1"),
    progress: makeNodeComponent("progress"),
    molPrimaryCard: makeNodeComponent("molPrimaryCard"),

    // Metadata about props expected for PlasmicMolSalesCard
    internalVariantProps: PlasmicMolSalesCard__VariantProps,
    internalArgProps: PlasmicMolSalesCard__ArgProps
  }
);

export default PlasmicMolSalesCard;
/* prettier-ignore-end */
