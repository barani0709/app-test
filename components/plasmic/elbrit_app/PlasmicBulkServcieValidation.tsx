/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: 1eNeM7knurHz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Layout from "../../Layout"; // plasmic-import: pAY-hwRYSgy5/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import TextInput from "../../TextInput"; // plasmic-import: n1KYdl7MSeQ4/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { AdvancedTable } from "../../AdvancedTable"; // plasmic-import: ynuIYskdpVZc/codeComponent
import { PrimeDataTable } from "../../PrimeDataTable"; // plasmic-import: BYlkqz28tT8N/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicBulkServcieValidation.module.css"; // plasmic-import: 1eNeM7knurHz/css

import SearchSvg2Icon from "./icons/PlasmicIcon__SearchSvg2"; // plasmic-import: ny0qr1BEnBpN/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: pGbufo6Ngt-g/icon

createPlasmicElementProxy;

export type PlasmicBulkServcieValidation__VariantMembers = {};
export type PlasmicBulkServcieValidation__VariantsArgs = {};
type VariantPropType = keyof PlasmicBulkServcieValidation__VariantsArgs;
export const PlasmicBulkServcieValidation__VariantProps =
  new Array<VariantPropType>();

export type PlasmicBulkServcieValidation__ArgsType = {};
type ArgPropType = keyof PlasmicBulkServcieValidation__ArgsType;
export const PlasmicBulkServcieValidation__ArgProps = new Array<ArgPropType>();

export type PlasmicBulkServcieValidation__OverridesType = {
  root?: Flex__<"div">;
  layout?: Flex__<typeof Layout>;
  _switch?: Flex__<typeof AntdButton>;
  text?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  table?: Flex__<typeof RichTable>;
  advancedDataTable?: Flex__<typeof AdvancedTable>;
  primeReactDataTable?: Flex__<typeof PrimeDataTable>;
};

export interface DefaultBulkServcieValidationProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBulkServcieValidation__RenderFunc(props: {
  variants: PlasmicBulkServcieValidation__VariantsArgs;
  args: PlasmicBulkServcieValidation__ArgsType;
  overrides: PlasmicBulkServcieValidation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drcode",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return ($state.textInput.value || "")
                .split(",")
                .map(s => s.padStart(8, 0).trim());
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1,36,9"
      },
      {
        path: "drvalue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return `${$state.drcode.map(v => "'" + v + "'").join(",")}`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "drFilterSql",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.textInput.value
                ?.split(",")
                .map(x => `d."drCode"='${x.trim()}'`)
                .join(" OR ");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "data",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const serviceList =
                  $queries.serviceData.data.response.data.service || [];
                const supportList =
                  $queries.serviceData.data.response.data.support || [];
                const visitList =
                  $queries.serviceData.data.response.data.doctorVisit || [];
                const groupBy = (arr, keyFn) => {
                  const map = new Map();
                  arr.forEach(item => {
                    const key = keyFn(item);
                    if (!map.has(key)) map.set(key, []);
                    map.get(key).push(item);
                  });
                  return map;
                };
                const currentDate = new Date();
                const currentMonth = currentDate.getMonth();
                const currentYear = currentDate.getFullYear();
                const last12MonthsStart = new Date();
                last12MonthsStart.setMonth(last12MonthsStart.getMonth() - 12);
                const grouped = groupBy(
                  serviceList,
                  item => `${item.drCode}__${item.salesTeam}`
                );
                return Array.from(grouped.entries()).map(([key, services]) => {
                  const [drCode, salesTeam] = key.split("__");
                  services.sort((a, b) => new Date(b.date) - new Date(a.date));
                  const latestService = services[0];
                  const prevService = services[1];
                  const allServicesForDr = serviceList.filter(
                    s => s.drCode === drCode
                  );
                  const serviceMonth = allServicesForDr
                    .sort((a, b) => new Date(b.date) - new Date(a.date))
                    .map(s => {
                      const d = new Date(s.date);
                      const mon = d.toLocaleString("default", {
                        month: "short"
                      });
                      return `${mon}-${d.getFullYear()} - ${s.serviceAmount}`;
                    })
                    .join(", ");
                  const totalService = services.reduce(
                    (sum, s) => sum + s.serviceAmount,
                    0
                  );
                  const supportForThisPair = supportList.filter(
                    s => s.drCode === drCode && s.salesTeam === salesTeam
                  );
                  const totalSupportSinceService = supportForThisPair
                    .filter(
                      s => new Date(s.date) >= new Date(latestService.date)
                    )
                    .reduce((sum, s) => sum + (s.supportValue || 0), 0);
                  const roiTillDate =
                    totalSupportSinceService && totalService
                      ? totalSupportSinceService / totalService
                      : null;
                  const monthsSinceService = (() => {
                    const d1 = new Date(latestService.date);
                    return (
                      (currentDate.getFullYear() - d1.getFullYear()) * 12 +
                      currentDate.getMonth() -
                      d1.getMonth() +
                      1
                    );
                  })();
                  const peakSupport = supportForThisPair.reduce(
                    (max, s) => (s.supportValue > max ? s.supportValue : max),
                    0
                  );
                  const peakSupportMonth = (() => {
                    const peak = supportForThisPair.find(
                      s => s.supportValue === peakSupport
                    );
                    if (!peak) return "";
                    const d = new Date(peak.date);
                    return `${d.toLocaleString("default", {
                      month: "short"
                    })}-${d.getFullYear()}`;
                  })();
                  const last12MonthsSupport = supportForThisPair
                    .filter(s => new Date(s.date) >= last12MonthsStart)
                    .reduce((sum, s) => sum + (s.supportValue || 0), 0);
                  const supportSinceLatest = totalSupportSinceService;
                  const roiLatest = latestService.serviceAmount
                    ? supportSinceLatest / latestService.serviceAmount
                    : null;
                  const monthsTakenLatest = monthsSinceService;
                  let supportPrev = null,
                    roiPrev = null,
                    monthsTakenPrev = null,
                    oneBeforeService = null;
                  if (prevService) {
                    supportPrev = supportForThisPair
                      .filter(
                        s => new Date(s.date) >= new Date(prevService.date)
                      )
                      .reduce((sum, s) => sum + (s.supportValue || 0), 0);
                    roiPrev =
                      supportPrev && totalService
                        ? totalService / supportPrev
                        : null;
                    const d = new Date(prevService.date);
                    monthsTakenPrev =
                      (currentDate.getFullYear() - d.getFullYear()) * 12 +
                      currentDate.getMonth() -
                      d.getMonth() +
                      1;
                    const dLabel = new Date(prevService.date);
                    const mon = dLabel.toLocaleString("default", {
                      month: "short"
                    });
                    oneBeforeService = `${mon}-${dLabel.getFullYear()} - ${
                      prevService.serviceAmount
                    }`;
                  }
                  const visitForThisPair = visitList.filter(
                    v => v.drCode === drCode && v.salesTeam === salesTeam
                  );
                  const visitCount = (arr, field) =>
                    arr.reduce((sum, v) => sum + (v[field] || 0), 0);
                  const currentMonthVisits = visitForThisPair.filter(v => {
                    const d = new Date(v.date);
                    return (
                      d.getMonth() === currentMonth &&
                      d.getFullYear() === currentYear
                    );
                  });
                  const prevMonthVisits = visitForThisPair.filter(v => {
                    const d = new Date(v.date);
                    const prev = new Date(currentDate);
                    prev.setMonth(currentMonth - 1);
                    return (
                      d.getMonth() === prev.getMonth() &&
                      d.getFullYear() === prev.getFullYear()
                    );
                  });
                  return {
                    drCode,
                    division:
                      latestService.division ||
                      supportForThisPair[0]?.division ||
                      visitForThisPair[0]?.division ||
                      "",
                    salesTeam,
                    drName: latestService.drName,
                    totalService,
                    serviceMonth,
                    totalSupportSinceService,
                    monthsSinceService,
                    roiTillDate,
                    latestService: `${new Date(
                      latestService.date
                    ).toLocaleString("default", { month: "short" })}-${new Date(
                      latestService.date
                    ).getFullYear()} - ${latestService.serviceAmount}`,
                    supportSinceLatest,
                    roiLatest,
                    monthsTakenLatest,
                    oneBeforeLastService: oneBeforeService || "",
                    supportSinceOneBefore: supportPrev,
                    roiPrev,
                    monthsTakenPrev,
                    currentMonthBE: visitCount(currentMonthVisits, "BEVisit"),
                    previousMonthBE: visitCount(prevMonthVisits, "BEVisit"),
                    currentMonthABM: visitCount(currentMonthVisits, "ABMVisit"),
                    previousMonthABM: visitCount(prevMonthVisits, "ABMVisit"),
                    currentMonthRBM: visitCount(currentMonthVisits, "RBMVisit"),
                    previousMonthRBM: visitCount(prevMonthVisits, "RBMVisit"),
                    peakSupport,
                    peakSupportMonth,
                    last12MonthsSupport
                  };
                });
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "variable",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    serviceValid: usePlasmicDataOp(() => {
      return {
        sourceId: "xuq4vtFviiVZiJUaPTUnzT",
        opId: "9cb62b6d-25e0-4372-beee-a9e34351699e",
        userArgs: {},
        cacheKey: `plasmic.$.9cb62b6d-25e0-4372-beee-a9e34351699e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    serviceData: usePlasmicDataOp(() => {
      return {
        sourceId: "fd9ij7KB5XdhXScf1JL9tG",
        opId: "906af05b-8190-4274-90a1-d8bafb520fba",
        userArgs: {
          variables: [$state.drcode]
        },
        cacheKey: `plasmic.$.906af05b-8190-4274-90a1-d8bafb520fba.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    drData: usePlasmicDataOp(() => {
      return {
        sourceId: "fd9ij7KB5XdhXScf1JL9tG",
        opId: "214fd8f9-d40a-4600-a2bc-0b93cfdc0dbb",
        userArgs: {
          variables: [$state.drcode]
        },
        cacheKey: `plasmic.$.214fd8f9-d40a-4600-a2bc-0b93cfdc0dbb.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_library_tailwind_3_4_colors,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <Layout
            data-plasmic-name={"layout"}
            data-plasmic-override={overrides.layout}
            className={classNames("__wab_instance", sty.layout)}
          >
            <AntdButton
              data-plasmic-name={"_switch"}
              data-plasmic-override={overrides._switch}
              className={classNames("__wab_instance", sty._switch)}
              href={`/service`}
              shape={"round"}
              size={"large"}
              type={"dashed"}
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Switch to Service Validation"}
              </div>
            </AntdButton>
            <div className={classNames(projectcss.all, sty.freeBox___714Sa)}>
              <TextInput
                data-plasmic-name={"textInput"}
                data-plasmic-override={overrides.textInput}
                aria-label={"Enter the Doctor Code in comma Separated Values"}
                className={classNames("__wab_instance", sty.textInput)}
                name={"DrCodes"}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["textInput", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }

                  (async event => {
                    const $steps = {};

                    $steps["updateDrcode"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["drcode"]
                            },
                            operation: 0,
                            value: $state.drcode.map(x => x.padStart(8, 0))
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDrcode"] != null &&
                      typeof $steps["updateDrcode"] === "object" &&
                      typeof $steps["updateDrcode"].then === "function"
                    ) {
                      $steps["updateDrcode"] = await $steps["updateDrcode"];
                    }
                  }).apply(null, eventArgs);
                }}
                placeholder={"Doctor Codes"}
                required={true}
                showStartIcon={true}
                type={"text"}
                value={
                  generateStateValueProp($state, ["textInput", "value"]) ?? ""
                }
              />

              {(() => {
                const child$Props = {
                  canSelectRows: "multiple",
                  className: classNames("__wab_instance", sty.table),
                  data: (() => {
                    try {
                      return $queries.drData.data.response.data.doctor;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })(),
                  fields: [
                    { key: "drCode", fieldId: "drCode" },
                    { key: "drName", fieldId: "drName" },
                    { key: "CND", fieldId: "CND" },
                    { key: "CNDHq", fieldId: "CNDHq" },
                    { key: "CNDTeam", fieldId: "CNDTeam" },
                    { key: "vascoTeam", fieldId: "vascoTeam" },
                    { key: "vascoHq", fieldId: "vascoHq" },
                    { key: "category", fieldId: "category" },
                    { key: "category1", fieldId: "category1" },
                    { key: "category2", fieldId: "category2" },
                    { key: "category3", fieldId: "category3" },
                    { key: "city", fieldId: "city" },
                    { key: "auraAndProxima", fieldId: "auraAndProxima" },
                    { key: "auraAndProximaHq", fieldId: "auraAndProximaHq" },
                    {
                      key: "auraAndProximaTeam",
                      fieldId: "auraAndProximaTeam"
                    },
                    { key: "elbrit", fieldId: "elbrit" },
                    { key: "elbritHq", fieldId: "elbritHq" },
                    { key: "elbritTeam", fieldId: "elbritTeam" }
                  ],
                  hideColumnPicker: true,
                  hideDensity: true,
                  hideExports: true,
                  hideSearch: true,
                  hideSelectionBar: hasVariant(
                    globalVariants,
                    "screen",
                    "mobileOnly"
                  )
                    ? true
                    : false,
                  onRowSelectionChanged: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "selectedRowKey",
                      ["table", "selectedRowKey"],
                      RichTable_Helpers
                    ).apply(null, eventArgs);
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "selectedRow",
                      ["table", "selectedRow"],
                      RichTable_Helpers
                    ).apply(null, eventArgs);
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "selectedRows",
                      ["table", "selectedRows"],
                      RichTable_Helpers
                    ).apply(null, eventArgs);
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "selectedRowKeys",
                      ["table", "selectedRowKeys"],
                      RichTable_Helpers
                    ).apply(null, eventArgs);
                  },
                  pagination: false,
                  scopeClassName: sty["table__instance"],
                  selectedRowKey: generateStateValueProp($state, [
                    "table",
                    "selectedRowKey"
                  ]),
                  selectedRowKeys: generateStateValueProp($state, [
                    "table",
                    "selectedRowKeys"
                  ]),
                  themeResetClassName: classNames(
                    projectcss.root_reset,
                    projectcss.root_reset_tags,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    styleTokensClassNames,
                    styleTokensClassNames_antd_5_hostless,
                    styleTokensClassNames_library_tailwind_3_4_colors,
                    styleTokensClassNames_library_tailwind_3_4_number_tokens,
                    styleTokensClassNames_plasmic_rich_components
                  )
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "selectedRowKey",
                      plasmicStateName: "table.selectedRowKey"
                    },
                    {
                      name: "selectedRow",
                      plasmicStateName: "table.selectedRow"
                    },
                    {
                      name: "selectedRows",
                      plasmicStateName: "table.selectedRows"
                    },
                    {
                      name: "selectedRowKeys",
                      plasmicStateName: "table.selectedRowKeys"
                    }
                  ],
                  [],
                  RichTable_Helpers ?? {},
                  child$Props
                );

                return (
                  <RichTable
                    data-plasmic-name={"table"}
                    data-plasmic-override={overrides.table}
                    {...child$Props}
                  />
                );
              })()}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__fp5Wh)}>
              <AdvancedTable
                data-plasmic-name={"advancedDataTable"}
                data-plasmic-override={overrides.advancedDataTable}
                bulkActions={[]}
                cellHeight={"auto"}
                cellMaxHeight={"none"}
                cellMaxWidth={"none"}
                cellMinHeight={"auto"}
                cellMinWidth={"auto"}
                cellWidth={"auto"}
                className={
                  "" + " " + classNames("__wab_instance", sty.advancedDataTable)
                }
                columnGroups={[]}
                columns={[]}
                currentPage={1}
                data={(() => {
                  try {
                    return $state.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                defaultBodyStyle={{}}
                defaultHeaderStyle={{}}
                enableBulkActions={false}
                enableColumnFilter={false}
                enableColumnGrouping={false}
                enableColumnManagement={false}
                enableExport={true}
                enablePagination={true}
                enableRefresh={false}
                enableRowActions={false}
                enableRowSelection={false}
                enableSearch={true}
                enableSorting={true}
                error={null}
                fields={[]}
                footerColumnGroup={null}
                graphqlQuery={null}
                graphqlVariables={{}}
                groupConfig={{
                  enableHeaderGroups: true,
                  enableFooterGroups: true,
                  groupStyle: {},
                  headerGroupStyle: {},
                  footerGroupStyle: {}
                }}
                headerColumnGroup={null}
                imageFields={[]}
                loading={false}
                pageSize={10}
                pageSizeOptions={[5, 10, 25, 50, 100]}
                popupImageFields={[]}
                refetchInterval={0}
                rowActions={[]}
                style={{}}
                tableHeight={"600px"}
                theme={"default"}
              />
            </div>
            <PrimeDataTable
              data-plasmic-name={"primeReactDataTable"}
              data-plasmic-override={overrides.primeReactDataTable}
              allowExpansion={null}
              autoSavePivotConfig={false}
              booleanFilterColumns={[]}
              bulkActions={[]}
              className={
                "" + " " + classNames("__wab_instance", sty.primeReactDataTable)
              }
              collapseAllLabel={"Collapse All"}
              collapseIcon={"pi pi-minus"}
              columnGroups={[]}
              columns={[]}
              contextMenu={null}
              contextMenuSelection={null}
              currencyColumns={[]}
              currentPage={1}
              currentPageReportTemplate={
                "Showing {first} to {last} of {totalRecords} entries"
              }
              customFilterOptions={{}}
              customFormatters={{}}
              customGroupMappings={{}}
              customTemplates={{}}
              data={(() => {
                try {
                  return $state.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              dataKey={null}
              datePickerFilterColumns={[]}
              dropdownFilterColumns={[]}
              editingRows={null}
              enableAutoColumnGrouping={false}
              enableAutoMerge={false}
              enableBulkActions={false}
              enableColumnFilter={true}
              enableColumnGrouping={false}
              enableColumnManagement={true}
              enableContextMenu={false}
              enableExcelExport={false}
              enableExpansionAnimation={true}
              enableExport={true}
              enableFilterApply={true}
              enableFilterClear={true}
              enableFilterFooter={true}
              enableFilterMatchModes={true}
              enableFilterMenu={true}
              enableFixedFooterTotals={false}
              enableFooterGroups={true}
              enableFooterTotals={false}
              enableFrozenColumns={false}
              enableFrozenRows={false}
              enableGlobalFilter={true}
              enableGridLines={true}
              enableHeaderGroups={true}
              enableHoverEffect={true}
              enableInlineEditing={false}
              enableLazyLoading={false}
              enablePagination={true}
              enablePdfExport={false}
              enablePivotPersistence={true}
              enablePivotTable={false}
              enablePivotUI={true}
              enableROICalculation={false}
              enableRefresh={false}
              enableReorderableColumns={false}
              enableResizableColumns={false}
              enableRowActions={false}
              enableRowExpansion={false}
              enableRowGrouping={false}
              enableRowSelection={false}
              enableSearch={true}
              enableSorting={true}
              enableStripedRows={true}
              enableVirtualScrolling={false}
              error={null}
              expandAllLabel={"Expand All"}
              expandIcon={"pi pi-plus"}
              expandedRows={null}
              expansionButtonClassName={""}
              expansionButtonStyle={{}}
              expansionColumnBody={null}
              expansionColumnHeader={null}
              expansionColumnPosition={"left"}
              expansionColumnStyle={{ width: "5rem" }}
              expansionColumnWidth={"5rem"}
              exportFileType={"csv"}
              exportFilename={"data"}
              fields={[]}
              filterDelay={300}
              filterDisplay={"menu"}
              filterLocale={"en"}
              footerColumnGroup={null}
              footerGroupStyle={{}}
              footerTotalsConfig={{
                showTotals: true,
                showAverages: false,
                showCounts: true,
                numberFormat: "en-US",
                currency: "USD",
                precision: 2
              }}
              globalFilterFields={[]}
              globalFilterPlaceholder={"Search..."}
              graphqlQuery={null}
              graphqlVariables={{}}
              groupConfig={{
                enableHeaderGroups: true,
                enableFooterGroups: true,
                groupStyle: {},
                headerGroupStyle: {},
                footerGroupStyle: {},
                groupSeparator: "__",
                ungroupedColumns: [],
                totalColumns: [],
                customGroupMappings: {},
                groupingPatterns: []
              }}
              groupSeparator={"__"}
              groupStyle={{}}
              groupingPatterns={[]}
              headerColumnGroup={null}
              headerGroupStyle={{}}
              imageFields={[]}
              loading={false}
              mergeConfig={{
                by: [],
                preserve: [],
                autoDetectMergeFields: true,
                mergeStrategy: "combine"
              }}
              metaKeySelection={true}
              nestedDataConfig={{
                enableNestedSorting: true,
                enableNestedFiltering: true,
                enableNestedPagination: false,
                nestedPageSize: 10
              }}
              nestedKey={null}
              numberFilterColumns={[]}
              onRowCollapse={null}
              onRowExpand={null}
              pageSize={10}
              pageSizeOptions={[5, 10, 25, 50, 100]}
              pivotAggregationFunctions={{}}
              pivotColumns={[]}
              pivotConfigKey={"pivotConfig"}
              pivotCurrency={"USD"}
              pivotFieldSeparator={"__"}
              pivotFilters={[]}
              pivotNumberFormat={"en-US"}
              pivotPrecision={2}
              pivotRows={[]}
              pivotShowColumnTotals={true}
              pivotShowGrandTotals={true}
              pivotShowRowTotals={true}
              pivotShowSubTotals={true}
              pivotSortColumns={true}
              pivotSortDirection={"asc"}
              pivotSortRows={true}
              pivotUIPosition={"toolbar"}
              pivotValues={[]}
              plasmicApiToken={""}
              plasmicTableConfigsId={""}
              plasmicWorkspaceId={""}
              popupImageFields={[]}
              refetchInterval={0}
              roiConfig={{
                revenueField: "revenue",
                costField: "cost",
                investmentField: "investment",
                profitField: "profit",
                calculationMethod: "standard",
                showROIColumn: true,
                showROIAsPercentage: true,
                roiColumnTitle: "ROI (%)",
                roiColumnKey: "roi",
                roiNumberFormat: "en-US",
                roiPrecision: 2,
                roiCurrency: "USD",
                enableROIColorCoding: true,
                roiColorThresholds: {
                  positive: "#22c55e",
                  neutral: "#6b7280",
                  negative: "#ef4444"
                },
                positiveROIThreshold: 0,
                negativeROIThreshold: 0,
                customROICalculation: null
              }}
              rowActions={[]}
              rowExpansionTemplate={null}
              selectOnEdit={false}
              selectionMode={"multiple"}
              showCurrentPageReport={true}
              showExpandAllButtons={true}
              showFilterMatchModes={true}
              showFirstLastIcon={true}
              showPageLinks={true}
              style={{}}
              tableSize={"normal"}
              textFilterColumns={[]}
              totalColumns={[]}
              ungroupedColumns={[]}
              useDirectCMSIntegration={true}
              validateExpansion={null}
            />
          </Layout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "layout",
    "_switch",
    "text",
    "textInput",
    "table",
    "advancedDataTable",
    "primeReactDataTable"
  ],
  layout: [
    "layout",
    "_switch",
    "text",
    "textInput",
    "table",
    "advancedDataTable",
    "primeReactDataTable"
  ],
  _switch: ["_switch", "text"],
  text: ["text"],
  textInput: ["textInput"],
  table: ["table"],
  advancedDataTable: ["advancedDataTable"],
  primeReactDataTable: ["primeReactDataTable"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  layout: typeof Layout;
  _switch: typeof AntdButton;
  text: "div";
  textInput: typeof TextInput;
  table: typeof RichTable;
  advancedDataTable: typeof AdvancedTable;
  primeReactDataTable: typeof PrimeDataTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBulkServcieValidation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBulkServcieValidation__VariantsArgs;
    args?: PlasmicBulkServcieValidation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBulkServcieValidation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBulkServcieValidation__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBulkServcieValidation__ArgProps,
          internalVariantPropNames: PlasmicBulkServcieValidation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBulkServcieValidation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBulkServcieValidation";
  } else {
    func.displayName = `PlasmicBulkServcieValidation.${nodeName}`;
  }
  return func;
}

export const PlasmicBulkServcieValidation = Object.assign(
  // Top-level PlasmicBulkServcieValidation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    layout: makeNodeComponent("layout"),
    _switch: makeNodeComponent("_switch"),
    text: makeNodeComponent("text"),
    textInput: makeNodeComponent("textInput"),
    table: makeNodeComponent("table"),
    advancedDataTable: makeNodeComponent("advancedDataTable"),
    primeReactDataTable: makeNodeComponent("primeReactDataTable"),

    // Metadata about props expected for PlasmicBulkServcieValidation
    internalVariantProps: PlasmicBulkServcieValidation__VariantProps,
    internalArgProps: PlasmicBulkServcieValidation__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBulkServcieValidation;
/* prettier-ignore-end */
