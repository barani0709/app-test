/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: Qt8Lp3IbDQGP

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Layout from "../../Layout"; // plasmic-import: pAY-hwRYSgy5/component
import { PrimeDataTable } from "../../PrimeDataTable"; // plasmic-import: BYlkqz28tT8N/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import MolKpi from "../../MolKpi"; // plasmic-import: LKN9Ltc3f3ft/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { AdvancedTable } from "../../AdvancedTable"; // plasmic-import: ynuIYskdpVZc/codeComponent
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicGiftcard.module.css"; // plasmic-import: Qt8Lp3IbDQGP/css

createPlasmicElementProxy;

export type PlasmicGiftcard__VariantMembers = {};
export type PlasmicGiftcard__VariantsArgs = {};
type VariantPropType = keyof PlasmicGiftcard__VariantsArgs;
export const PlasmicGiftcard__VariantProps = new Array<VariantPropType>();

export type PlasmicGiftcard__ArgsType = {};
type ArgPropType = keyof PlasmicGiftcard__ArgsType;
export const PlasmicGiftcard__ArgProps = new Array<ArgPropType>();

export type PlasmicGiftcard__OverridesType = {
  root?: Flex__<"div">;
  layout?: Flex__<typeof Layout>;
  dataFetcher?: Flex__<typeof Fetcher>;
  molKpi?: Flex__<typeof MolKpi>;
  table?: Flex__<typeof RichTable>;
  text?: Flex__<"div">;
  advancedDataTable?: Flex__<typeof AdvancedTable>;
};

export interface DefaultGiftcardProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicGiftcard__RenderFunc(props: {
  variants: PlasmicGiftcard__VariantsArgs;
  args: PlasmicGiftcard__ArgsType;
  overrides: PlasmicGiftcard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "cardStatus",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          total: ["giftcard", "Total Cards"],
          received: ["giftcard", "To be scanned"],
          employeescanned: ["file", "Step-1: Employee scan"],
          formfilled: ["wait", "Form filled, Doctor Scan Pending"],
          drscanned: ["warn", "Step-2: Doctor Scanned"],
          active: ["active", "Active"]
        })
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "selectedStatus",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "total"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    gIftCard: usePlasmicDataOp(() => {
      return {
        sourceId: "xuq4vtFviiVZiJUaPTUnzT",
        opId: "372d4633-0027-4635-bc60-5aa11264c772",
        userArgs: {},
        cacheKey: `plasmic.$.372d4633-0027-4635-bc60-5aa11264c772.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "xuq4vtFviiVZiJUaPTUnzT",
        opId: "92a5ba1d-fd4e-4dbe-8a30-e4a45fbdc7eb",
        userArgs: {},
        cacheKey: `plasmic.$.92a5ba1d-fd4e-4dbe-8a30-e4a45fbdc7eb.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_library_tailwind_3_4_colors,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <Layout
            data-plasmic-name={"layout"}
            data-plasmic-override={overrides.layout}
            className={classNames("__wab_instance", sty.layout)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__mdTJe)}>
              <PrimeDataTable
                allowExpansion={null}
                autoSavePivotConfig={false}
                booleanFilterColumns={[]}
                bulkActions={[]}
                className={
                  "" +
                  " " +
                  classNames("__wab_instance", sty.primeReactDataTable__b2Bme)
                }
                collapseAllLabel={"Collapse All"}
                collapseIcon={"pi pi-minus"}
                columnGroups={[]}
                columns={[]}
                contextMenu={null}
                contextMenuSelection={null}
                currencyColumns={[]}
                currentPage={1}
                currentPageReportTemplate={
                  "Showing {first} to {last} of {totalRecords} entries"
                }
                customFilterOptions={{}}
                customFormatters={{}}
                customGroupMappings={{}}
                customTemplates={{}}
                data={(() => {
                  try {
                    return $queries.query.data.filter(x =>
                      $state.selectedStatus == "total"
                        ? true
                        : x.status == $state.selectedStatus
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                dataKey={null}
                datePickerFilterColumns={[]}
                dropdownFilterColumns={[]}
                editingRows={null}
                enableAutoColumnGrouping={false}
                enableAutoMerge={false}
                enableBulkActions={false}
                enableColumnFilter={true}
                enableColumnGrouping={false}
                enableColumnManagement={true}
                enableContextMenu={false}
                enableExcelExport={false}
                enableExpansionAnimation={true}
                enableExport={true}
                enableFilterApply={true}
                enableFilterClear={true}
                enableFilterFooter={true}
                enableFilterMatchModes={true}
                enableFilterMenu={true}
                enableFixedFooterTotals={false}
                enableFooterGroups={true}
                enableFooterTotals={false}
                enableFrozenColumns={false}
                enableFrozenRows={false}
                enableGlobalFilter={true}
                enableGridLines={true}
                enableHeaderGroups={true}
                enableHoverEffect={true}
                enableInlineEditing={false}
                enableLazyLoading={false}
                enablePagination={true}
                enablePdfExport={false}
                enablePivotPersistence={true}
                enablePivotTable={false}
                enablePivotUI={true}
                enableROICalculation={false}
                enableRefresh={false}
                enableReorderableColumns={false}
                enableResizableColumns={false}
                enableRowActions={false}
                enableRowExpansion={false}
                enableRowGrouping={false}
                enableRowSelection={false}
                enableSearch={true}
                enableSorting={true}
                enableStripedRows={true}
                enableVirtualScrolling={false}
                error={null}
                expandAllLabel={"Expand All"}
                expandIcon={"pi pi-plus"}
                expandedRows={null}
                expansionButtonClassName={""}
                expansionButtonStyle={{}}
                expansionColumnBody={null}
                expansionColumnHeader={null}
                expansionColumnPosition={"left"}
                expansionColumnStyle={{ width: "5rem" }}
                expansionColumnWidth={"5rem"}
                exportFileType={"csv"}
                exportFilename={"data"}
                fields={[]}
                filterDelay={300}
                filterDisplay={"menu"}
                filterLocale={"en"}
                footerColumnGroup={null}
                footerGroupStyle={{}}
                footerTotalsConfig={{
                  showTotals: true,
                  showAverages: false,
                  showCounts: true,
                  numberFormat: "en-US",
                  currency: "USD",
                  precision: 2
                }}
                globalFilterFields={[]}
                globalFilterPlaceholder={"Search..."}
                graphqlQuery={null}
                graphqlVariables={{}}
                groupConfig={{
                  enableHeaderGroups: true,
                  enableFooterGroups: true,
                  groupStyle: {},
                  headerGroupStyle: {},
                  footerGroupStyle: {},
                  groupSeparator: "__",
                  ungroupedColumns: [],
                  totalColumns: [],
                  customGroupMappings: {},
                  groupingPatterns: []
                }}
                groupSeparator={"__"}
                groupStyle={{}}
                groupingPatterns={[]}
                headerColumnGroup={null}
                headerGroupStyle={{}}
                imageFields={[]}
                loading={false}
                mergeConfig={{
                  by: [],
                  preserve: [],
                  autoDetectMergeFields: true,
                  mergeStrategy: "combine"
                }}
                metaKeySelection={true}
                nestedDataConfig={{
                  enableNestedSorting: true,
                  enableNestedFiltering: true,
                  enableNestedPagination: false,
                  nestedPageSize: 10
                }}
                nestedKey={null}
                numberFilterColumns={[]}
                onRowCollapse={null}
                onRowExpand={null}
                pageSize={10}
                pageSizeOptions={[5, 10, 25, 50, 100]}
                pivotAggregationFunctions={{}}
                pivotColumns={[]}
                pivotConfigKey={"pivotConfig"}
                pivotCurrency={"USD"}
                pivotFieldSeparator={"__"}
                pivotFilters={[]}
                pivotNumberFormat={"en-US"}
                pivotPrecision={2}
                pivotRows={[]}
                pivotShowColumnTotals={true}
                pivotShowGrandTotals={true}
                pivotShowRowTotals={true}
                pivotShowSubTotals={true}
                pivotSortColumns={true}
                pivotSortDirection={"asc"}
                pivotSortRows={true}
                pivotUIPosition={"toolbar"}
                pivotValues={[]}
                plasmicApiToken={""}
                plasmicTableConfigsId={""}
                plasmicWorkspaceId={""}
                popupImageFields={[]}
                refetchInterval={0}
                roiConfig={{
                  revenueField: "revenue",
                  costField: "cost",
                  investmentField: "investment",
                  profitField: "profit",
                  calculationMethod: "standard",
                  showROIColumn: true,
                  showROIAsPercentage: true,
                  roiColumnTitle: "ROI (%)",
                  roiColumnKey: "roi",
                  roiNumberFormat: "en-US",
                  roiPrecision: 2,
                  roiCurrency: "USD",
                  enableROIColorCoding: true,
                  roiColorThresholds: {
                    positive: "#22c55e",
                    neutral: "#6b7280",
                    negative: "#ef4444"
                  },
                  positiveROIThreshold: 0,
                  negativeROIThreshold: 0,
                  customROICalculation: null
                }}
                rowActions={[]}
                rowExpansionTemplate={null}
                selectOnEdit={false}
                selectionMode={"multiple"}
                showCurrentPageReport={true}
                showExpandAllButtons={true}
                showFilterMatchModes={true}
                showFirstLastIcon={true}
                showPageLinks={true}
                style={{
                  textAlign: "center",
                  padding: "10px 4px",
                  fontWeight: "700",
                  fontSize: "13.5px",
                  color: "#111827",
                  backgroundColor: "#f9fafb",
                  whiteSpace: "nowrap",
                  minWidth: "80px",
                  maxWidth: "100px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  gap: "6px"
                }}
                tableSize={"normal"}
                textFilterColumns={[]}
                totalColumns={[]}
                ungroupedColumns={[]}
                useDirectCMSIntegration={true}
                validateExpansion={null}
              />
            </div>
            <Fetcher
              data-plasmic-name={"dataFetcher"}
              data-plasmic-override={overrides.dataFetcher}
              dataOp={{
                sourceId: "xuq4vtFviiVZiJUaPTUnzT",
                opId: "372d4633-0027-4635-bc60-5aa11264c772",
                userArgs: {},
                cacheKey: `plasmic.$.1xLA-ygRIjo6.$.372d4633-0027-4635-bc60-5aa11264c772.$.`,
                invalidatedKeys: null,
                roleId: null
              }}
              queries={$queries}
            >
              {($queries: any) => (
                <div className={classNames(projectcss.all, sty.freeBox__zzLUk)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return (() => {
                          let q = $queries.gIftCard.data.reduce(
                            (p, i) => ({
                              ...p,
                              [i.status]: i
                            }),
                            {}
                          );
                          return Object.entries($state.cardStatus).map(x => ({
                            icon: x[1][0],
                            org: x[0],
                            status: x[1][1],
                            total: q[x[0]].total_cards
                          }));
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lopW
                        )}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateSelectedStatus"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["selectedStatus"]
                                  },
                                  operation: 0,
                                  value: currentItem.org
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSelectedStatus"] != null &&
                            typeof $steps["updateSelectedStatus"] ===
                              "object" &&
                            typeof $steps["updateSelectedStatus"].then ===
                              "function"
                          ) {
                            $steps["updateSelectedStatus"] = await $steps[
                              "updateSelectedStatus"
                            ];
                          }
                        }}
                      >
                        <MolKpi
                          data-plasmic-name={"molKpi"}
                          data-plasmic-override={overrides.molKpi}
                          className={classNames("__wab_instance", sty.molKpi)}
                          count={(() => {
                            try {
                              return currentItem.total;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          icon={(() => {
                            try {
                              return currentItem.icon;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          status={(() => {
                            try {
                              return currentItem.status;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                    );
                  })}
                </div>
              )}
            </Fetcher>
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.table),
                data: (() => {
                  try {
                    return $queries.query;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                defaultSize: "small",
                fields: (() => {
                  const __composite = [
                    { key: "employeeCode", fieldId: "employeeCode" },
                    { key: "drPhoneNumber", fieldId: "drPhoneNumber" },
                    { key: "empName", fieldId: "empName" },
                    { key: "qr", fieldId: "qr", isHidden: null, expr: null },
                    { key: "designation", fieldId: "designation" },
                    { key: "verifyName", fieldId: "verifyName" },
                    {
                      key: "cardNo",
                      fieldId: "cardNo",
                      maximumFractionDigits: null,
                      notation: null,
                      disableSorting: null,
                      isHidden: null,
                      dataType: null
                    },
                    { key: "hq", fieldId: "hq" },
                    { key: "drName", fieldId: "drName" },
                    { key: "drCode", fieldId: "drCode" },
                    { key: "verifyScore", fieldId: "verifyScore" },
                    { key: "amount", fieldId: "amount" },
                    { key: "status", fieldId: "status" },
                    { key: "SL", fieldId: "SL", dataType: null },
                    { key: "createdDate", fieldId: "createdDate" },
                    { key: "kit", fieldId: "kit", dataType: null },
                    { key: "drCheckIn", fieldId: "drCheckIn" },
                    { key: "expiryDate", fieldId: "expiryDate" },
                    { key: "empPhone", fieldId: "empPhone" },
                    { key: "salesTeam", fieldId: "salesTeam" }
                  ];
                  __composite["3"]["isHidden"] = false;
                  __composite["3"]["expr"] = (currentItem, currentValue) => {
                    return `<img src='${currentValue}' />`;
                  };
                  __composite["6"]["maximumFractionDigits"] = 0;
                  __composite["6"]["notation"] = "standard";
                  __composite["6"]["disableSorting"] = false;
                  __composite["6"]["isHidden"] = false;
                  __composite["6"]["dataType"] = undefined;
                  __composite["13"]["dataType"] = undefined;
                  __composite["15"]["dataType"] = undefined;
                  return __composite;
                })(),

                hideSearch: false,
                onRowSelectionChanged: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "selectedRowKey",
                    ["table", "selectedRowKey"],
                    RichTable_Helpers
                  ).apply(null, eventArgs);
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "selectedRow",
                    ["table", "selectedRow"],
                    RichTable_Helpers
                  ).apply(null, eventArgs);
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "selectedRows",
                    ["table", "selectedRows"],
                    RichTable_Helpers
                  ).apply(null, eventArgs);
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "selectedRowKeys",
                    ["table", "selectedRowKeys"],
                    RichTable_Helpers
                  ).apply(null, eventArgs);
                },
                pageSize: 5,
                scopeClassName: sty["table__instance"],
                selectedRowKey: generateStateValueProp($state, [
                  "table",
                  "selectedRowKey"
                ]),
                selectedRowKeys: generateStateValueProp($state, [
                  "table",
                  "selectedRowKeys"
                ]),
                themeResetClassName: classNames(
                  projectcss.root_reset,
                  projectcss.root_reset_tags,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  styleTokensClassNames,
                  styleTokensClassNames_antd_5_hostless,
                  styleTokensClassNames_library_tailwind_3_4_colors,
                  styleTokensClassNames_library_tailwind_3_4_number_tokens,
                  styleTokensClassNames_plasmic_rich_components
                )
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "selectedRowKey",
                    plasmicStateName: "table.selectedRowKey"
                  },
                  {
                    name: "selectedRow",
                    plasmicStateName: "table.selectedRow"
                  },
                  {
                    name: "selectedRows",
                    plasmicStateName: "table.selectedRows"
                  },
                  {
                    name: "selectedRowKeys",
                    plasmicStateName: "table.selectedRowKeys"
                  }
                ],
                [],
                RichTable_Helpers ?? {},
                child$Props
              );

              return (
                <RichTable
                  data-plasmic-name={"table"}
                  data-plasmic-override={overrides.table}
                  {...child$Props}
                />
              );
            })()}
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.selectedStatus;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <AdvancedTable
              data-plasmic-name={"advancedDataTable"}
              data-plasmic-override={overrides.advancedDataTable}
              bulkActions={[]}
              cellHeight={"auto"}
              cellMaxHeight={"none"}
              cellMaxWidth={"none"}
              cellMinHeight={"auto"}
              cellMinWidth={"auto"}
              cellWidth={"auto"}
              className={
                "" + " " + classNames("__wab_instance", sty.advancedDataTable)
              }
              columnGroups={[]}
              columns={(() => {
                try {
                  return undefined;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              currentPage={1}
              data={(() => {
                try {
                  return $queries.query.data.filter(x =>
                    $state.selectedStatus == "total"
                      ? true
                      : x.status == $state.selectedStatus
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              defaultBodyStyle={{}}
              defaultHeaderStyle={{}}
              enableBulkActions={true}
              enableColumnFilter={true}
              enableColumnGrouping={false}
              enableColumnManagement={true}
              enableExport={true}
              enablePagination={true}
              enableRefresh={true}
              enableRowActions={false}
              enableRowSelection={true}
              enableSearch={true}
              enableSorting={true}
              error={null}
              fields={[]}
              footerColumnGroup={null}
              graphqlQuery={null}
              graphqlVariables={{}}
              groupConfig={{
                enableHeaderGroups: true,
                enableFooterGroups: true,
                groupStyle: {},
                headerGroupStyle: {},
                footerGroupStyle: {}
              }}
              headerColumnGroup={null}
              imageFields={(() => {
                try {
                  return $queries.query.data &&
                    $queries.query.data[0] &&
                    $queries.query.data[0].qr
                    ? ["qr"]
                    : [];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              loading={false}
              pageSize={5}
              pageSizeOptions={[5, 10, 25, 50, 100]}
              popupImageFields={(() => {
                try {
                  return ["qr"];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              refetchInterval={0}
              rowActions={[]}
              style={{}}
              tableHeight={"600px"}
              theme={"default"}
            />

            <PrimeDataTable
              allowExpansion={null}
              autoSavePivotConfig={false}
              booleanFilterColumns={[]}
              bulkActions={[]}
              className={
                "" +
                " " +
                classNames("__wab_instance", sty.primeReactDataTable__vjOTj)
              }
              collapseAllLabel={"Collapse All"}
              collapseIcon={"pi pi-minus"}
              columnGroups={[]}
              columns={[]}
              contextMenu={null}
              contextMenuSelection={null}
              currencyColumns={[]}
              currentPage={1}
              currentPageReportTemplate={
                "Showing {first} to {last} of {totalRecords} entries"
              }
              customFilterOptions={{}}
              customFormatters={{}}
              customGroupMappings={{}}
              customTemplates={{}}
              data={(() => {
                try {
                  return $queries.query.data.filter(x =>
                    $state.selectedStatus == "total"
                      ? true
                      : x.status == $state.selectedStatus
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              dataKey={null}
              datePickerFilterColumns={[]}
              dropdownFilterColumns={[]}
              editingRows={null}
              enableAutoColumnGrouping={false}
              enableAutoMerge={false}
              enableBulkActions={false}
              enableColumnFilter={true}
              enableColumnGrouping={false}
              enableColumnManagement={true}
              enableContextMenu={false}
              enableExcelExport={false}
              enableExpansionAnimation={true}
              enableExport={true}
              enableFilterApply={true}
              enableFilterClear={true}
              enableFilterFooter={true}
              enableFilterMatchModes={true}
              enableFilterMenu={true}
              enableFixedFooterTotals={false}
              enableFooterGroups={true}
              enableFooterTotals={false}
              enableFrozenColumns={false}
              enableFrozenRows={false}
              enableGlobalFilter={true}
              enableGridLines={true}
              enableHeaderGroups={true}
              enableHoverEffect={true}
              enableInlineEditing={false}
              enableLazyLoading={false}
              enablePagination={true}
              enablePdfExport={false}
              enablePivotPersistence={true}
              enablePivotTable={false}
              enablePivotUI={true}
              enableROICalculation={false}
              enableRefresh={false}
              enableReorderableColumns={false}
              enableResizableColumns={false}
              enableRowActions={false}
              enableRowExpansion={false}
              enableRowGrouping={false}
              enableRowSelection={false}
              enableSearch={true}
              enableSorting={true}
              enableStripedRows={true}
              enableVirtualScrolling={false}
              error={null}
              expandAllLabel={"Expand All"}
              expandIcon={"pi pi-plus"}
              expandedRows={null}
              expansionButtonClassName={""}
              expansionButtonStyle={{}}
              expansionColumnBody={null}
              expansionColumnHeader={null}
              expansionColumnPosition={"left"}
              expansionColumnStyle={{ width: "5rem" }}
              expansionColumnWidth={"5rem"}
              exportFileType={"csv"}
              exportFilename={"data"}
              fields={[]}
              filterDelay={300}
              filterDisplay={"menu"}
              filterLocale={"en"}
              footerColumnGroup={null}
              footerGroupStyle={{}}
              footerTotalsConfig={{
                showTotals: true,
                showAverages: false,
                showCounts: true,
                numberFormat: "en-US",
                currency: "USD",
                precision: 2
              }}
              globalFilterFields={[]}
              globalFilterPlaceholder={"Search..."}
              graphqlQuery={null}
              graphqlVariables={{}}
              groupConfig={{
                enableHeaderGroups: true,
                enableFooterGroups: true,
                groupStyle: {},
                headerGroupStyle: {},
                footerGroupStyle: {},
                groupSeparator: "__",
                ungroupedColumns: [],
                totalColumns: [],
                customGroupMappings: {},
                groupingPatterns: []
              }}
              groupSeparator={"__"}
              groupStyle={{}}
              groupingPatterns={[]}
              headerColumnGroup={null}
              headerGroupStyle={{}}
              imageFields={[]}
              loading={false}
              mergeConfig={{
                by: [],
                preserve: [],
                autoDetectMergeFields: true,
                mergeStrategy: "combine"
              }}
              metaKeySelection={true}
              nestedDataConfig={{
                enableNestedSorting: true,
                enableNestedFiltering: true,
                enableNestedPagination: false,
                nestedPageSize: 10
              }}
              nestedKey={null}
              numberFilterColumns={[]}
              onRowCollapse={null}
              onRowExpand={null}
              pageSize={10}
              pageSizeOptions={[5, 10, 25, 50, 100]}
              pivotAggregationFunctions={{}}
              pivotColumns={[]}
              pivotConfigKey={"pivotConfig"}
              pivotCurrency={"USD"}
              pivotFieldSeparator={"__"}
              pivotFilters={[]}
              pivotNumberFormat={"en-US"}
              pivotPrecision={2}
              pivotRows={[]}
              pivotShowColumnTotals={true}
              pivotShowGrandTotals={true}
              pivotShowRowTotals={true}
              pivotShowSubTotals={true}
              pivotSortColumns={true}
              pivotSortDirection={"asc"}
              pivotSortRows={true}
              pivotUIPosition={"toolbar"}
              pivotValues={[]}
              plasmicApiToken={""}
              plasmicTableConfigsId={""}
              plasmicWorkspaceId={""}
              popupImageFields={[]}
              refetchInterval={0}
              roiConfig={{
                revenueField: "revenue",
                costField: "cost",
                investmentField: "investment",
                profitField: "profit",
                calculationMethod: "standard",
                showROIColumn: true,
                showROIAsPercentage: true,
                roiColumnTitle: "ROI (%)",
                roiColumnKey: "roi",
                roiNumberFormat: "en-US",
                roiPrecision: 2,
                roiCurrency: "USD",
                enableROIColorCoding: true,
                roiColorThresholds: {
                  positive: "#22c55e",
                  neutral: "#6b7280",
                  negative: "#ef4444"
                },
                positiveROIThreshold: 0,
                negativeROIThreshold: 0,
                customROICalculation: null
              }}
              rowActions={[]}
              rowExpansionTemplate={null}
              selectOnEdit={false}
              selectionMode={"multiple"}
              showCurrentPageReport={true}
              showExpandAllButtons={true}
              showFilterMatchModes={true}
              showFirstLastIcon={true}
              showPageLinks={true}
              style={{
                textAlign: "center",
                padding: "10px 4px",
                fontWeight: "700",
                fontSize: "13.5px",
                color: "#111827",
                backgroundColor: "#f9fafb",
                whiteSpace: "nowrap",
                minWidth: "80px",
                maxWidth: "100px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                gap: "6px"
              }}
              tableSize={"normal"}
              textFilterColumns={[]}
              totalColumns={[]}
              ungroupedColumns={[]}
              useDirectCMSIntegration={true}
              validateExpansion={null}
            />
          </Layout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "layout",
    "dataFetcher",
    "molKpi",
    "table",
    "text",
    "advancedDataTable"
  ],
  layout: [
    "layout",
    "dataFetcher",
    "molKpi",
    "table",
    "text",
    "advancedDataTable"
  ],
  dataFetcher: ["dataFetcher", "molKpi"],
  molKpi: ["molKpi"],
  table: ["table"],
  text: ["text"],
  advancedDataTable: ["advancedDataTable"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  layout: typeof Layout;
  dataFetcher: typeof Fetcher;
  molKpi: typeof MolKpi;
  table: typeof RichTable;
  text: "div";
  advancedDataTable: typeof AdvancedTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGiftcard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGiftcard__VariantsArgs;
    args?: PlasmicGiftcard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGiftcard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicGiftcard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicGiftcard__ArgProps,
          internalVariantPropNames: PlasmicGiftcard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGiftcard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGiftcard";
  } else {
    func.displayName = `PlasmicGiftcard.${nodeName}`;
  }
  return func;
}

export const PlasmicGiftcard = Object.assign(
  // Top-level PlasmicGiftcard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    layout: makeNodeComponent("layout"),
    dataFetcher: makeNodeComponent("dataFetcher"),
    molKpi: makeNodeComponent("molKpi"),
    table: makeNodeComponent("table"),
    text: makeNodeComponent("text"),
    advancedDataTable: makeNodeComponent("advancedDataTable"),

    // Metadata about props expected for PlasmicGiftcard
    internalVariantProps: PlasmicGiftcard__VariantProps,
    internalArgProps: PlasmicGiftcard__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicGiftcard;
/* prettier-ignore-end */
