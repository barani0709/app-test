/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: 0wJf7ppvf67T

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import Label from "../../Label"; // plasmic-import: _L7DdH4fVzRf/component
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicTestItemCard.module.css"; // plasmic-import: 0wJf7ppvf67T/css

createPlasmicElementProxy;

export type PlasmicTestItemCard__VariantMembers = {};
export type PlasmicTestItemCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicTestItemCard__VariantsArgs;
export const PlasmicTestItemCard__VariantProps = new Array<VariantPropType>();

export type PlasmicTestItemCard__ArgsType = {
  mrp?: string;
  ptr?: string;
  pts?: string;
  item?: string;
  brand?: string;
  images?: any;
  composition?: string;
  lable?: string;
  advantages?: string;
  dosage?: string;
  targetCustomers?: string;
  marketSize?: string;
  patientProfile?: string;
  indication?: string;
  mechanismOfAction?: string;
};
type ArgPropType = keyof PlasmicTestItemCard__ArgsType;
export const PlasmicTestItemCard__ArgProps = new Array<ArgPropType>(
  "mrp",
  "ptr",
  "pts",
  "item",
  "brand",
  "images",
  "composition",
  "lable",
  "advantages",
  "dosage",
  "targetCustomers",
  "marketSize",
  "patientProfile",
  "indication",
  "mechanismOfAction"
);

export type PlasmicTestItemCard__OverridesType = {
  root?: Flex__<"div">;
  columns?: Flex__<"div">;
  column?: Flex__<"div">;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  img?: Flex__<typeof PlasmicImg__>;
  tabs?: Flex__<typeof AntdTabs>;
};

export interface DefaultTestItemCardProps {
  mrp?: string;
  ptr?: string;
  pts?: string;
  item?: string;
  brand?: string;
  images?: any;
  composition?: string;
  lable?: string;
  advantages?: string;
  dosage?: string;
  targetCustomers?: string;
  marketSize?: string;
  patientProfile?: string;
  indication?: string;
  mechanismOfAction?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTestItemCard__RenderFunc(props: {
  variants: PlasmicTestItemCard__VariantsArgs;
  args: PlasmicTestItemCard__ArgsType;
  overrides: PlasmicTestItemCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          mrp: "\u20b9140",
          ptr: "\u20b9110",
          pts: "\u20b990",
          item: "ARNIBLOC 100",
          brand: "ARNIBLOC",
          images: [
            {
              url: "https://elbrit.twic.pics/Elbrit2%2FCardi%20Q%2FDSC08017%20copy.jpg?alt=media"
            },
            {
              url: "https://elbrit.twic.pics/Elbrit2%2FCardi%20Q%2FDSC08020%20copy.jpg?alt=media"
            }
          ],
          composition: "Sacubitril 48 mg + Valsartan 52 mg",
          advantages: "Combination therapy for heart failure management",
          dosage: "OD",
          targetCustomers: "Cardiology",
          patientProfile: "Patients with heart failure",
          indication: "Heart failure",
          mechanismOfAction:
            "Sacubitril inhibits neprilysin, increasing levels of natriuretic peptides. Valsartan blocks angiotensin II receptors, reducing vasoconstriction and aldosterone secretion, lowering blood pressure and reducing cardiac workload."
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? "1" : "2"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_library_tailwind_3_4_colors,
        styleTokensClassNames_library_tailwind_3_4_number_tokens,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div
          data-plasmic-name={"column"}
          data-plasmic-override={overrides.column}
          className={classNames(projectcss.all, sty.column)}
        >
          {(() => {
            const child$Props = {
              arrows: false,
              autoplay: true,
              autoplaySpeed: 3000,
              beforeChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "currentSlide",
                  ["sliderCarousel", "currentSlide"],
                  SliderWrapper_Helpers
                ).apply(null, eventArgs);
              },
              centerMode: hasVariant(globalVariants, "screen", "mobileOnly")
                ? false
                : false,
              className: classNames("__wab_instance", sty.sliderCarousel),
              cssEase: "linear",
              dots: true,
              infinite: hasVariant(globalVariants, "screen", "mobileOnly")
                ? true
                : true,
              initialSlide: generateStateValueProp($state, [
                "sliderCarousel",
                "currentSlide"
              ]),
              ref: ref => {
                $refs["sliderCarousel"] = ref;
              },
              sliderScopeClassName: sty["sliderCarousel__slider"],
              speed: hasVariant(globalVariants, "screen", "mobileOnly")
                ? 500
                : 2000
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "currentSlide",
                  plasmicStateName: "sliderCarousel.currentSlide"
                }
              ],
              [],
              SliderWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <SliderWrapper
                data-plasmic-name={"sliderCarousel"}
                data-plasmic-override={overrides.sliderCarousel}
                {...child$Props}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $props.images;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__l0P6K)}
                      key={currentIndex}
                    >
                      <PlasmicImg__
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={(() => {
                          try {
                            return currentItem.url;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "https://elbrit.twic.pics/Elbrit2%2FCardi%20Q%2FDSC08017%20copy.jpg?alt=media";
                            }
                            throw e;
                          }
                        })()}
                      />
                    </div>
                  );
                })}
              </SliderWrapper>
            );
          })()}
          <div className={classNames(projectcss.all, sty.freeBox__luLL)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__meOrN
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.item;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "ARNIBLOC 100";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nTzj5
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return `BRAND: ${$props.brand}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <Label className={classNames("__wab_instance", sty.label__bnEsD)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5IbEj
                )}
              >
                {"MRP:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cqSXs
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.mrp;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Label";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8Patg
                )}
              >
                {"|"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cvlQ
                )}
              >
                {"PTR:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fXq01
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.ptr;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Label";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kVeEz
                )}
              >
                {"|"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wjHnz
                )}
              >
                {"PTS:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nKdKz
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.pts;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Label";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Label>
          </div>
        </div>
      </div>
      <AntdTabs
        data-plasmic-name={"tabs"}
        data-plasmic-override={overrides.tabs}
        activeKey={generateStateValueProp($state, ["tabs", "activeKey"])}
        animateTabBar={true}
        animateTabContent={false}
        animated={true}
        centered={false}
        className={classNames("__wab_instance", sty.tabs)}
        defaultActiveKey={
          hasVariant(globalVariants, "screen", "mobileOnly") ? "1" : "2"
        }
        items={
          <React.Fragment>
            <AntdTabItem
              className={classNames("__wab_instance", sty.tabItem__bovth)}
              key={"1"}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__flAKs
                  )}
                >
                  {"Overview "}
                </div>
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ydU1D
                )}
              >
                {"First Children"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__gsr1I)}>
                <Label
                  className={classNames("__wab_instance", sty.label___96L)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__exDik
                    )}
                  >
                    {"Composition:"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__h433G
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.composition;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Label";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Label>
                <Label
                  className={classNames("__wab_instance", sty.label__wb8QY)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__y2Gjw)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bKib6
                      )}
                    >
                      {"Lable Claim:"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bkrqU)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__glJqj
                        )}
                      >
                        <div
                          className={projectcss.__wab_expr_html_text}
                          dangerouslySetInnerHTML={{
                            __html: (() => {
                              try {
                                return $props.lable;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Lable Claim:";
                                }
                                throw e;
                              }
                            })()
                          }}
                        />
                      </div>
                    </div>
                  </div>
                </Label>
                <div className={classNames(projectcss.all, sty.freeBox__pUgqb)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__d3CXm)}
                  >
                    <Label
                      className={classNames("__wab_instance", sty.label__wexQ7)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qzfPq
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xAcWn
                          )}
                        >
                          {"Market Size"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hqunQ
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $props.marketSize;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </Label>
                    <Label
                      className={classNames("__wab_instance", sty.label__a6RWp)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jIiH9
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__v2A6D
                          )}
                        >
                          {"Mechanism of Action"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ycH0C
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $props.mechanismOfAction;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </Label>
                    <Label
                      className={classNames("__wab_instance", sty.label__xdBeJ)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ktBnc
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lFaq
                          )}
                        >
                          {"Patient Profile"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__i7Pr
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $props.patientProfile;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </Label>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yo2Ou)}
                  >
                    <Label
                      className={classNames("__wab_instance", sty.label__jcmck)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vSjS5
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__b2Xiy
                          )}
                        >
                          {"Dosage"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tfSp9
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $props.dosage;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </Label>
                    <Label
                      className={classNames("__wab_instance", sty.label__uwetm)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__soSmA
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ulHnZ
                          )}
                        >
                          {"Advantages"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__g9PPt
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $props.advantages;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </Label>
                    <Label
                      className={classNames("__wab_instance", sty.label__pfgLk)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wIPcy
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gf7PM
                          )}
                        >
                          {"Target Customers"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tfDRp
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $props.targetCustomers;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </Label>
                  </div>
                </div>
              </div>
            </AntdTabItem>
            <AntdTabItem
              className={classNames("__wab_instance", sty.tabItem__mpXip)}
              key={"2"}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jieLd
                  )}
                >
                  {"Indication "}
                </div>
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rWmXe
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.indication;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Second Children";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </AntdTabItem>
          </React.Fragment>
        }
        onChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["tabs", "activeKey"]).apply(
            null,
            eventArgs
          );
        }}
        size={"small"}
        sticky={false}
        tabBarBackground={"#FFF"}
        tabBarClassName={classNames({ [sty["pcls_kh5XyhHs_vH6"]]: true })}
        tabPosition={"top"}
        tabsDropdownClassName={classNames({ [sty["pcls_PHqMidNlFWT8"]]: true })}
        tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
        tabsScopeClassName={sty["tabs__tabs"]}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "column", "sliderCarousel", "img", "tabs"],
  columns: ["columns", "column", "sliderCarousel", "img"],
  column: ["column", "sliderCarousel", "img"],
  sliderCarousel: ["sliderCarousel", "img"],
  img: ["img"],
  tabs: ["tabs"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  column: "div";
  sliderCarousel: typeof SliderWrapper;
  img: typeof PlasmicImg__;
  tabs: typeof AntdTabs;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestItemCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestItemCard__VariantsArgs;
    args?: PlasmicTestItemCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTestItemCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTestItemCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTestItemCard__ArgProps,
          internalVariantPropNames: PlasmicTestItemCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTestItemCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestItemCard";
  } else {
    func.displayName = `PlasmicTestItemCard.${nodeName}`;
  }
  return func;
}

export const PlasmicTestItemCard = Object.assign(
  // Top-level PlasmicTestItemCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    img: makeNodeComponent("img"),
    tabs: makeNodeComponent("tabs"),

    // Metadata about props expected for PlasmicTestItemCard
    internalVariantProps: PlasmicTestItemCard__VariantProps,
    internalArgProps: PlasmicTestItemCard__ArgProps
  }
);

export default PlasmicTestItemCard;
/* prettier-ignore-end */
