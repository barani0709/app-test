/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: yD8xSnP8IEKI

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { PrimeDataTable } from "../../PrimeDataTable"; // plasmic-import: BYlkqz28tT8N/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicSass.module.css"; // plasmic-import: yD8xSnP8IEKI/css

createPlasmicElementProxy;

export type PlasmicSass__VariantMembers = {};
export type PlasmicSass__VariantsArgs = {};
type VariantPropType = keyof PlasmicSass__VariantsArgs;
export const PlasmicSass__VariantProps = new Array<VariantPropType>();

export type PlasmicSass__ArgsType = {};
type ArgPropType = keyof PlasmicSass__ArgsType;
export const PlasmicSass__ArgProps = new Array<ArgPropType>();

export type PlasmicSass__OverridesType = {
  root?: Flex__<"div">;
  primeReactDataTable?: Flex__<typeof PrimeDataTable>;
};

export interface DefaultSassProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSass__RenderFunc(props: {
  variants: PlasmicSass__VariantsArgs;
  args: PlasmicSass__ArgsType;
  overrides: PlasmicSass__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    profile: usePlasmicDataOp(() => {
      return {
        sourceId: "kipZkDNi8dCzZdLA5QF7Pw",
        opId: "d4aea0a0-bac9-4dba-b8ad-0894376d1eaa",
        userArgs: {},
        cacheKey: `plasmic.$.d4aea0a0-bac9-4dba-b8ad-0894376d1eaa.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_library_tailwind_3_4_colors,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <PrimeDataTable
            data-plasmic-name={"primeReactDataTable"}
            data-plasmic-override={overrides.primeReactDataTable}
            allowExpansion={null}
            autoSavePivotConfig={false}
            booleanFilterColumns={[]}
            bulkActions={[]}
            className={
              "" + " " + classNames("__wab_instance", sty.primeReactDataTable)
            }
            collapseAllLabel={"Collapse All"}
            collapseIcon={"pi pi-minus"}
            columnGroups={[]}
            columns={[]}
            contextMenu={null}
            contextMenuSelection={null}
            currencyColumns={[]}
            currentPage={1}
            currentPageReportTemplate={
              "Showing {first} to {last} of {totalRecords} entries"
            }
            customFilterOptions={{}}
            customFormatters={{}}
            customGroupMappings={{}}
            customTemplates={{}}
            data={(() => {
              try {
                return undefined;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            dataKey={null}
            datePickerFilterColumns={[]}
            dropdownFilterColumns={[]}
            editingRows={null}
            enableAutoColumnGrouping={false}
            enableAutoMerge={false}
            enableBulkActions={false}
            enableColumnFilter={true}
            enableColumnGrouping={false}
            enableColumnManagement={true}
            enableContextMenu={false}
            enableExcelExport={false}
            enableExpansionAnimation={true}
            enableExport={true}
            enableFilterApply={true}
            enableFilterClear={true}
            enableFilterFooter={true}
            enableFilterMatchModes={true}
            enableFilterMenu={true}
            enableFixedFooterTotals={false}
            enableFooterGroups={true}
            enableFooterTotals={false}
            enableFrozenColumns={true}
            enableFrozenRows={true}
            enableGlobalFilter={true}
            enableGridLines={true}
            enableHeaderGroups={true}
            enableHoverEffect={true}
            enableInlineEditing={false}
            enableLazyLoading={true}
            enablePagination={true}
            enablePdfExport={false}
            enablePivotPersistence={true}
            enablePivotTable={false}
            enablePivotUI={true}
            enableROICalculation={false}
            enableRefresh={false}
            enableReorderableColumns={true}
            enableResizableColumns={true}
            enableRowActions={false}
            enableRowExpansion={true}
            enableRowGrouping={true}
            enableRowSelection={false}
            enableSearch={true}
            enableSorting={true}
            enableStripedRows={true}
            enableVirtualScrolling={true}
            error={null}
            expandAllLabel={"Expand All"}
            expandIcon={"pi pi-plus"}
            expandedRows={null}
            expansionButtonClassName={""}
            expansionButtonStyle={{}}
            expansionColumnBody={null}
            expansionColumnHeader={null}
            expansionColumnPosition={"left"}
            expansionColumnStyle={{ width: "5rem" }}
            expansionColumnWidth={"5rem"}
            exportFileType={"csv"}
            exportFilename={"data"}
            fields={[]}
            filterDelay={300}
            filterDisplay={"menu"}
            filterLocale={"en"}
            footerColumnGroup={null}
            footerGroupStyle={{}}
            footerTotalsConfig={{
              showTotals: true,
              showAverages: false,
              showCounts: true,
              numberFormat: "en-US",
              currency: "USD",
              precision: 2
            }}
            globalFilterFields={[]}
            globalFilterPlaceholder={"Search..."}
            graphqlQuery={null}
            graphqlVariables={{}}
            groupConfig={{
              enableHeaderGroups: true,
              enableFooterGroups: true,
              groupStyle: {},
              headerGroupStyle: {},
              footerGroupStyle: {},
              groupSeparator: "__",
              ungroupedColumns: [],
              totalColumns: [],
              customGroupMappings: {},
              groupingPatterns: []
            }}
            groupSeparator={"__"}
            groupStyle={{}}
            groupingPatterns={[]}
            headerColumnGroup={null}
            headerGroupStyle={{}}
            imageFields={[]}
            loading={false}
            mergeConfig={{
              by: [],
              preserve: [],
              autoDetectMergeFields: true,
              mergeStrategy: "combine"
            }}
            metaKeySelection={true}
            nestedDataConfig={{
              enableNestedSorting: true,
              enableNestedFiltering: true,
              enableNestedPagination: false,
              nestedPageSize: 10
            }}
            nestedKey={null}
            numberFilterColumns={[]}
            onRowCollapse={null}
            onRowExpand={null}
            pageSize={10}
            pageSizeOptions={[5, 10, 25, 50, 100]}
            pivotAggregationFunctions={{}}
            pivotColumns={[]}
            pivotConfigKey={"pivotConfig"}
            pivotCurrency={"USD"}
            pivotFieldSeparator={"__"}
            pivotFilters={[]}
            pivotNumberFormat={"en-US"}
            pivotPrecision={2}
            pivotRows={[]}
            pivotShowColumnTotals={true}
            pivotShowGrandTotals={true}
            pivotShowRowTotals={true}
            pivotShowSubTotals={true}
            pivotSortColumns={true}
            pivotSortDirection={"asc"}
            pivotSortRows={true}
            pivotUIPosition={"toolbar"}
            pivotValues={[]}
            plasmicApiToken={""}
            plasmicTableConfigsId={""}
            plasmicWorkspaceId={""}
            popupImageFields={[]}
            refetchInterval={0}
            roiConfig={{
              revenueField: "revenue",
              costField: "cost",
              investmentField: "investment",
              profitField: "profit",
              calculationMethod: "standard",
              showROIColumn: true,
              showROIAsPercentage: true,
              roiColumnTitle: "ROI (%)",
              roiColumnKey: "roi",
              roiNumberFormat: "en-US",
              roiPrecision: 2,
              roiCurrency: "USD",
              enableROIColorCoding: true,
              roiColorThresholds: {
                positive: "#22c55e",
                neutral: "#6b7280",
                negative: "#ef4444"
              },
              positiveROIThreshold: 0,
              negativeROIThreshold: 0,
              customROICalculation: null
            }}
            rowActions={[]}
            rowExpansionTemplate={null}
            selectOnEdit={false}
            selectionMode={"multiple"}
            showCurrentPageReport={true}
            showExpandAllButtons={true}
            showFilterMatchModes={true}
            showFirstLastIcon={true}
            showPageLinks={true}
            style={{}}
            tableSize={"normal"}
            textFilterColumns={[]}
            totalColumns={[]}
            ungroupedColumns={[]}
            useDirectCMSIntegration={true}
            validateExpansion={null}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "primeReactDataTable"],
  primeReactDataTable: ["primeReactDataTable"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  primeReactDataTable: typeof PrimeDataTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSass__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSass__VariantsArgs;
    args?: PlasmicSass__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSass__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSass__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSass__ArgProps,
          internalVariantPropNames: PlasmicSass__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSass__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSass";
  } else {
    func.displayName = `PlasmicSass.${nodeName}`;
  }
  return func;
}

export const PlasmicSass = Object.assign(
  // Top-level PlasmicSass renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    primeReactDataTable: makeNodeComponent("primeReactDataTable"),

    // Metadata about props expected for PlasmicSass
    internalVariantProps: PlasmicSass__VariantProps,
    internalArgProps: PlasmicSass__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSass;
/* prettier-ignore-end */
