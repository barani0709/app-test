/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: 5ad-lh9d17tn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import AtomMenuItem from "../../AtomMenuItem"; // plasmic-import: U5XW7pkODig0/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicSidebar.module.css"; // plasmic-import: 5ad-lh9d17tn/css

createPlasmicElementProxy;

export type PlasmicSidebar__VariantMembers = {
  mobileView: "mobileView";
};
export type PlasmicSidebar__VariantsArgs = {
  mobileView?: SingleBooleanChoiceArg<"mobileView">;
};
type VariantPropType = keyof PlasmicSidebar__VariantsArgs;
export const PlasmicSidebar__VariantProps = new Array<VariantPropType>(
  "mobileView"
);

export type PlasmicSidebar__ArgsType = {
  menu?: any;
  toggleMode?: boolean;
  icons?: React.ComponentProps<typeof PlasmicImg__>["src"];
};
type ArgPropType = keyof PlasmicSidebar__ArgsType;
export const PlasmicSidebar__ArgProps = new Array<ArgPropType>(
  "menu",
  "toggleMode",
  "icons"
);

export type PlasmicSidebar__OverridesType = {
  rowContainer?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  leftBar?: Flex__<typeof CmsQueryRepeater>;
  rightBar?: Flex__<typeof CmsQueryRepeater>;
  moreTop?: Flex__<typeof CmsQueryRepeater>;
  moreBottom?: Flex__<typeof CmsQueryRepeater>;
};

export interface DefaultSidebarProps {
  menu?: any;
  toggleMode?: boolean;
  icons?: React.ComponentProps<typeof PlasmicImg__>["src"];
  mobileView?: SingleBooleanChoiceArg<"mobileView">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSidebar__RenderFunc(props: {
  variants: PlasmicSidebar__VariantsArgs;
  args: PlasmicSidebar__ArgsType;
  overrides: PlasmicSidebar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          menu: [
            {
              label: "Dashboard",
              icon: "search.svg",
              href: "/dashboard",
              active: true
            },
            { label: "Analytics", icon: "chart-bar", href: "/analytics" },
            { label: "Projects", icon: "folder", href: "/projects" },
            { label: "Team", icon: "users", href: "/team" },
            { label: "Settings", icon: "cog", href: "/settings" }
          ],
          toggleMode: false,
          icons: {
            src: "/plasmic/elbrit_app/images/diagramSvg.svg",
            fullWidth: 173,
            fullHeight: 150,
            aspectRatio: 1.151631
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "collapse",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.toggleMode;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "mobileView",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.mobileView
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"rowContainer"}
      data-plasmic-override={overrides.rowContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_library_tailwind_3_4_colors,
        styleTokensClassNames_library_tailwind_3_4_number_tokens,
        styleTokensClassNames_plasmic_rich_components,
        sty.rowContainer,
        {
          [sty.rowContainermobileView]: hasVariant(
            $state,
            "mobileView",
            "mobileView"
          )
        }
      )}
      style={
        hasVariant($state, "mobileView", "mobileView")
          ? undefined
          : (() => {
              try {
                return (
                  // {'width':$state.collapse?"8vw":"20vw"}
                  {
                    width: $state.collapse ? "8vw" : "20vw",
                    transition: "all 0.4s ease-in-out",
                    boxShadow: "0 0 10px rgba(0,0,0,0.2)",
                    backdropFilter: "blur(10px)",
                    WebkitBackdropFilter: "blur(10px)",
                    borderRadius: "0.25rem",
                    background: "rgba(255, 255, 255, 0.1)",
                    border: "1px solid rgba(255, 255, 255, 0.2)",
                    ":hover": {
                      width: $state.collapse ? "12vw" : "22vw",
                      boxShadow: "0 0 15px rgba(0, 123, 255, 0.5)",
                      background: "rgba(255, 255, 255, 0.15)",
                      border: "1px solid rgba(0, 123, 255, 0.4)"
                    }
                  }
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()
      }
    >
      <PlasmicLink__
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(projectcss.all, projectcss.a, sty.link, {
          [sty.linkmobileView]: hasVariant($state, "mobileView", "mobileView")
        })}
        component={Link}
        platform={"nextjs"}
      >
        {(() => {
          try {
            return !$state.collapse;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img___7DbtR)}
            displayHeight={"37px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/elbrit_app/images/imageJpeg.jpg",
              fullWidth: 800,
              fullHeight: 136,
              aspectRatio: undefined
            }}
          />
        ) : null}
        {(() => {
          try {
            return $state.collapse;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img___5BOU, {
              [sty.imgmobileView___5BOUIyJEu]: hasVariant(
                $state,
                "mobileView",
                "mobileView"
              )
            })}
            displayHeight={"10vh"}
            displayMaxHeight={"100%"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/elbrit_app/images/elbritLogoE2Jpg2.jpg",
              fullWidth: 397,
              fullHeight: 397,
              aspectRatio: undefined
            }}
          />
        ) : null}
      </PlasmicLink__>
      <CmsQueryRepeater
        data-plasmic-name={"leftBar"}
        data-plasmic-override={overrides.leftBar}
        className={classNames("__wab_instance", sty.leftBar, {
          [sty.leftBarmobileView]: hasVariant(
            $state,
            "mobileView",
            "mobileView"
          )
        })}
        desc={false}
        emptyMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gvbQp,
                  {
                    [sty.textmobileView__gvbQpIyJEu]: hasVariant(
                      $state,
                      "mobileView",
                      "mobileView"
                    )
                  }
                )}
              >
                {"No matching published entries found."}
              </div>
            )}
          </DataCtxReader__>
        }
        fields={["type", "menuName", "icon", "link"]}
        filterField={(() => {
          try {
            return "type";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "menuName";
            }
            throw e;
          }
        })()}
        filterValue={"Left"}
        forceEmptyState={false}
        forceLoadingState={false}
        limit={0}
        loadingMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nguA4,
                  {
                    [sty.textmobileView__nguA4IyJEu]: hasVariant(
                      $state,
                      "mobileView",
                      "mobileView"
                    )
                  }
                )}
              >
                {"Loading..."}
              </div>
            )}
          </DataCtxReader__>
        }
        mode={"rows"}
        noAutoRepeat={false}
        noLayout={false}
        table={"menu"}
        useDraft={false}
      >
        <DataCtxReader__>
          {$ctx => (
            <AtomMenuItem
              className={classNames("__wab_instance", sty.atomMenuItem__r3E7, {
                [sty.atomMenuItemmobileView__r3E7IyJEu]: hasVariant(
                  $state,
                  "mobileView",
                  "mobileView"
                )
              })}
              icon={(() => {
                try {
                  return $ctx.plasmicCmsMenuItem.data.icon.url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      src: "/plasmic/elbrit_app/images/_3507746CardGiftIconotekaMoneyRedeemShopShopping107669Svg.svg",
                      fullWidth: 24,
                      fullHeight: 24,
                      aspectRatio: 1
                    };
                  }
                  throw e;
                }
              })()}
              iconMode={
                hasVariant($state, "mobileView", "mobileView")
                  ? true
                  : hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : (() => {
                      try {
                        return $state.collapse;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              }
              link={(() => {
                try {
                  return $ctx.plasmicCmsMenuItem.data.link;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return `/giftcard`;
                  }
                  throw e;
                }
              })()}
              name={(() => {
                try {
                  return $ctx.plasmicCmsMenuItem.data.menuName;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          )}
        </DataCtxReader__>
      </CmsQueryRepeater>
      {(hasVariant($state, "mobileView", "mobileView") ? true : false) ? (
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img___0XP4M, {
            [sty.imgmobileView___0XP4MIyJEu]: hasVariant(
              $state,
              "mobileView",
              "mobileView"
            )
          })}
          displayHeight={
            hasVariant($state, "mobileView", "mobileView") &&
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "48px"
              : hasVariant($state, "mobileView", "mobileView")
              ? "50px"
              : "38px"
          }
          displayMaxHeight={"100%"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          onClick={async event => {
            const $steps = {};

            $steps["goToHome"] = true
              ? (() => {
                  const actionArgs = { destination: `/` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToHome"] != null &&
              typeof $steps["goToHome"] === "object" &&
              typeof $steps["goToHome"].then === "function"
            ) {
              $steps["goToHome"] = await $steps["goToHome"];
            }
          }}
          src={{
            src: "/plasmic/elbrit_app/images/elbritLogoE2Jpg2.jpg",
            fullWidth: 397,
            fullHeight: 397,
            aspectRatio: undefined
          }}
        />
      ) : null}
      <CmsQueryRepeater
        data-plasmic-name={"rightBar"}
        data-plasmic-override={overrides.rightBar}
        className={classNames("__wab_instance", sty.rightBar, {
          [sty.rightBarmobileView]: hasVariant(
            $state,
            "mobileView",
            "mobileView"
          )
        })}
        desc={false}
        emptyMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wwLzz,
                  {
                    [sty.textmobileView__wwLzzIyJEu]: hasVariant(
                      $state,
                      "mobileView",
                      "mobileView"
                    )
                  }
                )}
              >
                {"No matching published entries found."}
              </div>
            )}
          </DataCtxReader__>
        }
        fields={["type", "menuName", "icon", "link"]}
        filterField={(() => {
          try {
            return "type";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "menuName";
            }
            throw e;
          }
        })()}
        filterValue={"Right"}
        forceEmptyState={false}
        forceLoadingState={false}
        limit={0}
        loadingMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__m5VlN,
                  {
                    [sty.textmobileView__m5VlNIyJEu]: hasVariant(
                      $state,
                      "mobileView",
                      "mobileView"
                    )
                  }
                )}
              >
                {"Loading..."}
              </div>
            )}
          </DataCtxReader__>
        }
        mode={"rows"}
        noAutoRepeat={false}
        noLayout={false}
        table={"menu"}
        useDraft={false}
      >
        <DataCtxReader__>
          {$ctx => (
            <div
              className={classNames(projectcss.all, sty.freeBox__xGwzX, {
                [sty.freeBoxmobileView__xGwzXIyJEu]: hasVariant(
                  $state,
                  "mobileView",
                  "mobileView"
                )
              })}
            >
              <AtomMenuItem
                className={classNames(
                  "__wab_instance",
                  sty.atomMenuItem___197O6,
                  {
                    [sty.atomMenuItemmobileView___197O6IyJEu]: hasVariant(
                      $state,
                      "mobileView",
                      "mobileView"
                    )
                  }
                )}
                icon={(() => {
                  try {
                    return $ctx.plasmicCmsMenuItem.data.icon.url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return {
                        src: "/plasmic/elbrit_app/images/_3507746CardGiftIconotekaMoneyRedeemShopShopping107669Svg.svg",
                        fullWidth: 24,
                        fullHeight: 24,
                        aspectRatio: 1
                      };
                    }
                    throw e;
                  }
                })()}
                iconMode={
                  hasVariant($state, "mobileView", "mobileView")
                    ? true
                    : (() => {
                        try {
                          return $state.collapse;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                }
                link={(() => {
                  try {
                    return $ctx.plasmicCmsMenuItem.data.link;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return `/giftcard`;
                    }
                    throw e;
                  }
                })()}
                name={(() => {
                  try {
                    return $ctx.plasmicCmsMenuItem.data.menuName;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          )}
        </DataCtxReader__>
      </CmsQueryRepeater>
      <CmsQueryRepeater
        data-plasmic-name={"moreTop"}
        data-plasmic-override={overrides.moreTop}
        className={classNames("__wab_instance", sty.moreTop, {
          [sty.moreTopmobileView]: hasVariant(
            $state,
            "mobileView",
            "mobileView"
          )
        })}
        desc={false}
        emptyMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9Twqt,
                  {
                    [sty.textmobileView___9TwqtIyJEu]: hasVariant(
                      $state,
                      "mobileView",
                      "mobileView"
                    )
                  }
                )}
              >
                {"No matching published entries found."}
              </div>
            )}
          </DataCtxReader__>
        }
        fields={["type", "menuName", "icon", "link"]}
        filterField={(() => {
          try {
            return "type";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "menuName";
            }
            throw e;
          }
        })()}
        filterValue={"more top"}
        forceEmptyState={false}
        forceLoadingState={false}
        limit={0}
        loadingMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lwRnn,
                  {
                    [sty.textmobileView__lwRnnIyJEu]: hasVariant(
                      $state,
                      "mobileView",
                      "mobileView"
                    )
                  }
                )}
              >
                {"Loading..."}
              </div>
            )}
          </DataCtxReader__>
        }
        mode={"rows"}
        noAutoRepeat={false}
        noLayout={false}
        table={"menu"}
        useDraft={false}
      >
        <DataCtxReader__>
          {$ctx => (
            <div
              className={classNames(projectcss.all, sty.freeBox___8AoFc, {
                [sty.freeBoxmobileView___8AoFcIyJEu]: hasVariant(
                  $state,
                  "mobileView",
                  "mobileView"
                )
              })}
            >
              <AtomMenuItem
                className={classNames(
                  "__wab_instance",
                  sty.atomMenuItem__hoqPb,
                  {
                    [sty.atomMenuItemmobileView__hoqPbIyJEu]: hasVariant(
                      $state,
                      "mobileView",
                      "mobileView"
                    )
                  }
                )}
                icon={(() => {
                  try {
                    return $ctx.plasmicCmsMenuItem.data.icon.url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return {
                        src: "/plasmic/elbrit_app/images/_3507746CardGiftIconotekaMoneyRedeemShopShopping107669Svg.svg",
                        fullWidth: 24,
                        fullHeight: 24,
                        aspectRatio: 1
                      };
                    }
                    throw e;
                  }
                })()}
                iconMode={
                  hasVariant($state, "mobileView", "mobileView")
                    ? (() => {
                        try {
                          return $state.collapse;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return $state.collapse;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                }
                link={(() => {
                  try {
                    return $ctx.plasmicCmsMenuItem.data.link;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return `/giftcard`;
                    }
                    throw e;
                  }
                })()}
                name={(() => {
                  try {
                    return $ctx.plasmicCmsMenuItem.data.menuName;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          )}
        </DataCtxReader__>
      </CmsQueryRepeater>
      <CmsQueryRepeater
        data-plasmic-name={"moreBottom"}
        data-plasmic-override={overrides.moreBottom}
        className={classNames("__wab_instance", sty.moreBottom, {
          [sty.moreBottommobileView]: hasVariant(
            $state,
            "mobileView",
            "mobileView"
          )
        })}
        desc={false}
        emptyMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kzTb,
                  {
                    [sty.textmobileView__kzTbIyJEu]: hasVariant(
                      $state,
                      "mobileView",
                      "mobileView"
                    )
                  }
                )}
              >
                {"No matching published entries found."}
              </div>
            )}
          </DataCtxReader__>
        }
        fields={["type", "menuName", "icon", "link"]}
        filterField={(() => {
          try {
            return "type";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "menuName";
            }
            throw e;
          }
        })()}
        filterValue={"more bottom"}
        forceEmptyState={false}
        forceLoadingState={false}
        limit={0}
        loadingMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__b91U4,
                  {
                    [sty.textmobileView__b91U4IyJEu]: hasVariant(
                      $state,
                      "mobileView",
                      "mobileView"
                    )
                  }
                )}
              >
                {"Loading..."}
              </div>
            )}
          </DataCtxReader__>
        }
        mode={"rows"}
        noAutoRepeat={false}
        noLayout={false}
        table={"menu"}
        useDraft={false}
      >
        <DataCtxReader__>
          {$ctx => (
            <div
              className={classNames(projectcss.all, sty.freeBox__zN1OD, {
                [sty.freeBoxmobileView__zN1ODIyJEu]: hasVariant(
                  $state,
                  "mobileView",
                  "mobileView"
                )
              })}
            >
              <AtomMenuItem
                className={classNames(
                  "__wab_instance",
                  sty.atomMenuItem__nn1OR,
                  {
                    [sty.atomMenuItemmobileView__nn1ORIyJEu]: hasVariant(
                      $state,
                      "mobileView",
                      "mobileView"
                    )
                  }
                )}
                icon={(() => {
                  try {
                    return $ctx.plasmicCmsMenuItem.data.icon.url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return {
                        src: "/plasmic/elbrit_app/images/_3507746CardGiftIconotekaMoneyRedeemShopShopping107669Svg.svg",
                        fullWidth: 24,
                        fullHeight: 24,
                        aspectRatio: 1
                      };
                    }
                    throw e;
                  }
                })()}
                iconMode={
                  hasVariant($state, "mobileView", "mobileView")
                    ? (() => {
                        try {
                          return $state.collapse;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return $state.collapse;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                }
                link={(() => {
                  try {
                    return $ctx.plasmicCmsMenuItem.data.link;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return `/giftcard`;
                    }
                    throw e;
                  }
                })()}
                name={(() => {
                  try {
                    return $ctx.plasmicCmsMenuItem.data.menuName;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          )}
        </DataCtxReader__>
      </CmsQueryRepeater>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  rowContainer: [
    "rowContainer",
    "link",
    "leftBar",
    "rightBar",
    "moreTop",
    "moreBottom"
  ],
  link: ["link"],
  leftBar: ["leftBar"],
  rightBar: ["rightBar"],
  moreTop: ["moreTop"],
  moreBottom: ["moreBottom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  rowContainer: "div";
  link: "a";
  leftBar: typeof CmsQueryRepeater;
  rightBar: typeof CmsQueryRepeater;
  moreTop: typeof CmsQueryRepeater;
  moreBottom: typeof CmsQueryRepeater;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebar__VariantsArgs;
    args?: PlasmicSidebar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSidebar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSidebar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSidebar__ArgProps,
          internalVariantPropNames: PlasmicSidebar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSidebar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "rowContainer") {
    func.displayName = "PlasmicSidebar";
  } else {
    func.displayName = `PlasmicSidebar.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebar = Object.assign(
  // Top-level PlasmicSidebar renders the root element
  makeNodeComponent("rowContainer"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    leftBar: makeNodeComponent("leftBar"),
    rightBar: makeNodeComponent("rightBar"),
    moreTop: makeNodeComponent("moreTop"),
    moreBottom: makeNodeComponent("moreBottom"),

    // Metadata about props expected for PlasmicSidebar
    internalVariantProps: PlasmicSidebar__VariantProps,
    internalArgProps: PlasmicSidebar__ArgProps
  }
);

export default PlasmicSidebar;
/* prettier-ignore-end */
