/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiawYdGgGKrh1ZZAv15gDZ
// Component: 3cYdV3fPNhqB

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: oiawYdGgGKrh1ZZAv15gDZ/projectcss
import sty from "./PlasmicAtomDynamicIcon.module.css"; // plasmic-import: 3cYdV3fPNhqB/css

createPlasmicElementProxy;

export type PlasmicAtomDynamicIcon__VariantMembers = {};
export type PlasmicAtomDynamicIcon__VariantsArgs = {};
type VariantPropType = keyof PlasmicAtomDynamicIcon__VariantsArgs;
export const PlasmicAtomDynamicIcon__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAtomDynamicIcon__ArgsType = { name?: string };
type ArgPropType = keyof PlasmicAtomDynamicIcon__ArgsType;
export const PlasmicAtomDynamicIcon__ArgProps = new Array<ArgPropType>("name");

export type PlasmicAtomDynamicIcon__OverridesType = {
  root?: Flex__<typeof CmsQueryRepeater>;
  cmsEntryField?: Flex__<typeof CmsRowField>;
};

export interface DefaultAtomDynamicIconProps {
  name?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAtomDynamicIcon__RenderFunc(props: {
  variants: PlasmicAtomDynamicIcon__VariantsArgs;
  args: PlasmicAtomDynamicIcon__ArgsType;
  overrides: PlasmicAtomDynamicIcon__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          name: "settings"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <CmsQueryRepeater
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_library_tailwind_3_4_colors,
        styleTokensClassNames_library_tailwind_3_4_number_tokens,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
      desc={false}
      emptyMessage={
        <DataCtxReader__>
          {$ctx => (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6D0T3
              )}
            >
              {"No matching published entries found."}
            </div>
          )}
        </DataCtxReader__>
      }
      filterField={"name"}
      filterValue={(() => {
        try {
          return $props.name;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      forceEmptyState={false}
      forceLoadingState={false}
      limit={0}
      loadingMessage={
        <DataCtxReader__>
          {$ctx => (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ffBtL
              )}
            >
              {"Loading..."}
            </div>
          )}
        </DataCtxReader__>
      }
      noAutoRepeat={false}
      noLayout={false}
      table={"icons"}
      useDraft={false}
    >
      <DataCtxReader__>
        {$ctx => (
          <CmsRowField
            data-plasmic-name={"cmsEntryField"}
            data-plasmic-override={overrides.cmsEntryField}
            className={classNames("__wab_instance", sty.cmsEntryField)}
            field={"icon"}
            themeResetClassName={classNames(
              projectcss.root_reset,
              projectcss.root_reset_tags,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames,
              styleTokensClassNames_antd_5_hostless,
              styleTokensClassNames_library_tailwind_3_4_colors,
              styleTokensClassNames_library_tailwind_3_4_number_tokens,
              styleTokensClassNames_plasmic_rich_components
            )}
          />
        )}
      </DataCtxReader__>
    </CmsQueryRepeater>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "cmsEntryField"],
  cmsEntryField: ["cmsEntryField"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof CmsQueryRepeater;
  cmsEntryField: typeof CmsRowField;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAtomDynamicIcon__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAtomDynamicIcon__VariantsArgs;
    args?: PlasmicAtomDynamicIcon__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAtomDynamicIcon__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAtomDynamicIcon__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAtomDynamicIcon__ArgProps,
          internalVariantPropNames: PlasmicAtomDynamicIcon__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAtomDynamicIcon__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAtomDynamicIcon";
  } else {
    func.displayName = `PlasmicAtomDynamicIcon.${nodeName}`;
  }
  return func;
}

export const PlasmicAtomDynamicIcon = Object.assign(
  // Top-level PlasmicAtomDynamicIcon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    cmsEntryField: makeNodeComponent("cmsEntryField"),

    // Metadata about props expected for PlasmicAtomDynamicIcon
    internalVariantProps: PlasmicAtomDynamicIcon__VariantProps,
    internalArgProps: PlasmicAtomDynamicIcon__ArgProps
  }
);

export default PlasmicAtomDynamicIcon;
/* prettier-ignore-end */
